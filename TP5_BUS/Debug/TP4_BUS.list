
TP4_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008814  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080089a8  080089a8  000189a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f0c  08008f0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f14  08008f14  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001dc  080090f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080090f8  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abf0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003355  00000000  00000000  0003adfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0003f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029079  00000000  00000000  0003ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001391a  00000000  00000000  00068f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8dd  00000000  00000000  0007c893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fbc  00000000  00000000  0016b1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800898c 	.word	0x0800898c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800898c 	.word	0x0800898c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b9 	b.w	8000f3c <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <MX_CAN1_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f90:	f001 f9da 	bl	8002348 <HAL_CAN_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f9a:	f000 feab 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000020c 	.word	0x2000020c
 8000fa8:	40006400 	.word	0x40006400

08000fac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_CAN_MspInit+0x7c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d128      	bne.n	8001020 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_CAN_MspInit+0x80>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001010:	2309      	movs	r3, #9
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_CAN_MspInit+0x84>)
 800101c:	f001 fc64 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40006400 	.word	0x40006400
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400

08001034 <Ligne_Init>:
int16_t dig_P6;
int16_t dig_P7;
int16_t dig_P8;
int16_t dig_P9;

void Ligne_Init(UART_HandleTypeDef *huart){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)&LIGNE, 7, 0xFFFF);
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	2207      	movs	r2, #7
 8001042:	4904      	ldr	r1, [pc, #16]	; (8001054 <Ligne_Init+0x20>)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f003 fe45 	bl	8004cd4 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08008ab0 	.word	0x08008ab0

08001058 <Commande_exec>:

void Commande_exec(int i){
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	int commande_existe=0;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
	if ((strncmp(Commande,SET_K,i)==0) && (i==strlen(SET_K))){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	4947      	ldr	r1, [pc, #284]	; (8001188 <Commande_exec+0x130>)
 800106a:	4848      	ldr	r0, [pc, #288]	; (800118c <Commande_exec+0x134>)
 800106c:	f005 fcda 	bl	8006a24 <strncmp>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <Commande_exec+0x2e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d104      	bne.n	8001086 <Commande_exec+0x2e>
		printf("\r\nSET_K non implémenté \r\n");
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <Commande_exec+0x138>)
 800107e:	f005 fcb9 	bl	80069f4 <puts>
		commande_existe=1;
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_K,i)==0) && (i==strlen(GET_K))){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	461a      	mov	r2, r3
 800108a:	4942      	ldr	r1, [pc, #264]	; (8001194 <Commande_exec+0x13c>)
 800108c:	483f      	ldr	r0, [pc, #252]	; (800118c <Commande_exec+0x134>)
 800108e:	f005 fcc9 	bl	8006a24 <strncmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <Commande_exec+0x50>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b05      	cmp	r3, #5
 800109c:	d104      	bne.n	80010a8 <Commande_exec+0x50>
		printf("\r\nGET_K OK non implémenté\r\n");
 800109e:	483e      	ldr	r0, [pc, #248]	; (8001198 <Commande_exec+0x140>)
 80010a0:	f005 fca8 	bl	80069f4 <puts>
		commande_existe=1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_A,i)==0) && (i==strlen(GET_A))){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	461a      	mov	r2, r3
 80010ac:	493b      	ldr	r1, [pc, #236]	; (800119c <Commande_exec+0x144>)
 80010ae:	4837      	ldr	r0, [pc, #220]	; (800118c <Commande_exec+0x134>)
 80010b0:	f005 fcb8 	bl	8006a24 <strncmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d107      	bne.n	80010ca <Commande_exec+0x72>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d104      	bne.n	80010ca <Commande_exec+0x72>
		printf("\r\nGET_A non implémenté \r\n");
 80010c0:	4837      	ldr	r0, [pc, #220]	; (80011a0 <Commande_exec+0x148>)
 80010c2:	f005 fc97 	bl	80069f4 <puts>
		commande_existe=1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_P,i)==0) && (i==strlen(GET_P))){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4935      	ldr	r1, [pc, #212]	; (80011a4 <Commande_exec+0x14c>)
 80010d0:	482e      	ldr	r0, [pc, #184]	; (800118c <Commande_exec+0x134>)
 80010d2:	f005 fca7 	bl	8006a24 <strncmp>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d120      	bne.n	800111e <Commande_exec+0xc6>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d11d      	bne.n	800111e <Commande_exec+0xc6>
		printf("\r\n");
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <Commande_exec+0x150>)
 80010e4:	f005 fc86 	bl	80069f4 <puts>
		BMP280_S32_t P_nc = Get_P();
 80010e8:	f000 f9ff 	bl	80014ea <Get_P>
 80010ec:	61b8      	str	r0, [r7, #24]
		BMP280_U32_t P=bmp280_compensate_P_int64(P_nc);
 80010ee:	69b8      	ldr	r0, [r7, #24]
 80010f0:	f000 fa62 	bl	80015b8 <bmp280_compensate_P_int64>
 80010f4:	6178      	str	r0, [r7, #20]
		printf("%.0f Pa\r\n",(float)P/256);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001100:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80011ac <Commande_exec+0x154>
 8001104:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001108:	ee16 0a90 	vmov	r0, s13
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4826      	ldr	r0, [pc, #152]	; (80011b0 <Commande_exec+0x158>)
 8001116:	f005 fbe7 	bl	80068e8 <iprintf>
		commande_existe=1;
 800111a:	2301      	movs	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_T,i)==0) && (i==strlen(GET_T))){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	461a      	mov	r2, r3
 8001122:	4924      	ldr	r1, [pc, #144]	; (80011b4 <Commande_exec+0x15c>)
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <Commande_exec+0x134>)
 8001126:	f005 fc7d 	bl	8006a24 <strncmp>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d120      	bne.n	8001172 <Commande_exec+0x11a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d11d      	bne.n	8001172 <Commande_exec+0x11a>
		printf("\r\n");
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <Commande_exec+0x150>)
 8001138:	f005 fc5c 	bl	80069f4 <puts>
		BMP280_S32_t T_nc =Get_T();
 800113c:	f000 f9b0 	bl	80014a0 <Get_T>
 8001140:	6138      	str	r0, [r7, #16]
		BMP280_S32_t T=bmp280_compensate_T_int32(T_nc);
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f000 f9f6 	bl	8001534 <bmp280_compensate_T_int32>
 8001148:	60f8      	str	r0, [r7, #12]
		printf("%.2f C\r\n",(float)T/100);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011b8 <Commande_exec+0x160>
 8001158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800115c:	ee16 0a90 	vmov	r0, s13
 8001160:	f7ff f9f2 	bl	8000548 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4814      	ldr	r0, [pc, #80]	; (80011bc <Commande_exec+0x164>)
 800116a:	f005 fbbd 	bl	80068e8 <iprintf>
		commande_existe=1;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
	}
	if(commande_existe==0){
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <Commande_exec+0x126>
		printf("\r\nCette commande n'existe pas\r\n");
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <Commande_exec+0x168>)
 800117a:	f005 fc3b 	bl	80069f4 <puts>
	}
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08008ab8 	.word	0x08008ab8
 800118c:	200002a0 	.word	0x200002a0
 8001190:	080089a8 	.word	0x080089a8
 8001194:	08008ac0 	.word	0x08008ac0
 8001198:	080089c4 	.word	0x080089c4
 800119c:	08008ac8 	.word	0x08008ac8
 80011a0:	080089e4 	.word	0x080089e4
 80011a4:	08008ad0 	.word	0x08008ad0
 80011a8:	08008a00 	.word	0x08008a00
 80011ac:	43800000 	.word	0x43800000
 80011b0:	08008a04 	.word	0x08008a04
 80011b4:	08008ad8 	.word	0x08008ad8
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	08008a10 	.word	0x08008a10
 80011c0:	08008a1c 	.word	0x08008a1c

080011c4 <BMP280_Write_Reg>:
	}

	printf("L'ID est 0x%x\r\n", buf[0]);
}

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c2, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80011dc:	23ee      	movs	r3, #238	; 0xee
 80011de:	b299      	uxth	r1, r3
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2302      	movs	r3, #2
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <BMP280_Write_Reg+0x7c>)
 80011ee:	f001 fdb5 	bl	8002d5c <HAL_I2C_Master_Transmit>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <BMP280_Write_Reg+0x3e>
		printf("Erreur Tx\r\n");
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <BMP280_Write_Reg+0x80>)
 80011fe:	f005 fbf9 	bl	80069f4 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c2, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8001202:	23ee      	movs	r3, #238	; 0xee
 8001204:	b299      	uxth	r1, r3
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <BMP280_Write_Reg+0x7c>)
 8001214:	f001 fe96 	bl	8002f44 <HAL_I2C_Master_Receive>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <BMP280_Write_Reg+0x64>
		printf("Erreur Rx\r\n");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <BMP280_Write_Reg+0x84>)
 8001224:	f005 fbe6 	bl	80069f4 <puts>
	}

	if (buf[0] == value) {
 8001228:	7b3b      	ldrb	r3, [r7, #12]
 800122a:	79ba      	ldrb	r2, [r7, #6]
 800122c:	429a      	cmp	r2, r3
 800122e:	d101      	bne.n	8001234 <BMP280_Write_Reg+0x70>
		return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8001234:	2301      	movs	r3, #1
	}
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000250 	.word	0x20000250
 8001244:	08008a3c 	.word	0x08008a3c
 8001248:	08008a48 	.word	0x08008a48

0800124c <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c2, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 800125c:	23ee      	movs	r3, #238	; 0xee
 800125e:	b299      	uxth	r1, r3
 8001260:	1dfa      	adds	r2, r7, #7
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <BMP280_Read_Reg+0x70>)
 800126c:	f001 fd76 	bl	8002d5c <HAL_I2C_Master_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <BMP280_Read_Reg+0x34>
		printf("Erreur Tx\r\n");
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <BMP280_Read_Reg+0x74>)
 800127c:	f005 fbba 	bl	80069f4 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fe04 	bl	8005e90 <malloc>
 8001288:	4603      	mov	r3, r0
 800128a:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c2, BMP280_ADDR, buf, length,HAL_MAX_DELAY);
 800128c:	23ee      	movs	r3, #238	; 0xee
 800128e:	b299      	uxth	r1, r3
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	b29b      	uxth	r3, r3
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <BMP280_Read_Reg+0x70>)
 800129e:	f001 fe51 	bl	8002f44 <HAL_I2C_Master_Receive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <BMP280_Read_Reg+0x66>
		printf("Erreur Rx\r\n");
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <BMP280_Read_Reg+0x78>)
 80012ae:	f005 fba1 	bl	80069f4 <puts>
	}

	return buf;
 80012b2:	68bb      	ldr	r3, [r7, #8]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000250 	.word	0x20000250
 80012c0:	08008a3c 	.word	0x08008a3c
 80012c4:	08008a48 	.word	0x08008a48

080012c8 <Set_config>:

//Config du BMP280
void Set_config(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t val = 0x57;
 80012ce:	2357      	movs	r3, #87	; 0x57
 80012d0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = 0xF4;
 80012d2:	23f4      	movs	r3, #244	; 0xf4
 80012d4:	71bb      	strb	r3, [r7, #6]

	ret = BMP280_Write_Reg(reg, val);
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff71 	bl	80011c4 <BMP280_Write_Reg>
 80012e2:	4603      	mov	r3, r0
 80012e4:	717b      	strb	r3, [r7, #5]
	if (ret == 0) {
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <Set_config+0x2c>
		printf("Config Ok\r\n");
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <Set_config+0x3c>)
 80012ee:	f005 fb81 	bl	80069f4 <puts>
	} else {
		printf("Erreur Config\r\n");
	}
}
 80012f2:	e002      	b.n	80012fa <Set_config+0x32>
		printf("Erreur Config\r\n");
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <Set_config+0x40>)
 80012f6:	f005 fb7d 	bl	80069f4 <puts>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08008a64 	.word	0x08008a64
 8001308:	08008a70 	.word	0x08008a70

0800130c <Get_calib>:

void Get_calib(){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	uint8_t *buf;
	uint8_t reg = 0x88;
 8001312:	2388      	movs	r3, #136	; 0x88
 8001314:	71fb      	strb	r3, [r7, #7]
	uint8_t length = 24;
 8001316:	2318      	movs	r3, #24
 8001318:	71bb      	strb	r3, [r7, #6]

	buf = BMP280_Read_Reg(reg, length);
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff93 	bl	800124c <BMP280_Read_Reg>
 8001326:	6038      	str	r0, [r7, #0]
	//	dig_P5 = ((int16_t)buf[14] << 4) | (buf[15] >> 4);
	//	dig_P6 = ((int16_t)buf[16] << 4) | (buf[17] >> 4);
	//	dig_P7 = ((int16_t)buf[18] << 4) | (buf[19] >> 4);
	//	dig_P8 = ((int16_t)buf[20] << 4) | (buf[21] >> 4);
	//	dig_P9 = ((int16_t)buf[22] << 4) | (buf[23] >> 4);
	dig_T1 = buf[0] | buf[1] << 8;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b21a      	sxth	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <Get_calib+0x164>)
 8001340:	801a      	strh	r2, [r3, #0]
	dig_T2 = buf[2] | buf[3] << 8;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3302      	adds	r3, #2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b21a      	sxth	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3303      	adds	r3, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <Get_calib+0x168>)
 800135a:	801a      	strh	r2, [r3, #0]
	dig_T3 = buf[4] | buf[5] << 8;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b21a      	sxth	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3305      	adds	r3, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <Get_calib+0x16c>)
 8001374:	801a      	strh	r2, [r3, #0]
	dig_P1 = buf[6] | buf[7] << 8;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	3306      	adds	r3, #6
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b21a      	sxth	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3307      	adds	r3, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <Get_calib+0x170>)
 8001390:	801a      	strh	r2, [r3, #0]
	dig_P2 = buf[8] | buf[9] << 8;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3308      	adds	r3, #8
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b21a      	sxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3309      	adds	r3, #9
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <Get_calib+0x174>)
 80013aa:	801a      	strh	r2, [r3, #0]
	dig_P3 = buf[10] | buf[11] << 8;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	330a      	adds	r3, #10
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	330b      	adds	r3, #11
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <Get_calib+0x178>)
 80013c4:	801a      	strh	r2, [r3, #0]
	dig_P4 = buf[12] | buf[13] << 8;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	330c      	adds	r3, #12
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	330d      	adds	r3, #13
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <Get_calib+0x17c>)
 80013de:	801a      	strh	r2, [r3, #0]
	dig_P5 = buf[14] | buf[15] << 8;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	330e      	adds	r3, #14
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	330f      	adds	r3, #15
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <Get_calib+0x180>)
 80013f8:	801a      	strh	r2, [r3, #0]
	dig_P6 = buf[16] | buf[17] << 8;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3310      	adds	r3, #16
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b21a      	sxth	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3311      	adds	r3, #17
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21a      	sxth	r2, r3
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <Get_calib+0x184>)
 8001412:	801a      	strh	r2, [r3, #0]
	dig_P7 = buf[18] | buf[19] << 8;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3312      	adds	r3, #18
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b21a      	sxth	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3313      	adds	r3, #19
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21a      	sxth	r2, r3
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <Get_calib+0x188>)
 800142c:	801a      	strh	r2, [r3, #0]
	dig_P8 = buf[20] | buf[21] << 8;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3314      	adds	r3, #20
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b21a      	sxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3315      	adds	r3, #21
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <Get_calib+0x18c>)
 8001446:	801a      	strh	r2, [r3, #0]
	dig_P9 = buf[22] | buf[23] << 8;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3316      	adds	r3, #22
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b21a      	sxth	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3317      	adds	r3, #23
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <Get_calib+0x190>)
 8001460:	801a      	strh	r2, [r3, #0]

	free(buf);
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f004 fd1c 	bl	8005ea0 <free>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000236 	.word	0x20000236
 8001474:	20000238 	.word	0x20000238
 8001478:	20000248 	.word	0x20000248
 800147c:	20000240 	.word	0x20000240
 8001480:	2000023a 	.word	0x2000023a
 8001484:	20000242 	.word	0x20000242
 8001488:	2000023c 	.word	0x2000023c
 800148c:	2000023e 	.word	0x2000023e
 8001490:	2000024a 	.word	0x2000024a
 8001494:	20000234 	.word	0x20000234
 8001498:	20000244 	.word	0x20000244
 800149c:	20000246 	.word	0x20000246

080014a0 <Get_T>:

BMP280_S32_t Get_T() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;
	uint8_t reg = 0xFA;
 80014a6:	23fa      	movs	r3, #250	; 0xfa
 80014a8:	73fb      	strb	r3, [r7, #15]
	uint8_t length = 3;
 80014aa:	2303      	movs	r3, #3
 80014ac:	73bb      	strb	r3, [r7, #14]

	buf = BMP280_Read_Reg(reg, length);
 80014ae:	7bba      	ldrb	r2, [r7, #14]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fec9 	bl	800124c <BMP280_Read_Reg>
 80014ba:	60b8      	str	r0, [r7, #8]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	031a      	lsls	r2, r3, #12
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4313      	orrs	r3, r2
					| ((BMP280_S32_t) (buf[2]) >> 4);
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	3202      	adds	r2, #2
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	0912      	lsrs	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	607b      	str	r3, [r7, #4]

	free(buf);
 80014da:	68b8      	ldr	r0, [r7, #8]
 80014dc:	f004 fce0 	bl	8005ea0 <free>

	return adc_T;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <Get_P>:

BMP280_S32_t Get_P() {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;
	uint8_t reg = 0xF7;
 80014f0:	23f7      	movs	r3, #247	; 0xf7
 80014f2:	73fb      	strb	r3, [r7, #15]
	uint8_t length = 3;
 80014f4:	2303      	movs	r3, #3
 80014f6:	73bb      	strb	r3, [r7, #14]

	buf = BMP280_Read_Reg(reg, length);
 80014f8:	7bba      	ldrb	r2, [r7, #14]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fea4 	bl	800124c <BMP280_Read_Reg>
 8001504:	60b8      	str	r0, [r7, #8]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	031a      	lsls	r2, r3, #12
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3301      	adds	r3, #1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4313      	orrs	r3, r2
					| ((BMP280_S32_t) (buf[2]) >> 4);
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	3202      	adds	r2, #2
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	0912      	lsrs	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001520:	4313      	orrs	r3, r2
 8001522:	607b      	str	r3, [r7, #4]

	free(buf);
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f004 fcbb 	bl	8005ea0 <free>

	return adc_P;
 800152a:	687b      	ldr	r3, [r7, #4]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <bmp280_compensate_T_int32>:

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T){
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1  = ((((adc_T>>3)-((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	10da      	asrs	r2, r3, #3
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <bmp280_compensate_T_int32+0x74>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <bmp280_compensate_T_int32+0x78>)
 800154a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	12db      	asrs	r3, r3, #11
 8001554:	617b      	str	r3, [r7, #20]
	var2  = (((((adc_T>>4)-((BMP280_S32_t)dig_T1)) * ((adc_T>>4)-((BMP280_S32_t)dig_T1))) >> 12) *((BMP280_S32_t)dig_T3)) >> 14;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	111b      	asrs	r3, r3, #4
 800155a:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <bmp280_compensate_T_int32+0x74>)
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	1112      	asrs	r2, r2, #4
 8001564:	4910      	ldr	r1, [pc, #64]	; (80015a8 <bmp280_compensate_T_int32+0x74>)
 8001566:	8809      	ldrh	r1, [r1, #0]
 8001568:	1a52      	subs	r2, r2, r1
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	131b      	asrs	r3, r3, #12
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <bmp280_compensate_T_int32+0x7c>)
 8001572:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	139b      	asrs	r3, r3, #14
 800157c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <bmp280_compensate_T_int32+0x80>)
 8001586:	6013      	str	r3, [r2, #0]
	T  = (t_fine * 5 + 128) >> 8;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <bmp280_compensate_T_int32+0x80>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3380      	adds	r3, #128	; 0x80
 8001594:	121b      	asrs	r3, r3, #8
 8001596:	60fb      	str	r3, [r7, #12]
	return T;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000236 	.word	0x20000236
 80015ac:	20000238 	.word	0x20000238
 80015b0:	20000248 	.word	0x20000248
 80015b4:	2000024c 	.word	0x2000024c

080015b8 <bmp280_compensate_P_int64>:

BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P){
 80015b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015bc:	b09a      	sub	sp, #104	; 0x68
 80015be:	af00      	add	r7, sp, #0
 80015c0:	64f8      	str	r0, [r7, #76]	; 0x4c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine)-128000;
 80015c2:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <bmp280_compensate_P_int64+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015cc:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015d0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015d4:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 80015d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015dc:	fb03 f102 	mul.w	r1, r3, r2
 80015e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e4:	fb03 f302 	mul.w	r3, r3, r2
 80015e8:	18ca      	adds	r2, r1, r3
 80015ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ec:	fba3 4503 	umull	r4, r5, r3, r3
 80015f0:	1953      	adds	r3, r2, r5
 80015f2:	461d      	mov	r5, r3
 80015f4:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <bmp280_compensate_P_int64+0x1bc>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001600:	fb02 f005 	mul.w	r0, r2, r5
 8001604:	fb04 f103 	mul.w	r1, r4, r3
 8001608:	4401      	add	r1, r0
 800160a:	fba4 2302 	umull	r2, r3, r4, r2
 800160e:	4419      	add	r1, r3
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001616:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <bmp280_compensate_P_int64+0x1c0>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	b21a      	sxth	r2, r3
 8001622:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001626:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001628:	fb03 f001 	mul.w	r0, r3, r1
 800162c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800162e:	fb02 f101 	mul.w	r1, r2, r1
 8001632:	4408      	add	r0, r1
 8001634:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001636:	fba1 2302 	umull	r2, r3, r1, r2
 800163a:	18c1      	adds	r1, r0, r3
 800163c:	460b      	mov	r3, r1
 800163e:	f04f 0000 	mov.w	r0, #0
 8001642:	f04f 0100 	mov.w	r1, #0
 8001646:	0459      	lsls	r1, r3, #17
 8001648:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800164c:	0450      	lsls	r0, r2, #17
 800164e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001652:	eb12 0800 	adds.w	r8, r2, r0
 8001656:	eb43 0901 	adc.w	r9, r3, r1
 800165a:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <bmp280_compensate_P_int64+0x1c4>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	b21a      	sxth	r2, r3
 8001666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	00d1      	lsls	r1, r2, #3
 8001674:	2000      	movs	r0, #0
 8001676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800167a:	1814      	adds	r4, r2, r0
 800167c:	61bc      	str	r4, [r7, #24]
 800167e:	414b      	adcs	r3, r1
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001686:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 800168a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800168c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800168e:	fb03 f102 	mul.w	r1, r3, r2
 8001692:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001696:	fb03 f302 	mul.w	r3, r3, r2
 800169a:	18ca      	adds	r2, r1, r3
 800169c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169e:	fba3 4503 	umull	r4, r5, r3, r3
 80016a2:	1953      	adds	r3, r2, r5
 80016a4:	461d      	mov	r5, r3
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <bmp280_compensate_P_int64+0x1c8>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016b2:	fb02 f005 	mul.w	r0, r2, r5
 80016b6:	fb04 f103 	mul.w	r1, r4, r3
 80016ba:	4401      	add	r1, r0
 80016bc:	fba4 2302 	umull	r2, r3, r4, r2
 80016c0:	4419      	add	r1, r3
 80016c2:	460b      	mov	r3, r1
 80016c4:	f04f 0800 	mov.w	r8, #0
 80016c8:	f04f 0900 	mov.w	r9, #0
 80016cc:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016d0:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016d4:	ea4f 2923 	mov.w	r9, r3, asr #8
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <bmp280_compensate_P_int64+0x1cc>)
 80016da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016de:	b21a      	sxth	r2, r3
 80016e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016e6:	fb03 f001 	mul.w	r0, r3, r1
 80016ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80016ec:	fb02 f101 	mul.w	r1, r2, r1
 80016f0:	1844      	adds	r4, r0, r1
 80016f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016f4:	fba1 0102 	umull	r0, r1, r1, r2
 80016f8:	1863      	adds	r3, r4, r1
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	030b      	lsls	r3, r1, #12
 8001706:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800170a:	0302      	lsls	r2, r0, #12
 800170c:	eb18 0102 	adds.w	r1, r8, r2
 8001710:	6139      	str	r1, [r7, #16]
 8001712:	eb49 0303 	adc.w	r3, r9, r3
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800171c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8001720:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001724:	1c11      	adds	r1, r2, #0
 8001726:	6439      	str	r1, [r7, #64]	; 0x40
 8001728:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <bmp280_compensate_P_int64+0x1d0>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b29a      	uxth	r2, r3
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800173c:	4629      	mov	r1, r5
 800173e:	fb02 f001 	mul.w	r0, r2, r1
 8001742:	4621      	mov	r1, r4
 8001744:	fb01 f103 	mul.w	r1, r1, r3
 8001748:	4401      	add	r1, r0
 800174a:	4620      	mov	r0, r4
 800174c:	fba0 2302 	umull	r2, r3, r0, r2
 8001750:	4419      	add	r1, r3
 8001752:	460b      	mov	r3, r1
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	1058      	asrs	r0, r3, #1
 800175e:	17d9      	asrs	r1, r3, #31
 8001760:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	if (var1 == 0)
 8001764:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001768:	4313      	orrs	r3, r2
 800176a:	d10f      	bne.n	800178c <bmp280_compensate_P_int64+0x1d4>
	{
		return 0; // avoid exception caused by division by zero
 800176c:	2300      	movs	r3, #0
 800176e:	e0ef      	b.n	8001950 <bmp280_compensate_P_int64+0x398>
 8001770:	2000024c 	.word	0x2000024c
 8001774:	2000024a 	.word	0x2000024a
 8001778:	2000023e 	.word	0x2000023e
 800177c:	2000023c 	.word	0x2000023c
 8001780:	20000242 	.word	0x20000242
 8001784:	2000023a 	.word	0x2000023a
 8001788:	20000240 	.word	0x20000240
	}
	p = 1048576-adc_P;
 800178c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001792:	461a      	mov	r2, r3
 8001794:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001798:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	p = (((p<<31)-var2)*3125)/var1;
 800179c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179e:	105b      	asrs	r3, r3, #1
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a4:	07db      	lsls	r3, r3, #31
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017ac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80017b0:	4621      	mov	r1, r4
 80017b2:	ebb1 0a02 	subs.w	sl, r1, r2
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb61 0b03 	sbc.w	fp, r1, r3
 80017bc:	4652      	mov	r2, sl
 80017be:	465b      	mov	r3, fp
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	415b      	adcs	r3, r3
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017cc:	eb12 020a 	adds.w	r2, r2, sl
 80017d0:	eb43 030b 	adc.w	r3, r3, fp
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	0199      	lsls	r1, r3, #6
 80017de:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80017e2:	0190      	lsls	r0, r2, #6
 80017e4:	1812      	adds	r2, r2, r0
 80017e6:	eb41 0303 	adc.w	r3, r1, r3
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017f8:	0090      	lsls	r0, r2, #2
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	eb12 020a 	adds.w	r2, r2, sl
 8001802:	eb43 030b 	adc.w	r3, r3, fp
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001814:	0090      	lsls	r0, r2, #2
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	eb12 010a 	adds.w	r1, r2, sl
 800181e:	6339      	str	r1, [r7, #48]	; 0x30
 8001820:	eb43 030b 	adc.w	r3, r3, fp
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
 8001826:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800182a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800182e:	f7ff f9bb 	bl	8000ba8 <__aeabi_ldivmod>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800183a:	4b48      	ldr	r3, [pc, #288]	; (800195c <bmp280_compensate_P_int64+0x3a4>)
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	b218      	sxth	r0, r3
 8001842:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001846:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	0b62      	lsrs	r2, r4, #13
 8001854:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001858:	136b      	asrs	r3, r5, #13
 800185a:	fb02 f501 	mul.w	r5, r2, r1
 800185e:	fb00 f403 	mul.w	r4, r0, r3
 8001862:	442c      	add	r4, r5
 8001864:	fba0 0102 	umull	r0, r1, r0, r2
 8001868:	1863      	adds	r3, r4, r1
 800186a:	4619      	mov	r1, r3
 800186c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	0b62      	lsrs	r2, r4, #13
 800187a:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800187e:	136b      	asrs	r3, r5, #13
 8001880:	fb02 f501 	mul.w	r5, r2, r1
 8001884:	fb00 f403 	mul.w	r4, r0, r3
 8001888:	442c      	add	r4, r5
 800188a:	fba0 0102 	umull	r0, r1, r0, r2
 800188e:	1863      	adds	r3, r4, r1
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	0e42      	lsrs	r2, r0, #25
 800189c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018a0:	164b      	asrs	r3, r1, #25
 80018a2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <bmp280_compensate_P_int64+0x3a8>)
 80018a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018b4:	fb03 f001 	mul.w	r0, r3, r1
 80018b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018ba:	fb02 f101 	mul.w	r1, r2, r1
 80018be:	1844      	adds	r4, r0, r1
 80018c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018c2:	fba1 0102 	umull	r0, r1, r1, r2
 80018c6:	1863      	adds	r3, r4, r1
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	0cc2      	lsrs	r2, r0, #19
 80018d4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018d8:	14cb      	asrs	r3, r1, #19
 80018da:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 80018de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018e6:	1884      	adds	r4, r0, r2
 80018e8:	62bc      	str	r4, [r7, #40]	; 0x28
 80018ea:	eb41 0303 	adc.w	r3, r1, r3
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018f4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018f8:	4621      	mov	r1, r4
 80018fa:	1889      	adds	r1, r1, r2
 80018fc:	6239      	str	r1, [r7, #32]
 80018fe:	4629      	mov	r1, r5
 8001900:	eb43 0101 	adc.w	r1, r3, r1
 8001904:	6279      	str	r1, [r7, #36]	; 0x24
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001912:	4623      	mov	r3, r4
 8001914:	0a18      	lsrs	r0, r3, #8
 8001916:	462b      	mov	r3, r5
 8001918:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800191c:	462b      	mov	r3, r5
 800191e:	1219      	asrs	r1, r3, #8
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <bmp280_compensate_P_int64+0x3ac>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21c      	sxth	r4, r3
 8001928:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	012b      	lsls	r3, r5, #4
 8001936:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800193a:	0122      	lsls	r2, r4, #4
 800193c:	1884      	adds	r4, r0, r2
 800193e:	603c      	str	r4, [r7, #0]
 8001940:	eb41 0303 	adc.w	r3, r1, r3
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e9d7 3400 	ldrd	r3, r4, [r7]
 800194a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	return (BMP280_U32_t)p;
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8001950:	4618      	mov	r0, r3
 8001952:	3768      	adds	r7, #104	; 0x68
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	20000246 	.word	0x20000246
 8001960:	20000244 	.word	0x20000244
 8001964:	20000234 	.word	0x20000234

08001968 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_GPIO_Init+0x44>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <MX_GPIO_Init+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_GPIO_Init+0x44>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_GPIO_Init+0x44>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <MX_GPIO_Init+0x44>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_GPIO_Init+0x44>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <MX_I2C2_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <MX_I2C2_Init+0x7c>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ec:	f001 f926 	bl	8002c3c <HAL_I2C_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019f6:	f000 f97d 	bl	8001cf4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019fe:	f001 fd77 	bl	80034f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a08:	f000 f974 	bl	8001cf4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_I2C2_Init+0x74>)
 8001a10:	f001 fdb9 	bl	8003586 <HAL_I2CEx_ConfigDigitalFilter>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 f96b 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000250 	.word	0x20000250
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	10909cec 	.word	0x10909cec

08001a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ac      	sub	sp, #176	; 0xb0
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2288      	movs	r2, #136	; 0x88
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fa2d 	bl	8005eb0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <HAL_I2C_MspInit+0xb0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d13b      	bne.n	8001ad8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fc27 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a78:	f000 f93c 	bl	8001cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001abc:	f000 ff14 	bl	80028e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_I2C_MspInit+0xb4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ad8:	bf00      	nop
 8001ada:	37b0      	adds	r7, #176	; 0xb0
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005800 	.word	0x40005800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f000 fbb4 	bl	800225e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f885 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f7ff ff35 	bl	8001968 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001afe:	f7ff fa1f 	bl	8000f40 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001b02:	f000 faa3 	bl	800204c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001b06:	f000 fa71 	bl	8001fec <MX_UART4_Init>
  MX_I2C2_Init();
 8001b0a:	f7ff ff51 	bl	80019b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n========== TP5 : Bus et Réseaux ==========\r\n");
 8001b0e:	4835      	ldr	r0, [pc, #212]	; (8001be4 <main+0xf8>)
 8001b10:	f004 ff70 	bl	80069f4 <puts>
	Set_config();
 8001b14:	f7ff fbd8 	bl	80012c8 <Set_config>
	Get_calib();
 8001b18:	f7ff fbf8 	bl	800130c <Get_calib>

	HAL_CAN_Start(&hcan1);
 8001b1c:	4832      	ldr	r0, [pc, #200]	; (8001be8 <main+0xfc>)
 8001b1e:	f000 fd0e 	bl	800253e <HAL_CAN_Start>

    CAN_TxHeaderTypeDef headerCAN;
	headerCAN.StdId = 0x61;
 8001b22:	2361      	movs	r3, #97	; 0x61
 8001b24:	603b      	str	r3, [r7, #0]
	headerCAN.ExtId =0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
	headerCAN.IDE =CAN_ID_STD;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
	headerCAN.RTR =CAN_RTR_DATA;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
	headerCAN.DLC =2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	613b      	str	r3, [r7, #16]
	headerCAN.TransmitGlobalTime =DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	753b      	strb	r3, [r7, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	492b      	ldr	r1, [pc, #172]	; (8001bec <main+0x100>)
 8001b3e:	482c      	ldr	r0, [pc, #176]	; (8001bf0 <main+0x104>)
 8001b40:	f003 f95c 	bl	8004dfc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t *) echo, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	4929      	ldr	r1, [pc, #164]	; (8001bec <main+0x100>)
 8001b48:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <main+0x108>)
 8001b4a:	f003 f957 	bl	8004dfc <HAL_UART_Receive_IT>
	Ligne_Init(&huart2);
 8001b4e:	4828      	ldr	r0, [pc, #160]	; (8001bf0 <main+0x104>)
 8001b50:	f7ff fa70 	bl	8001034 <Ligne_Init>
	//Ligne_Init(&huart4);
	while (1)
	{
		if (uart_it==1)
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <main+0x10c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d1fb      	bne.n	8001b54 <main+0x68>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *) echo, 1, 0xFFFF);
 8001b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b60:	2201      	movs	r2, #1
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <main+0x100>)
 8001b64:	4822      	ldr	r0, [pc, #136]	; (8001bf0 <main+0x104>)
 8001b66:	f003 f8b5 	bl	8004cd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart4, (uint8_t *) echo, 1, 0xFFFF);
 8001b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6e:	2201      	movs	r2, #1
 8001b70:	491e      	ldr	r1, [pc, #120]	; (8001bec <main+0x100>)
 8001b72:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <main+0x108>)
 8001b74:	f003 f8ae 	bl	8004cd4 <HAL_UART_Transmit>
			//Exécution de la commande après appui sur la touche entrer
			if (echo[0]==ENTER){
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <main+0x100>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	220d      	movs	r2, #13
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <main+0xae>
				Commande_exec(i);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <main+0x110>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fa66 	bl	8001058 <Commande_exec>
				i=0;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <main+0x110>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
				Ligne_Init(&huart2);
 8001b92:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <main+0x104>)
 8001b94:	f7ff fa4e 	bl	8001034 <Ligne_Init>
 8001b98:	e01f      	b.n	8001bda <main+0xee>
				//Ligne_Init(&huart4);
			}else{
				//Suppression d'un caractère après appui sur la touche delete
				if((echo[0]==DEL)&&(i>0)){
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <main+0x100>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	227f      	movs	r2, #127	; 0x7f
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d10f      	bne.n	8001bc4 <main+0xd8>
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <main+0x110>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	dd0b      	ble.n	8001bc4 <main+0xd8>
					Commande[i-1]=0;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <main+0x110>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <main+0x114>)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	54d1      	strb	r1, [r2, r3]
					i=i-1;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <main+0x110>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <main+0x110>)
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00a      	b.n	8001bda <main+0xee>
				}else{
					//Ecriture de la commande dans un buffer
					Commande[i]= echo[0];
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <main+0x110>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a08      	ldr	r2, [pc, #32]	; (8001bec <main+0x100>)
 8001bca:	7811      	ldrb	r1, [r2, #0]
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <main+0x114>)
 8001bce:	54d1      	strb	r1, [r2, r3]
					i=i+1;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <main+0x110>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <main+0x110>)
 8001bd8:	6013      	str	r3, [r2, #0]
				}
			}
			uart_it=0;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <main+0x10c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
		if (uart_it==1)
 8001be0:	e7b8      	b.n	8001b54 <main+0x68>
 8001be2:	bf00      	nop
 8001be4:	08008a80 	.word	0x08008a80
 8001be8:	2000020c 	.word	0x2000020c
 8001bec:	2000029c 	.word	0x2000029c
 8001bf0:	20000388 	.word	0x20000388
 8001bf4:	20000304 	.word	0x20000304
 8001bf8:	200001f8 	.word	0x200001f8
 8001bfc:	200001fc 	.word	0x200001fc
 8001c00:	200002a0 	.word	0x200002a0

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b096      	sub	sp, #88	; 0x58
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	2244      	movs	r2, #68	; 0x44
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f94c 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c2a:	f001 fd07 	bl	800363c <HAL_PWREx_ControlVoltageScaling>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c34:	f000 f85e 	bl	8001cf4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c38:	2310      	movs	r3, #16
 8001c3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c54:	2328      	movs	r3, #40	; 0x28
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 fd3d 	bl	80036e8 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c74:	f000 f83e 	bl	8001cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f90f 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c9c:	f000 f82a 	bl	8001cf4 <Error_Handler>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3758      	adds	r7, #88	; 0x58
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	uart_it=1;
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_UART_RxCpltCallback+0x38>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
	if(huart->Instance==UART4){
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_UART_RxCpltCallback+0x3c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d105      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart4, (uint8_t *) echo, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <HAL_UART_RxCpltCallback+0x40>)
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <HAL_UART_RxCpltCallback+0x44>)
 8001cc6:	f003 f899 	bl	8004dfc <HAL_UART_Receive_IT>
	}
	else{
		HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
	}
}
 8001cca:	e004      	b.n	8001cd6 <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <HAL_UART_RxCpltCallback+0x40>)
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <HAL_UART_RxCpltCallback+0x48>)
 8001cd2:	f003 f893 	bl	8004dfc <HAL_UART_Receive_IT>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200001f8 	.word	0x200001f8
 8001ce4:	40004c00 	.word	0x40004c00
 8001ce8:	2000029c 	.word	0x2000029c
 8001cec:	20000304 	.word	0x20000304
 8001cf0:	20000388 	.word	0x20000388

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cfc:	e7fe      	b.n	8001cfc <Error_Handler+0x8>
	...

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_MspInit+0x44>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <HAL_MspInit+0x44>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6613      	str	r3, [r2, #96]	; 0x60
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_MspInit+0x44>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_MspInit+0x44>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_MspInit+0x44>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_MspInit+0x44>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8001d50:	1d39      	adds	r1, r7, #4
 8001d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d56:	2201      	movs	r2, #1
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <__io_putchar+0x30>)
 8001d5a:	f002 ffbb 	bl	8004cd4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d5e:	1d39      	adds	r1, r7, #4
 8001d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d64:	2201      	movs	r2, #1
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <__io_putchar+0x34>)
 8001d68:	f002 ffb4 	bl	8004cd4 <HAL_UART_Transmit>

  return ch;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000304 	.word	0x20000304
 8001d7c:	20000388 	.word	0x20000388

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 fa9c 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f003 f853 	bl	8004e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000388 	.word	0x20000388

08001de8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <UART4_IRQHandler+0x10>)
 8001dee:	f003 f849 	bl	8004e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000304 	.word	0x20000304

08001dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_kill>:

int _kill(int pid, int sig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e16:	f004 f811 	bl	8005e3c <__errno>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2216      	movs	r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_exit>:

void _exit (int status)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe7 	bl	8001e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e3e:	e7fe      	b.n	8001e3e <_exit+0x12>

08001e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e00a      	b.n	8001e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e52:	f3af 8000 	nop.w
 8001e56:	4601      	mov	r1, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf0      	blt.n	8001e52 <_read+0x12>
	}

return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e009      	b.n	8001ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff57 	bl	8001d48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf1      	blt.n	8001e8c <_write+0x12>
	}
	return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f003 ff76 	bl	8005e3c <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20018000 	.word	0x20018000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000200 	.word	0x20000200
 8001f84:	20000420 	.word	0x20000420

08001f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <SystemInit+0x5c>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <SystemInit+0x5c>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <SystemInit+0x60>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <SystemInit+0x60>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <SystemInit+0x60>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <SystemInit+0x60>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <SystemInit+0x60>)
 8001fb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SystemInit+0x60>)
 8001fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <SystemInit+0x60>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <SystemInit+0x60>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SystemInit+0x60>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	40021000 	.word	0x40021000

08001fec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_UART4_Init+0x58>)
 8001ff2:	4a15      	ldr	r2, [pc, #84]	; (8002048 <MX_UART4_Init+0x5c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <MX_UART4_Init+0x58>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_UART4_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_UART4_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_UART4_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_UART4_Init+0x58>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_UART4_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_UART4_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_UART4_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_UART4_Init+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_UART4_Init+0x58>)
 8002030:	f002 fe02 	bl	8004c38 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800203a:	f7ff fe5b 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000304 	.word	0x20000304
 8002048:	40004c00 	.word	0x40004c00

0800204c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <MX_USART2_UART_Init+0x5c>)
 8002054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002090:	f002 fdd2 	bl	8004c38 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800209a:	f7ff fe2b 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000388 	.word	0x20000388
 80020a8:	40004400 	.word	0x40004400

080020ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ae      	sub	sp, #184	; 0xb8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2288      	movs	r2, #136	; 0x88
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 feef 	bl	8005eb0 <memset>
  if(uartHandle->Instance==UART4)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_UART_MspInit+0x154>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d144      	bne.n	8002166 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020dc:	2308      	movs	r3, #8
 80020de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 f8e9 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7ff fdfe 	bl	8001cf4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_UART_MspInit+0x158>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_UART_MspInit+0x158>)
 80020fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_UART_MspInit+0x158>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_UART_MspInit+0x158>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_UART_MspInit+0x158>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_UART_MspInit+0x158>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002128:	2303      	movs	r3, #3
 800212a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002140:	2308      	movs	r3, #8
 8002142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f000 fbca 	bl	80028e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2034      	movs	r0, #52	; 0x34
 800215a:	f000 fb10 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800215e:	2034      	movs	r0, #52	; 0x34
 8002160:	f000 fb29 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002164:	e048      	b.n	80021f8 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_UART_MspInit+0x15c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d143      	bne.n	80021f8 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002170:	2302      	movs	r3, #2
 8002172:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002174:	2300      	movs	r3, #0
 8002176:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4618      	mov	r0, r3
 800217e:	f002 f89f 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002188:	f7ff fdb4 	bl	8001cf4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_UART_MspInit+0x158>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_UART_MspInit+0x158>)
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_UART_MspInit+0x158>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_UART_MspInit+0x158>)
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_UART_MspInit+0x158>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_UART_MspInit+0x158>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021bc:	230c      	movs	r3, #12
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d4:	2307      	movs	r3, #7
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f000 fb80 	bl	80028e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2026      	movs	r0, #38	; 0x26
 80021ee:	f000 fac6 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021f2:	2026      	movs	r0, #38	; 0x26
 80021f4:	f000 fadf 	bl	80027b6 <HAL_NVIC_EnableIRQ>
}
 80021f8:	bf00      	nop
 80021fa:	37b8      	adds	r7, #184	; 0xb8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40004c00 	.word	0x40004c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40004400 	.word	0x40004400

0800220c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff feba 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
	ldr	r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopForever+0x12>)
	b	LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800222e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <LoopForever+0x16>)
	cmp	r2, r3
 8002236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f003 fe05 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223e:	f7ff fc55 	bl	8001aec <main>

08002242 <LoopForever>:

LoopForever:
    b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002248:	08008f1c 	.word	0x08008f1c
	ldr	r0, =_sdata
 800224c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002250:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002254:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002258:	20000420 	.word	0x20000420

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>

0800225e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 fa7d 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f80e 	bl	8002290 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	e001      	b.n	8002284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002280:	f7ff fd3e 	bl	8001d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002284:	79fb      	ldrb	r3, [r7, #7]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_InitTick+0x6c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_InitTick+0x70>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_InitTick+0x6c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fa89 	bl	80027d2 <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d809      	bhi.n	80022e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f000 fa53 	bl	800277e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_InitTick+0x74>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e007      	b.n	80022f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e004      	b.n	80022f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e001      	b.n	80022f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008
 800232c:	2000040c 	.word	0x2000040c

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000040c 	.word	0x2000040c

08002348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0ed      	b.n	8002536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fe20 	bl	8000fac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0202 	bic.w	r2, r2, #2
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff ffd8 	bl	8002330 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff ffd4 	bl	8002330 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0c5      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff ffb2 	bl	8002330 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7ff ffae 	bl	8002330 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09f      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0e5      	beq.n	80023d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7edb      	ldrb	r3, [r3, #27]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0210 	orr.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d12e      	bne.n	80025b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800256a:	f7ff fee1 	bl	8002330 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002570:	e012      	b.n	8002598 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002572:	f7ff fedd 	bl	8002330 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b0a      	cmp	r3, #10
 800257e:	d90b      	bls.n	8002598 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e012      	b.n	80025be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e006      	b.n	80025be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	; (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002734:	d301      	bcc.n	800273a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <SysTick_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002742:	210f      	movs	r1, #15
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f7ff ff8e 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <SysTick_Config+0x40>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <SysTick_Config+0x40>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff29 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff3e 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff8e 	bl	80026bc <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff5d 	bl	8002668 <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff31 	bl	800262c <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa2 	bl	8002724 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d008      	beq.n	8002814 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e022      	b.n	800285a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020e 	bic.w	r2, r2, #14
 8002822:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f003 021c 	and.w	r2, r3, #28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d005      	beq.n	800288a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2204      	movs	r2, #4
 8002882:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e029      	b.n	80028de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 020e 	bic.w	r2, r2, #14
 8002898:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
    }
  }
  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	e17f      	b.n	8002bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8171 	beq.w	8002bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d00b      	beq.n	8002930 <HAL_GPIO_Init+0x48>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002924:	2b11      	cmp	r3, #17
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b12      	cmp	r3, #18
 800292e:	d130      	bne.n	8002992 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002966:	2201      	movs	r2, #1
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0201 	and.w	r2, r3, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b03      	cmp	r3, #3
 800299c:	d118      	bne.n	80029d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029a4:	2201      	movs	r2, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	f003 0201 	and.w	r2, r3, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x128>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d123      	bne.n	8002a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0203 	and.w	r2, r3, #3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80ac 	beq.w	8002bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	4a5e      	ldr	r2, [pc, #376]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab2:	4a5a      	ldr	r2, [pc, #360]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x242>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4d      	ldr	r2, [pc, #308]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00c      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00a      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e008      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e004      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_GPIO_Init+0x244>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4093      	lsls	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6e:	4a32      	ldr	r2, [pc, #200]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b74:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b98:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae78 	bne.w	80028f8 <HAL_GPIO_Init+0x10>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000800 	.word	0x48000800
 8002c28:	48000c00 	.word	0x48000c00
 8002c2c:	48001000 	.word	0x48001000
 8002c30:	48001400 	.word	0x48001400
 8002c34:	48001800 	.word	0x48001800
 8002c38:	40010400 	.word	0x40010400

08002c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e081      	b.n	8002d52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fee4 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e006      	b.n	8002cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d104      	bne.n	8002cd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	ea42 0103 	orr.w	r1, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69d9      	ldr	r1, [r3, #28]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f040 80da 	bne.w	8002f32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x30>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0d3      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d94:	f7ff facc 	bl	8002330 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2319      	movs	r3, #25
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9e6 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0be      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2221      	movs	r2, #33	; 0x21
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	893a      	ldrh	r2, [r7, #8]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2bff      	cmp	r3, #255	; 0xff
 8002de6:	d90e      	bls.n	8002e06 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fb48 	bl	8003494 <I2C_TransferConfig>
 8002e04:	e06c      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb37 	bl	8003494 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e26:	e05b      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f9e3 	bl	80031f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e07b      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d034      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x184>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d130      	bne.n	8002ee0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f975 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04d      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2bff      	cmp	r3, #255	; 0xff
 8002ea0:	d90e      	bls.n	8002ec0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22ff      	movs	r2, #255	; 0xff
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 faeb 	bl	8003494 <I2C_TransferConfig>
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	8979      	ldrh	r1, [r7, #10]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fada 	bl	8003494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d19e      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9c2 	bl	8003278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01a      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	80002000 	.word	0x80002000
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
 8002f54:	4613      	mov	r3, r2
 8002f56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	f040 80db 	bne.w	800311c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_Master_Receive+0x30>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0d4      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f7c:	f7ff f9d8 	bl	8002330 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2319      	movs	r3, #25
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8f2 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0bf      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2222      	movs	r2, #34	; 0x22
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	893a      	ldrh	r2, [r7, #8]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2bff      	cmp	r3, #255	; 0xff
 8002fce:	d90e      	bls.n	8002fee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	22ff      	movs	r2, #255	; 0xff
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_I2C_Master_Receive+0x1e4>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa54 	bl	8003494 <I2C_TransferConfig>
 8002fec:	e06d      	b.n	80030ca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	8979      	ldrh	r1, [r7, #10]
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_I2C_Master_Receive+0x1e4>)
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fa43 	bl	8003494 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800300e:	e05c      	b.n	80030ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6a39      	ldr	r1, [r7, #32]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f96b 	bl	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e07c      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d034      	beq.n	80030ca <HAL_I2C_Master_Receive+0x186>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d130      	bne.n	80030ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2200      	movs	r2, #0
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f880 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e04d      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2bff      	cmp	r3, #255	; 0xff
 800308a:	d90e      	bls.n	80030aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	b2da      	uxtb	r2, r3
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f9f6 	bl	8003494 <I2C_TransferConfig>
 80030a8:	e00f      	b.n	80030ca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f9e5 	bl	8003494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19d      	bne.n	8003010 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	6a39      	ldr	r1, [r7, #32]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f8cd 	bl	8003278 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e01a      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_I2C_Master_Receive+0x1e8>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	80002400 	.word	0x80002400
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d103      	bne.n	800314e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d007      	beq.n	800316c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	619a      	str	r2, [r3, #24]
  }
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	e022      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d01e      	beq.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7ff f8cd 	bl	8002330 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d113      	bne.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e00f      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	429a      	cmp	r2, r3
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d0cd      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003204:	e02c      	b.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8dc 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e02a      	b.n	8003270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d01e      	beq.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7ff f885 	bl	8002330 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d113      	bne.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d1cb      	bne.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	e028      	b.n	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f89c 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e026      	b.n	80032e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7ff f849 	bl	8002330 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d1cf      	bne.n	8003286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032fc:	e055      	b.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f860 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e053      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d129      	bne.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d105      	bne.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e03f      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e022      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe ffdc 	bl	8002330 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d1a2      	bne.n	80032fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	fe00e800 	.word	0xfe00e800

080033c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d151      	bne.n	8003486 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e2:	e022      	b.n	800342a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d01e      	beq.n	800342a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe ffa0 	bl	8002330 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_IsAcknowledgeFailed+0x3a>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d113      	bne.n	800342a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e02e      	b.n	8003488 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d1d5      	bne.n	80033e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2220      	movs	r2, #32
 8003446:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe71 	bl	8003130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <I2C_IsAcknowledgeFailed+0xc8>)
 800345a:	400b      	ands	r3, r1
 800345c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f043 0204 	orr.w	r2, r3, #4
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	fe00e800 	.word	0xfe00e800

08003494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	4613      	mov	r3, r2
 80034a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	0d5b      	lsrs	r3, r3, #21
 80034b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <I2C_TransferConfig+0x58>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	43db      	mvns	r3, r3
 80034ba:	ea02 0103 	and.w	r1, r2, r3
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c4:	7a7b      	ldrb	r3, [r7, #9]
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	03ff63ff 	.word	0x03ff63ff

080034f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	d138      	bne.n	8003578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003510:	2302      	movs	r3, #2
 8003512:	e032      	b.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	d139      	bne.n	8003610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e033      	b.n	8003612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_PWREx_GetVoltageRange+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40007000 	.word	0x40007000

0800363c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364a:	d130      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d038      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2232      	movs	r2, #50	; 0x32
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	3301      	adds	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003680:	e002      	b.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3b01      	subs	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d102      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f2      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d110      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d007      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000
 80036e0:	20000000 	.word	0x20000000
 80036e4:	431bde83 	.word	0x431bde83

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e3d4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fa:	4ba1      	ldr	r3, [pc, #644]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003704:	4b9e      	ldr	r3, [pc, #632]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80e4 	beq.w	80038e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_RCC_OscConfig+0x4a>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	f040 808b 	bne.w	8003840 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 8087 	bne.w	8003840 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003732:	4b93      	ldr	r3, [pc, #588]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e3ac      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_RCC_OscConfig+0x7c>
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003762:	e005      	b.n	8003770 <HAL_RCC_OscConfig+0x88>
 8003764:	4b86      	ldr	r3, [pc, #536]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	4293      	cmp	r3, r2
 8003772:	d223      	bcs.n	80037bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fd41 	bl	8004200 <RCC_SetFlashLatencyFromMSIRange>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e38d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003788:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800378e:	f043 0308 	orr.w	r3, r3, #8
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4977      	ldr	r1, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	4972      	ldr	r1, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
 80037ba:	e025      	b.n	8003808 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6f      	ldr	r2, [pc, #444]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	496a      	ldr	r1, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037da:	4b69      	ldr	r3, [pc, #420]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	4965      	ldr	r1, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fd01 	bl	8004200 <RCC_SetFlashLatencyFromMSIRange>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e34d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003808:	f000 fc36 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	495a      	ldr	r1, [pc, #360]	; (8003984 <HAL_RCC_OscConfig+0x29c>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x2a0>)
 8003826:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_RCC_OscConfig+0x2a4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fd2f 	bl	8002290 <HAL_InitTick>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d052      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	e331      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003848:	4b4d      	ldr	r3, [pc, #308]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4c      	ldr	r2, [pc, #304]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003854:	f7fe fd6c 	bl	8002330 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800385c:	f7fe fd68 	bl	8002330 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e31a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a40      	ldr	r2, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	493b      	ldr	r1, [pc, #236]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	e01a      	b.n	80038e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fd39 	bl	8002330 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c2:	f7fe fd35 	bl	8002330 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e2e7      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1da>
 80038e0:	e000      	b.n	80038e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d074      	beq.n	80039da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x21a>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d10e      	bne.n	800391a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d064      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d160      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e2c4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x24a>
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e01d      	b.n	800396e <HAL_RCC_OscConfig+0x286>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x26e>
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x286>
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a06      	ldr	r2, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x298>)
 8003968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe fcdb 	bl	8002330 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	08008ae0 	.word	0x08008ae0
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fcce 	bl	8002330 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e280      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4baf      	ldr	r3, [pc, #700]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x2a8>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fcbe 	bl	8002330 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fcba 	bl	8002330 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e26c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4ba5      	ldr	r3, [pc, #660]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d0>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d060      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x310>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d119      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d116      	bne.n	8003a26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	4b99      	ldr	r3, [pc, #612]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x328>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e249      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b93      	ldr	r3, [pc, #588]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	4990      	ldr	r1, [pc, #576]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	e040      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2e:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a8b      	ldr	r2, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fc79 	bl	8002330 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fc75 	bl	8002330 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e227      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	4b82      	ldr	r3, [pc, #520]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	497c      	ldr	r1, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e018      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b7a      	ldr	r3, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe fc55 	bl	8002330 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fc51 	bl	8002330 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e203      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a9c:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	4a67      	ldr	r2, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fc30 	bl	8002330 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fc2c 	bl	8002330 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1de      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x3ec>
 8003af4:	e01b      	b.n	8003b2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af6:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fe fc13 	bl	8002330 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7fe fc0f 	bl	8002330 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1c1      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ef      	bne.n	8003b0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a6 	beq.w	8003c88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b40:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	4a43      	ldr	r2, [pc, #268]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6593      	str	r3, [r2, #88]	; 0x58
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d118      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fbd6 	bl	8002330 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fe fbd2 	bl	8002330 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e184      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCC_OscConfig+0x57c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4d8>
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbe:	e024      	b.n	8003c0a <HAL_RCC_OscConfig+0x522>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d110      	bne.n	8003bea <HAL_RCC_OscConfig+0x502>
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be8:	e00f      	b.n	8003c0a <HAL_RCC_OscConfig+0x522>
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fe fb8d 	bl	8002330 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fe fb89 	bl	8002330 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e139      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_OscConfig+0x578>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ed      	beq.n	8003c1a <HAL_RCC_OscConfig+0x532>
 8003c3e:	e01a      	b.n	8003c76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fe fb76 	bl	8002330 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c46:	e00f      	b.n	8003c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe fb72 	bl	8002330 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d906      	bls.n	8003c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e122      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c68:	4b90      	ldr	r3, [pc, #576]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e8      	bne.n	8003c48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b8b      	ldr	r3, [pc, #556]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a8a      	ldr	r2, [pc, #552]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8108 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	f040 80d0 	bne.w	8003e3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c9c:	4b83      	ldr	r3, [pc, #524]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d130      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d127      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cdc:	2a07      	cmp	r2, #7
 8003cde:	bf14      	ite	ne
 8003ce0:	2201      	movne	r2, #1
 8003ce2:	2200      	moveq	r2, #0
 8003ce4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d113      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d06e      	beq.n	8003df0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d069      	beq.n	8003dec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d18:	4b64      	ldr	r3, [pc, #400]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b7      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d34:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5c      	ldr	r2, [pc, #368]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d40:	f7fe faf6 	bl	8002330 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe faf2 	bl	8002330 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0a4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5a:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_RCC_OscConfig+0x7c8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d76:	3a01      	subs	r2, #1
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d80:	0212      	lsls	r2, r2, #8
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d88:	0852      	lsrs	r2, r2, #1
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0552      	lsls	r2, r2, #21
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d94:	0852      	lsrs	r2, r2, #1
 8003d96:	3a01      	subs	r2, #1
 8003d98:	0652      	lsls	r2, r2, #25
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da0:	0912      	lsrs	r2, r2, #4
 8003da2:	0452      	lsls	r2, r2, #17
 8003da4:	430a      	orrs	r2, r1
 8003da6:	4941      	ldr	r1, [pc, #260]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dac:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3e      	ldr	r2, [pc, #248]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db8:	4b3c      	ldr	r3, [pc, #240]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dc4:	f7fe fab4 	bl	8002330 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe fab0 	bl	8002330 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e062      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dea:	e05a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e059      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d152      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e14:	f7fe fa8c 	bl	8002330 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fe fa88 	bl	8002330 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e03a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x734>
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d02d      	beq.n	8003e9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e60:	f023 0303 	bic.w	r3, r3, #3
 8003e64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fa5b 	bl	8002330 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fa57 	bl	8002330 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_OscConfig+0x7c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x796>
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	f99d808c 	.word	0xf99d808c

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0c8      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b63      	ldr	r3, [pc, #396]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0207 	bic.w	r2, r3, #7
 8003ede:	4961      	ldr	r1, [pc, #388]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b0      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d04c      	beq.n	8003f9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0c:	4b56      	ldr	r3, [pc, #344]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d121      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09e      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f24:	4b50      	ldr	r3, [pc, #320]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e092      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e086      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e07e      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 0203 	bic.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	493f      	ldr	r1, [pc, #252]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fe f9df 	bl	8002330 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f76:	f7fe f9db 	bl	8002330 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e066      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 020c 	and.w	r2, r3, #12
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d1eb      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	492c      	ldr	r1, [pc, #176]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_ClockConfig+0x1b0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e036      	b.n	800405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4918      	ldr	r1, [pc, #96]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4910      	ldr	r1, [pc, #64]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800402a:	f000 f825 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490c      	ldr	r1, [pc, #48]	; (800406c <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe f91e 	bl	8002290 <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	72fb      	strb	r3, [r7, #11]

  return status;
 8004058:	7afb      	ldrb	r3, [r7, #11]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000
 8004068:	40021000 	.word	0x40021000
 800406c:	08008ae0 	.word	0x08008ae0
 8004070:	20000000 	.word	0x20000000
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x34>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d121      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d11e      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040ac:	4b34      	ldr	r3, [pc, #208]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e005      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10d      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d102      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_GetSysClockFreq+0x110>)
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e004      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040fc:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_RCC_GetSysClockFreq+0x114>)
 80040fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d134      	bne.n	8004170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d003      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0xa6>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d003      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0xac>
 800411c:	e005      	b.n	800412a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_GetSysClockFreq+0x110>)
 8004120:	617b      	str	r3, [r7, #20]
      break;
 8004122:	e005      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_GetSysClockFreq+0x114>)
 8004126:	617b      	str	r3, [r7, #20]
      break;
 8004128:	e002      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	617b      	str	r3, [r7, #20]
      break;
 800412e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	3301      	adds	r3, #1
 800413c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	fb02 f203 	mul.w	r2, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	0e5b      	lsrs	r3, r3, #25
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	3301      	adds	r3, #1
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004170:	69bb      	ldr	r3, [r7, #24]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	08008af8 	.word	0x08008af8
 8004188:	00f42400 	.word	0x00f42400
 800418c:	007a1200 	.word	0x007a1200

08004190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000000 	.word	0x20000000

080041a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041ac:	f7ff fff0 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4904      	ldr	r1, [pc, #16]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	08008af0 	.word	0x08008af0

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041d8:	f7ff ffda 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0adb      	lsrs	r3, r3, #11
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4904      	ldr	r1, [pc, #16]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08008af0 	.word	0x08008af0

08004200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004218:	f7ff fa02 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 800421c:	6178      	str	r0, [r7, #20]
 800421e:	e014      	b.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422a:	6593      	str	r3, [r2, #88]	; 0x58
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004238:	f7ff f9f2 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 800423c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d10b      	bne.n	800426a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d919      	bls.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2ba0      	cmp	r3, #160	; 0xa0
 800425c:	d902      	bls.n	8004264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800425e:	2302      	movs	r3, #2
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e013      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004264:	2301      	movs	r3, #1
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e010      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d902      	bls.n	8004276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004270:	2303      	movs	r3, #3
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	e00a      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d102      	bne.n	8004282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800427c:	2302      	movs	r3, #2
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e004      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d101      	bne.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004288:	2301      	movs	r3, #1
 800428a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 0207 	bic.w	r2, r3, #7
 8004294:	4909      	ldr	r1, [pc, #36]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d001      	beq.n	80042ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40022000 	.word	0x40022000

080042c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c8:	2300      	movs	r3, #0
 80042ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042cc:	2300      	movs	r3, #0
 80042ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d041      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e4:	d02a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ea:	d824      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f6:	d81e      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004300:	d010      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004302:	e018      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004304:	4b86      	ldr	r3, [pc, #536]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a85      	ldr	r2, [pc, #532]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004310:	e015      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fabb 	bl	8004894 <RCCEx_PLLSAI1_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004322:	e00c      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3320      	adds	r3, #32
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fba6 	bl	8004a7c <RCCEx_PLLSAI2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	74fb      	strb	r3, [r7, #19]
      break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004344:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004352:	4973      	ldr	r1, [pc, #460]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d041      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004370:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004374:	d02a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800437a:	d824      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800437c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004380:	d008      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004386:	d81e      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800438c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004390:	d010      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004392:	e018      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004394:	4b62      	ldr	r3, [pc, #392]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a61      	ldr	r2, [pc, #388]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a0:	e015      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fa73 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b2:	e00c      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3320      	adds	r3, #32
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb5e 	bl	8004a7c <RCCEx_PLLSAI2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c4:	e003      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	74fb      	strb	r3, [r7, #19]
      break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043d4:	4b52      	ldr	r3, [pc, #328]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e2:	494f      	ldr	r1, [pc, #316]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ea:	e001      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80a0 	beq.w	800453e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004418:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	4a40      	ldr	r2, [pc, #256]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004422:	6593      	str	r3, [r2, #88]	; 0x58
 8004424:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004430:	2301      	movs	r3, #1
 8004432:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3a      	ldr	r2, [pc, #232]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004440:	f7fd ff76 	bl	8002330 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004446:	e009      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004448:	f7fd ff72 	bl	8002330 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	74fb      	strb	r3, [r7, #19]
        break;
 800445a:	e005      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d15c      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800446e:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01f      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	d019      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd ff31 	bl	8002330 <HAL_GetTick>
 80044ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d0:	e00b      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fd ff2d 	bl	8002330 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d902      	bls.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	74fb      	strb	r3, [r7, #19]
            break;
 80044e8:	e006      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ec      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450e:	4904      	ldr	r1, [pc, #16]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004516:	e009      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	74bb      	strb	r3, [r7, #18]
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452c:	7c7b      	ldrb	r3, [r7, #17]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4b9e      	ldr	r3, [pc, #632]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	4a9d      	ldr	r2, [pc, #628]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454a:	4b98      	ldr	r3, [pc, #608]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f023 0203 	bic.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	4994      	ldr	r1, [pc, #592]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800456c:	4b8f      	ldr	r3, [pc, #572]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 020c 	bic.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	498c      	ldr	r1, [pc, #560]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800458e:	4b87      	ldr	r3, [pc, #540]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	4983      	ldr	r1, [pc, #524]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b0:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	497b      	ldr	r1, [pc, #492]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	4972      	ldr	r1, [pc, #456]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f4:	4b6d      	ldr	r3, [pc, #436]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	496a      	ldr	r1, [pc, #424]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	4961      	ldr	r1, [pc, #388]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004638:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004646:	4959      	ldr	r1, [pc, #356]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	4950      	ldr	r1, [pc, #320]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467c:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	4948      	ldr	r1, [pc, #288]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469e:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	493f      	ldr	r1, [pc, #252]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d028      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c0:	4b3a      	ldr	r3, [pc, #232]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ce:	4937      	ldr	r1, [pc, #220]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046de:	d106      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a31      	ldr	r2, [pc, #196]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
 80046ec:	e011      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f6:	d10c      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f8c8 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d028      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800471e:	4b23      	ldr	r3, [pc, #140]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	491f      	ldr	r1, [pc, #124]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d106      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004748:	60d3      	str	r3, [r2, #12]
 800474a:	e011      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f899 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02b      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	4908      	ldr	r1, [pc, #32]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479a:	d109      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a02      	ldr	r2, [pc, #8]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a6:	60d3      	str	r3, [r2, #12]
 80047a8:	e014      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	2101      	movs	r1, #1
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f867 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d02f      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ee:	4928      	ldr	r1, [pc, #160]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047fe:	d10d      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f844 	bl	8004894 <RCCEx_PLLSAI1_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d014      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	74bb      	strb	r3, [r7, #18]
 800481a:	e011      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3320      	adds	r3, #32
 800482a:	2102      	movs	r1, #2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f925 	bl	8004a7c <RCCEx_PLLSAI2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485a:	490d      	ldr	r1, [pc, #52]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004886:	7cbb      	ldrb	r3, [r7, #18]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000

08004894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a2:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ae:	4b72      	ldr	r3, [pc, #456]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0203 	and.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
       ||
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048c6:	4b6c      	ldr	r3, [pc, #432]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
       ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d047      	beq.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
 80048de:	e044      	b.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d018      	beq.n	800491a <RCCEx_PLLSAI1_Config+0x86>
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d825      	bhi.n	8004938 <RCCEx_PLLSAI1_Config+0xa4>
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d002      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x62>
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d009      	beq.n	8004908 <RCCEx_PLLSAI1_Config+0x74>
 80048f4:	e020      	b.n	8004938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048f6:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11d      	bne.n	800493e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004906:	e01a      	b.n	800493e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d116      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e013      	b.n	8004942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491a:	4b57      	ldr	r3, [pc, #348]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004926:	4b54      	ldr	r3, [pc, #336]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004936:	e006      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e004      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
    }

    if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800494e:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	430b      	orrs	r3, r1
 8004964:	4944      	ldr	r1, [pc, #272]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d17d      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004970:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a40      	ldr	r2, [pc, #256]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fd fcd8 	bl	8002330 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004984:	f7fd fcd4 	bl	8002330 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
        break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ef      	bne.n	8004984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d160      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	0211      	lsls	r1, r2, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	0912      	lsrs	r2, r2, #4
 80049c8:	0452      	lsls	r2, r2, #17
 80049ca:	430a      	orrs	r2, r1
 80049cc:	492a      	ldr	r1, [pc, #168]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	610b      	str	r3, [r1, #16]
 80049d2:	e027      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d112      	bne.n	8004a00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	0211      	lsls	r1, r2, #8
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6912      	ldr	r2, [r2, #16]
 80049f0:	0852      	lsrs	r2, r2, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	0552      	lsls	r2, r2, #21
 80049f6:	430a      	orrs	r2, r1
 80049f8:	491f      	ldr	r1, [pc, #124]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	610b      	str	r3, [r1, #16]
 80049fe:	e011      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a00:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6892      	ldr	r2, [r2, #8]
 8004a10:	0211      	lsls	r1, r2, #8
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6952      	ldr	r2, [r2, #20]
 8004a16:	0852      	lsrs	r2, r2, #1
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	0652      	lsls	r2, r2, #25
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	4916      	ldr	r1, [pc, #88]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd fc7e 	bl	8002330 <HAL_GetTick>
 8004a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a36:	e009      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a38:	f7fd fc7a 	bl	8002330 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d902      	bls.n	8004a4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4a:	e005      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ef      	beq.n	8004a38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	4904      	ldr	r1, [pc, #16]	; (8004a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000

08004a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a96:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10d      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aae:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
       ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d047      	beq.n	8004b52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e044      	b.n	8004b52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d018      	beq.n	8004b02 <RCCEx_PLLSAI2_Config+0x86>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d825      	bhi.n	8004b20 <RCCEx_PLLSAI2_Config+0xa4>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <RCCEx_PLLSAI2_Config+0x62>
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d009      	beq.n	8004af0 <RCCEx_PLLSAI2_Config+0x74>
 8004adc:	e020      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ade:	4b55      	ldr	r3, [pc, #340]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aee:	e01a      	b.n	8004b26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af0:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d116      	bne.n	8004b2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b00:	e013      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b02:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0e:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e004      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b36:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	4939      	ldr	r1, [pc, #228]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d167      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fd fbe4 	bl	8002330 <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b6a:	e009      	b.n	8004b80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b6c:	f7fd fbe0 	bl	8002330 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b7e:	e005      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ef      	bne.n	8004b6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d14a      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d111      	bne.n	8004bbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	0912      	lsrs	r2, r2, #4
 8004bb0:	0452      	lsls	r2, r2, #17
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	491f      	ldr	r1, [pc, #124]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	614b      	str	r3, [r1, #20]
 8004bba:	e011      	b.n	8004be0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6892      	ldr	r2, [r2, #8]
 8004bcc:	0211      	lsls	r1, r2, #8
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6912      	ldr	r2, [r2, #16]
 8004bd2:	0852      	lsrs	r2, r2, #1
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	0652      	lsls	r2, r2, #25
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	4916      	ldr	r1, [pc, #88]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fba0 	bl	8002330 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf4:	f7fd fb9c 	bl	8002330 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
          break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ef      	beq.n	8004bf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000

08004c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e040      	b.n	8004ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd fa26 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	; 0x24
 8004c64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb26 	bl	80052c8 <UART_SetConfig>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fda4 	bl	80057dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fe2b 	bl	8005920 <UART_CheckIdleState>
 8004cca:	4603      	mov	r3, r0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	f040 8082 	bne.w	8004df2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_UART_Transmit+0x26>
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07a      	b.n	8004df4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x38>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e073      	b.n	8004df4 <HAL_UART_Transmit+0x120>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2221      	movs	r2, #33	; 0x21
 8004d20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d22:	f7fd fb05 	bl	8002330 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x80>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d64:	e02d      	b.n	8004dc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fe1e 	bl	80059b2 <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e039      	b.n	8004df4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d92:	b292      	uxth	r2, r2
 8004d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e008      	b.n	8004db0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	b292      	uxth	r2, r2
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3301      	adds	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1cb      	bne.n	8004d66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2140      	movs	r1, #64	; 0x40
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fdea 	bl	80059b2 <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e005      	b.n	8004df4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d131      	bne.n	8004e76 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_UART_Receive_IT+0x22>
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e02a      	b.n	8004e78 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Receive_IT+0x34>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e023      	b.n	8004e78 <HAL_UART_Receive_IT+0x7c>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0f      	ldr	r2, [pc, #60]	; (8004e80 <HAL_UART_Receive_IT+0x84>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e64:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fe1d 	bl	8005aac <UART_Start_Receive_IT>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e000      	b.n	8004e78 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40008000 	.word	0x40008000

08004e84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00e      	beq.n	8004edc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 81ce 	beq.w	800526e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
      }
      return;
 8004eda:	e1c8      	b.n	800526e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80e3 	beq.w	80050aa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4ba6      	ldr	r3, [pc, #664]	; (800518c <HAL_UART_IRQHandler+0x308>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80d8 	beq.w	80050aa <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_UART_IRQHandler+0xa2>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2201      	movs	r2, #1
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	f043 0201 	orr.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_UART_IRQHandler+0xce>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f48:	f043 0204 	orr.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_UART_IRQHandler+0xfa>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f74:	f043 0202 	orr.w	r2, r3, #2
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x15e>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8142 	beq.w	8005272 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005018:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d004      	beq.n	8005032 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d031      	beq.n	8005096 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fdc2 	bl	8005bbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d123      	bne.n	800508e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	2b00      	cmp	r3, #0
 800505c:	d013      	beq.n	8005086 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a4b      	ldr	r2, [pc, #300]	; (8005190 <HAL_UART_IRQHandler+0x30c>)
 8005064:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fbfb 	bl	8002866 <HAL_DMA_Abort_IT>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d017      	beq.n	80050a6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e00f      	b.n	80050a6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f908 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	e00b      	b.n	80050a6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f904 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	e007      	b.n	80050a6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f900 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80050a4:	e0e5      	b.n	8005272 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a6:	bf00      	nop
    return;
 80050a8:	e0e3      	b.n	8005272 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	f040 80a9 	bne.w	8005206 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80a3 	beq.w	8005206 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 809d 	beq.w	8005206 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2210      	movs	r2, #16
 80050d2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d158      	bne.n	8005194 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80c1 	beq.w	8005276 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050fa:	893a      	ldrh	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	f080 80ba 	bcs.w	8005276 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d12a      	bne.n	8005170 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0210 	bic.w	r2, r2, #16
 8005164:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fb3d 	bl	80027ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800517c:	b29b      	uxth	r3, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f893 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800518a:	e074      	b.n	8005276 <HAL_UART_IRQHandler+0x3f2>
 800518c:	04000120 	.word	0x04000120
 8005190:	08005c1b 	.word	0x08005c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80051b2:	897b      	ldrh	r3, [r7, #10]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d060      	beq.n	800527a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0210 	bic.w	r2, r2, #16
 80051f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f856 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005204:	e039      	b.n	800527a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_UART_IRQHandler+0x3a8>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005222:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fdff 	bl	8005e28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800522a:	e029      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01a      	beq.n	800527e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
    }
    return;
 8005250:	e015      	b.n	800527e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d011      	beq.n	8005280 <HAL_UART_IRQHandler+0x3fc>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fced 	bl	8005c46 <UART_EndTransmit_IT>
    return;
 800526c:	e008      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
      return;
 800526e:	bf00      	nop
 8005270:	e006      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005272:	bf00      	nop
 8005274:	e004      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
      return;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_UART_IRQHandler+0x3fc>
    return;
 800527e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4bad      	ldr	r3, [pc, #692]	; (80055a8 <UART_SetConfig+0x2e0>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	69f9      	ldr	r1, [r7, #28]
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4aa2      	ldr	r2, [pc, #648]	; (80055ac <UART_SetConfig+0x2e4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	4313      	orrs	r3, r2
 800532e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	430a      	orrs	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a99      	ldr	r2, [pc, #612]	; (80055b0 <UART_SetConfig+0x2e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d121      	bne.n	8005392 <UART_SetConfig+0xca>
 800534e:	4b99      	ldr	r3, [pc, #612]	; (80055b4 <UART_SetConfig+0x2ec>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b03      	cmp	r3, #3
 800535a:	d817      	bhi.n	800538c <UART_SetConfig+0xc4>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x9c>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005375 	.word	0x08005375
 8005368:	08005381 	.word	0x08005381
 800536c:	0800537b 	.word	0x0800537b
 8005370:	08005387 	.word	0x08005387
 8005374:	2301      	movs	r3, #1
 8005376:	76fb      	strb	r3, [r7, #27]
 8005378:	e0e7      	b.n	800554a <UART_SetConfig+0x282>
 800537a:	2302      	movs	r3, #2
 800537c:	76fb      	strb	r3, [r7, #27]
 800537e:	e0e4      	b.n	800554a <UART_SetConfig+0x282>
 8005380:	2304      	movs	r3, #4
 8005382:	76fb      	strb	r3, [r7, #27]
 8005384:	e0e1      	b.n	800554a <UART_SetConfig+0x282>
 8005386:	2308      	movs	r3, #8
 8005388:	76fb      	strb	r3, [r7, #27]
 800538a:	e0de      	b.n	800554a <UART_SetConfig+0x282>
 800538c:	2310      	movs	r3, #16
 800538e:	76fb      	strb	r3, [r7, #27]
 8005390:	e0db      	b.n	800554a <UART_SetConfig+0x282>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a88      	ldr	r2, [pc, #544]	; (80055b8 <UART_SetConfig+0x2f0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d132      	bne.n	8005402 <UART_SetConfig+0x13a>
 800539c:	4b85      	ldr	r3, [pc, #532]	; (80055b4 <UART_SetConfig+0x2ec>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d828      	bhi.n	80053fc <UART_SetConfig+0x134>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xe8>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053fd 	.word	0x080053fd
 80053b8:	080053fd 	.word	0x080053fd
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053f1 	.word	0x080053f1
 80053c4:	080053fd 	.word	0x080053fd
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	080053eb 	.word	0x080053eb
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	080053f7 	.word	0x080053f7
 80053e4:	2300      	movs	r3, #0
 80053e6:	76fb      	strb	r3, [r7, #27]
 80053e8:	e0af      	b.n	800554a <UART_SetConfig+0x282>
 80053ea:	2302      	movs	r3, #2
 80053ec:	76fb      	strb	r3, [r7, #27]
 80053ee:	e0ac      	b.n	800554a <UART_SetConfig+0x282>
 80053f0:	2304      	movs	r3, #4
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e0a9      	b.n	800554a <UART_SetConfig+0x282>
 80053f6:	2308      	movs	r3, #8
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e0a6      	b.n	800554a <UART_SetConfig+0x282>
 80053fc:	2310      	movs	r3, #16
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e0a3      	b.n	800554a <UART_SetConfig+0x282>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6d      	ldr	r2, [pc, #436]	; (80055bc <UART_SetConfig+0x2f4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d120      	bne.n	800544e <UART_SetConfig+0x186>
 800540c:	4b69      	ldr	r3, [pc, #420]	; (80055b4 <UART_SetConfig+0x2ec>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005416:	2b30      	cmp	r3, #48	; 0x30
 8005418:	d013      	beq.n	8005442 <UART_SetConfig+0x17a>
 800541a:	2b30      	cmp	r3, #48	; 0x30
 800541c:	d814      	bhi.n	8005448 <UART_SetConfig+0x180>
 800541e:	2b20      	cmp	r3, #32
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x16e>
 8005422:	2b20      	cmp	r3, #32
 8005424:	d810      	bhi.n	8005448 <UART_SetConfig+0x180>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x168>
 800542a:	2b10      	cmp	r3, #16
 800542c:	d006      	beq.n	800543c <UART_SetConfig+0x174>
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x180>
 8005430:	2300      	movs	r3, #0
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e089      	b.n	800554a <UART_SetConfig+0x282>
 8005436:	2302      	movs	r3, #2
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e086      	b.n	800554a <UART_SetConfig+0x282>
 800543c:	2304      	movs	r3, #4
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e083      	b.n	800554a <UART_SetConfig+0x282>
 8005442:	2308      	movs	r3, #8
 8005444:	76fb      	strb	r3, [r7, #27]
 8005446:	e080      	b.n	800554a <UART_SetConfig+0x282>
 8005448:	2310      	movs	r3, #16
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e07d      	b.n	800554a <UART_SetConfig+0x282>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5b      	ldr	r2, [pc, #364]	; (80055c0 <UART_SetConfig+0x2f8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d120      	bne.n	800549a <UART_SetConfig+0x1d2>
 8005458:	4b56      	ldr	r3, [pc, #344]	; (80055b4 <UART_SetConfig+0x2ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005462:	2bc0      	cmp	r3, #192	; 0xc0
 8005464:	d013      	beq.n	800548e <UART_SetConfig+0x1c6>
 8005466:	2bc0      	cmp	r3, #192	; 0xc0
 8005468:	d814      	bhi.n	8005494 <UART_SetConfig+0x1cc>
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d009      	beq.n	8005482 <UART_SetConfig+0x1ba>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d810      	bhi.n	8005494 <UART_SetConfig+0x1cc>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <UART_SetConfig+0x1b4>
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d006      	beq.n	8005488 <UART_SetConfig+0x1c0>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x1cc>
 800547c:	2300      	movs	r3, #0
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e063      	b.n	800554a <UART_SetConfig+0x282>
 8005482:	2302      	movs	r3, #2
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e060      	b.n	800554a <UART_SetConfig+0x282>
 8005488:	2304      	movs	r3, #4
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	e05d      	b.n	800554a <UART_SetConfig+0x282>
 800548e:	2308      	movs	r3, #8
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e05a      	b.n	800554a <UART_SetConfig+0x282>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e057      	b.n	800554a <UART_SetConfig+0x282>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a49      	ldr	r2, [pc, #292]	; (80055c4 <UART_SetConfig+0x2fc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d125      	bne.n	80054f0 <UART_SetConfig+0x228>
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <UART_SetConfig+0x2ec>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b2:	d017      	beq.n	80054e4 <UART_SetConfig+0x21c>
 80054b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b8:	d817      	bhi.n	80054ea <UART_SetConfig+0x222>
 80054ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054be:	d00b      	beq.n	80054d8 <UART_SetConfig+0x210>
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d811      	bhi.n	80054ea <UART_SetConfig+0x222>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <UART_SetConfig+0x20a>
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ce:	d006      	beq.n	80054de <UART_SetConfig+0x216>
 80054d0:	e00b      	b.n	80054ea <UART_SetConfig+0x222>
 80054d2:	2300      	movs	r3, #0
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e038      	b.n	800554a <UART_SetConfig+0x282>
 80054d8:	2302      	movs	r3, #2
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e035      	b.n	800554a <UART_SetConfig+0x282>
 80054de:	2304      	movs	r3, #4
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e032      	b.n	800554a <UART_SetConfig+0x282>
 80054e4:	2308      	movs	r3, #8
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	e02f      	b.n	800554a <UART_SetConfig+0x282>
 80054ea:	2310      	movs	r3, #16
 80054ec:	76fb      	strb	r3, [r7, #27]
 80054ee:	e02c      	b.n	800554a <UART_SetConfig+0x282>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2d      	ldr	r2, [pc, #180]	; (80055ac <UART_SetConfig+0x2e4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d125      	bne.n	8005546 <UART_SetConfig+0x27e>
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <UART_SetConfig+0x2ec>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005508:	d017      	beq.n	800553a <UART_SetConfig+0x272>
 800550a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550e:	d817      	bhi.n	8005540 <UART_SetConfig+0x278>
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005514:	d00b      	beq.n	800552e <UART_SetConfig+0x266>
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d811      	bhi.n	8005540 <UART_SetConfig+0x278>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <UART_SetConfig+0x260>
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d006      	beq.n	8005534 <UART_SetConfig+0x26c>
 8005526:	e00b      	b.n	8005540 <UART_SetConfig+0x278>
 8005528:	2300      	movs	r3, #0
 800552a:	76fb      	strb	r3, [r7, #27]
 800552c:	e00d      	b.n	800554a <UART_SetConfig+0x282>
 800552e:	2302      	movs	r3, #2
 8005530:	76fb      	strb	r3, [r7, #27]
 8005532:	e00a      	b.n	800554a <UART_SetConfig+0x282>
 8005534:	2304      	movs	r3, #4
 8005536:	76fb      	strb	r3, [r7, #27]
 8005538:	e007      	b.n	800554a <UART_SetConfig+0x282>
 800553a:	2308      	movs	r3, #8
 800553c:	76fb      	strb	r3, [r7, #27]
 800553e:	e004      	b.n	800554a <UART_SetConfig+0x282>
 8005540:	2310      	movs	r3, #16
 8005542:	76fb      	strb	r3, [r7, #27]
 8005544:	e001      	b.n	800554a <UART_SetConfig+0x282>
 8005546:	2310      	movs	r3, #16
 8005548:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a17      	ldr	r2, [pc, #92]	; (80055ac <UART_SetConfig+0x2e4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	f040 8087 	bne.w	8005664 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005556:	7efb      	ldrb	r3, [r7, #27]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d837      	bhi.n	80055cc <UART_SetConfig+0x304>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x29c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	080055cd 	.word	0x080055cd
 800556c:	08005591 	.word	0x08005591
 8005570:	080055cd 	.word	0x080055cd
 8005574:	08005597 	.word	0x08005597
 8005578:	080055cd 	.word	0x080055cd
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055cd 	.word	0x080055cd
 8005584:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fe0e 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 800558c:	6178      	str	r0, [r7, #20]
        break;
 800558e:	e022      	b.n	80055d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <UART_SetConfig+0x300>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e01f      	b.n	80055d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe fd6f 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 800559a:	6178      	str	r0, [r7, #20]
        break;
 800559c:	e01b      	b.n	80055d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e017      	b.n	80055d6 <UART_SetConfig+0x30e>
 80055a6:	bf00      	nop
 80055a8:	efff69f3 	.word	0xefff69f3
 80055ac:	40008000 	.word	0x40008000
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	40005000 	.word	0x40005000
 80055c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	76bb      	strb	r3, [r7, #26]
        break;
 80055d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80f1 	beq.w	80057c0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d305      	bcc.n	80055fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d902      	bls.n	8005600 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	76bb      	strb	r3, [r7, #26]
 80055fe:	e0df      	b.n	80057c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	4618      	mov	r0, r3
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	020b      	lsls	r3, r1, #8
 8005612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005616:	0202      	lsls	r2, r0, #8
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	6849      	ldr	r1, [r1, #4]
 800561c:	0849      	lsrs	r1, r1, #1
 800561e:	4608      	mov	r0, r1
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	1814      	adds	r4, r2, r0
 8005626:	eb43 0501 	adc.w	r5, r3, r1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	4620      	mov	r0, r4
 8005636:	4629      	mov	r1, r5
 8005638:	f7fb fb06 	bl	8000c48 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4613      	mov	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564a:	d308      	bcc.n	800565e <UART_SetConfig+0x396>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d204      	bcs.n	800565e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	60da      	str	r2, [r3, #12]
 800565c:	e0b0      	b.n	80057c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	76bb      	strb	r3, [r7, #26]
 8005662:	e0ad      	b.n	80057c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d15c      	bne.n	8005728 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800566e:	7efb      	ldrb	r3, [r7, #27]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d828      	bhi.n	80056c6 <UART_SetConfig+0x3fe>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x3b4>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fd82 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 80056a4:	6178      	str	r0, [r7, #20]
        break;
 80056a6:	e013      	b.n	80056d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fd94 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 80056ac:	6178      	str	r0, [r7, #20]
        break;
 80056ae:	e00f      	b.n	80056d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <UART_SetConfig+0x510>)
 80056b2:	617b      	str	r3, [r7, #20]
        break;
 80056b4:	e00c      	b.n	80056d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe fcdf 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 80056ba:	6178      	str	r0, [r7, #20]
        break;
 80056bc:	e008      	b.n	80056d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	617b      	str	r3, [r7, #20]
        break;
 80056c4:	e004      	b.n	80056d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	76bb      	strb	r3, [r7, #26]
        break;
 80056ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d074      	beq.n	80057c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	005a      	lsls	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d916      	bls.n	8005722 <UART_SetConfig+0x45a>
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fa:	d212      	bcs.n	8005722 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f023 030f 	bic.w	r3, r3, #15
 8005704:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b29a      	uxth	r2, r3
 8005712:	89fb      	ldrh	r3, [r7, #14]
 8005714:	4313      	orrs	r3, r2
 8005716:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	89fa      	ldrh	r2, [r7, #14]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e04e      	b.n	80057c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	76bb      	strb	r3, [r7, #26]
 8005726:	e04b      	b.n	80057c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005728:	7efb      	ldrb	r3, [r7, #27]
 800572a:	2b08      	cmp	r3, #8
 800572c:	d827      	bhi.n	800577e <UART_SetConfig+0x4b6>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x46c>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fe fd26 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 800575c:	6178      	str	r0, [r7, #20]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fe fd38 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 8005764:	6178      	str	r0, [r7, #20]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <UART_SetConfig+0x510>)
 800576a:	617b      	str	r3, [r7, #20]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fe fc83 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8005772:	6178      	str	r0, [r7, #20]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	617b      	str	r3, [r7, #20]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	76bb      	strb	r3, [r7, #26]
        break;
 8005786:	bf00      	nop
    }

    if (pclk != 0U)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085a      	lsrs	r2, r3, #1
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	441a      	add	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d908      	bls.n	80057bc <UART_SetConfig+0x4f4>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d204      	bcs.n	80057bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e001      	b.n	80057c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bdb0      	pop	{r4, r5, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00f42400 	.word	0x00f42400

080057dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d10a      	bne.n	80058f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005930:	f7fc fcfe 	bl	8002330 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d10e      	bne.n	8005962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f82d 	bl	80059b2 <UART_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e023      	b.n	80059aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d10e      	bne.n	800598e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f817 	bl	80059b2 <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e00d      	b.n	80059aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	603b      	str	r3, [r7, #0]
 80059be:	4613      	mov	r3, r2
 80059c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c2:	e05e      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d05a      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059cc:	f7fc fcb0 	bl	8002330 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d11b      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e043      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02c      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a36:	d124      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a40:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a50:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d091      	beq.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d10e      	bne.n	8005afe <UART_Start_Receive_IT+0x52>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <UART_Start_Receive_IT+0x48>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005af2:	e02d      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	22ff      	movs	r2, #255	; 0xff
 8005af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005afc:	e028      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <UART_Start_Receive_IT+0x76>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <UART_Start_Receive_IT+0x6c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b16:	e01b      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	227f      	movs	r2, #127	; 0x7f
 8005b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b20:	e016      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2a:	d10d      	bne.n	8005b48 <UART_Start_Receive_IT+0x9c>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <UART_Start_Receive_IT+0x92>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	227f      	movs	r2, #127	; 0x7f
 8005b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b3c:	e008      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	223f      	movs	r2, #63	; 0x3f
 8005b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b46:	e003      	b.n	8005b50 <UART_Start_Receive_IT+0xa4>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2222      	movs	r2, #34	; 0x22
 8005b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b76:	d107      	bne.n	8005b88 <UART_Start_Receive_IT+0xdc>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d103      	bne.n	8005b88 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <UART_Start_Receive_IT+0x108>)
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
 8005b86:	e002      	b.n	8005b8e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <UART_Start_Receive_IT+0x10c>)
 8005b8c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005ba4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	08005d51 	.word	0x08005d51
 8005bb8:	08005c79 	.word	0x08005c79

08005bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bd2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0210 	bic.w	r2, r2, #16
 8005bfa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fb2f 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b082      	sub	sp, #8
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fb0c 	bl	8005288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8c:	2b22      	cmp	r3, #34	; 0x22
 8005c8e:	d151      	bne.n	8005d34 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c96:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c98:	89bb      	ldrh	r3, [r7, #12]
 8005c9a:	b2d9      	uxtb	r1, r3
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d13a      	bne.n	8005d48 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ce0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10f      	bne.n	8005d26 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0210 	bic.w	r2, r2, #16
 8005d14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fac6 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
 8005d24:	e002      	b.n	8005d2c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb ffbe 	bl	8001ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d32:	e009      	b.n	8005d48 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	8b1b      	ldrh	r3, [r3, #24]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0208 	orr.w	r2, r2, #8
 8005d44:	b292      	uxth	r2, r2
 8005d46:	831a      	strh	r2, [r3, #24]
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d64:	2b22      	cmp	r3, #34	; 0x22
 8005d66:	d151      	bne.n	8005e0c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d6e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d76:	89ba      	ldrh	r2, [r7, #12]
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d13a      	bne.n	8005e20 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005db8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10f      	bne.n	8005dfe <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0210 	bic.w	r2, r2, #16
 8005dec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fa5a 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
 8005dfc:	e002      	b.n	8005e04 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb ff52 	bl	8001ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e0a:	e009      	b.n	8005e20 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	8b1b      	ldrh	r3, [r3, #24]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0208 	orr.w	r2, r2, #8
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	831a      	strh	r2, [r3, #24]
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f002 fd96 	bl	800898c <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08008f14 	.word	0x08008f14
 8005e84:	08008f14 	.word	0x08008f14
 8005e88:	08008f14 	.word	0x08008f14
 8005e8c:	08008f18 	.word	0x08008f18

08005e90 <malloc>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <malloc+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f000 b863 	b.w	8005f60 <_malloc_r>
 8005e9a:	bf00      	nop
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <free>:
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <free+0xc>)
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f000 b80b 	b.w	8005ec0 <_free_r>
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <memset>:
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	f803 1b01 	strb.w	r1, [r3], #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <_free_r>:
 8005ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	d048      	beq.n	8005f58 <_free_r+0x98>
 8005ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eca:	9001      	str	r0, [sp, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f1a1 0404 	sub.w	r4, r1, #4
 8005ed2:	bfb8      	it	lt
 8005ed4:	18e4      	addlt	r4, r4, r3
 8005ed6:	f001 ff21 	bl	8007d1c <__malloc_lock>
 8005eda:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <_free_r+0x9c>)
 8005edc:	9801      	ldr	r0, [sp, #4]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	4615      	mov	r5, r2
 8005ee2:	b933      	cbnz	r3, 8005ef2 <_free_r+0x32>
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	6014      	str	r4, [r2, #0]
 8005ee8:	b003      	add	sp, #12
 8005eea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eee:	f001 bf1b 	b.w	8007d28 <__malloc_unlock>
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	d90b      	bls.n	8005f0e <_free_r+0x4e>
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	1862      	adds	r2, r4, r1
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bf04      	itt	eq
 8005efe:	681a      	ldreq	r2, [r3, #0]
 8005f00:	685b      	ldreq	r3, [r3, #4]
 8005f02:	6063      	str	r3, [r4, #4]
 8005f04:	bf04      	itt	eq
 8005f06:	1852      	addeq	r2, r2, r1
 8005f08:	6022      	streq	r2, [r4, #0]
 8005f0a:	602c      	str	r4, [r5, #0]
 8005f0c:	e7ec      	b.n	8005ee8 <_free_r+0x28>
 8005f0e:	461a      	mov	r2, r3
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b10b      	cbz	r3, 8005f18 <_free_r+0x58>
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	d9fa      	bls.n	8005f0e <_free_r+0x4e>
 8005f18:	6811      	ldr	r1, [r2, #0]
 8005f1a:	1855      	adds	r5, r2, r1
 8005f1c:	42a5      	cmp	r5, r4
 8005f1e:	d10b      	bne.n	8005f38 <_free_r+0x78>
 8005f20:	6824      	ldr	r4, [r4, #0]
 8005f22:	4421      	add	r1, r4
 8005f24:	1854      	adds	r4, r2, r1
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	d1dd      	bne.n	8005ee8 <_free_r+0x28>
 8005f2c:	681c      	ldr	r4, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	6053      	str	r3, [r2, #4]
 8005f32:	4421      	add	r1, r4
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	e7d7      	b.n	8005ee8 <_free_r+0x28>
 8005f38:	d902      	bls.n	8005f40 <_free_r+0x80>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	6003      	str	r3, [r0, #0]
 8005f3e:	e7d3      	b.n	8005ee8 <_free_r+0x28>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf04      	itt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	bf04      	itt	eq
 8005f50:	1949      	addeq	r1, r1, r5
 8005f52:	6021      	streq	r1, [r4, #0]
 8005f54:	6054      	str	r4, [r2, #4]
 8005f56:	e7c7      	b.n	8005ee8 <_free_r+0x28>
 8005f58:	b003      	add	sp, #12
 8005f5a:	bd30      	pop	{r4, r5, pc}
 8005f5c:	20000204 	.word	0x20000204

08005f60 <_malloc_r>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	1ccd      	adds	r5, r1, #3
 8005f64:	f025 0503 	bic.w	r5, r5, #3
 8005f68:	3508      	adds	r5, #8
 8005f6a:	2d0c      	cmp	r5, #12
 8005f6c:	bf38      	it	cc
 8005f6e:	250c      	movcc	r5, #12
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	4606      	mov	r6, r0
 8005f74:	db01      	blt.n	8005f7a <_malloc_r+0x1a>
 8005f76:	42a9      	cmp	r1, r5
 8005f78:	d903      	bls.n	8005f82 <_malloc_r+0x22>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	6033      	str	r3, [r6, #0]
 8005f7e:	2000      	movs	r0, #0
 8005f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f82:	f001 fecb 	bl	8007d1c <__malloc_lock>
 8005f86:	4921      	ldr	r1, [pc, #132]	; (800600c <_malloc_r+0xac>)
 8005f88:	680a      	ldr	r2, [r1, #0]
 8005f8a:	4614      	mov	r4, r2
 8005f8c:	b99c      	cbnz	r4, 8005fb6 <_malloc_r+0x56>
 8005f8e:	4f20      	ldr	r7, [pc, #128]	; (8006010 <_malloc_r+0xb0>)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b923      	cbnz	r3, 8005f9e <_malloc_r+0x3e>
 8005f94:	4621      	mov	r1, r4
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 fd34 	bl	8006a04 <_sbrk_r>
 8005f9c:	6038      	str	r0, [r7, #0]
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 fd2f 	bl	8006a04 <_sbrk_r>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	d123      	bne.n	8005ff2 <_malloc_r+0x92>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f001 feba 	bl	8007d28 <__malloc_unlock>
 8005fb4:	e7e3      	b.n	8005f7e <_malloc_r+0x1e>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	1b5b      	subs	r3, r3, r5
 8005fba:	d417      	bmi.n	8005fec <_malloc_r+0x8c>
 8005fbc:	2b0b      	cmp	r3, #11
 8005fbe:	d903      	bls.n	8005fc8 <_malloc_r+0x68>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	441c      	add	r4, r3
 8005fc4:	6025      	str	r5, [r4, #0]
 8005fc6:	e004      	b.n	8005fd2 <_malloc_r+0x72>
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	42a2      	cmp	r2, r4
 8005fcc:	bf0c      	ite	eq
 8005fce:	600b      	streq	r3, [r1, #0]
 8005fd0:	6053      	strne	r3, [r2, #4]
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f001 fea8 	bl	8007d28 <__malloc_unlock>
 8005fd8:	f104 000b 	add.w	r0, r4, #11
 8005fdc:	1d23      	adds	r3, r4, #4
 8005fde:	f020 0007 	bic.w	r0, r0, #7
 8005fe2:	1ac2      	subs	r2, r0, r3
 8005fe4:	d0cc      	beq.n	8005f80 <_malloc_r+0x20>
 8005fe6:	1a1b      	subs	r3, r3, r0
 8005fe8:	50a3      	str	r3, [r4, r2]
 8005fea:	e7c9      	b.n	8005f80 <_malloc_r+0x20>
 8005fec:	4622      	mov	r2, r4
 8005fee:	6864      	ldr	r4, [r4, #4]
 8005ff0:	e7cc      	b.n	8005f8c <_malloc_r+0x2c>
 8005ff2:	1cc4      	adds	r4, r0, #3
 8005ff4:	f024 0403 	bic.w	r4, r4, #3
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d0e3      	beq.n	8005fc4 <_malloc_r+0x64>
 8005ffc:	1a21      	subs	r1, r4, r0
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 fd00 	bl	8006a04 <_sbrk_r>
 8006004:	3001      	adds	r0, #1
 8006006:	d1dd      	bne.n	8005fc4 <_malloc_r+0x64>
 8006008:	e7cf      	b.n	8005faa <_malloc_r+0x4a>
 800600a:	bf00      	nop
 800600c:	20000204 	.word	0x20000204
 8006010:	20000208 	.word	0x20000208

08006014 <__cvt>:
 8006014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	ec55 4b10 	vmov	r4, r5, d0
 800601c:	2d00      	cmp	r5, #0
 800601e:	460e      	mov	r6, r1
 8006020:	4619      	mov	r1, r3
 8006022:	462b      	mov	r3, r5
 8006024:	bfbb      	ittet	lt
 8006026:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800602a:	461d      	movlt	r5, r3
 800602c:	2300      	movge	r3, #0
 800602e:	232d      	movlt	r3, #45	; 0x2d
 8006030:	700b      	strb	r3, [r1, #0]
 8006032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006034:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006038:	4691      	mov	r9, r2
 800603a:	f023 0820 	bic.w	r8, r3, #32
 800603e:	bfbc      	itt	lt
 8006040:	4622      	movlt	r2, r4
 8006042:	4614      	movlt	r4, r2
 8006044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006048:	d005      	beq.n	8006056 <__cvt+0x42>
 800604a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800604e:	d100      	bne.n	8006052 <__cvt+0x3e>
 8006050:	3601      	adds	r6, #1
 8006052:	2102      	movs	r1, #2
 8006054:	e000      	b.n	8006058 <__cvt+0x44>
 8006056:	2103      	movs	r1, #3
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	ab02      	add	r3, sp, #8
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	ec45 4b10 	vmov	d0, r4, r5
 8006064:	4653      	mov	r3, sl
 8006066:	4632      	mov	r2, r6
 8006068:	f000 fe3a 	bl	8006ce0 <_dtoa_r>
 800606c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006070:	4607      	mov	r7, r0
 8006072:	d102      	bne.n	800607a <__cvt+0x66>
 8006074:	f019 0f01 	tst.w	r9, #1
 8006078:	d022      	beq.n	80060c0 <__cvt+0xac>
 800607a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800607e:	eb07 0906 	add.w	r9, r7, r6
 8006082:	d110      	bne.n	80060a6 <__cvt+0x92>
 8006084:	783b      	ldrb	r3, [r7, #0]
 8006086:	2b30      	cmp	r3, #48	; 0x30
 8006088:	d10a      	bne.n	80060a0 <__cvt+0x8c>
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006096:	b918      	cbnz	r0, 80060a0 <__cvt+0x8c>
 8006098:	f1c6 0601 	rsb	r6, r6, #1
 800609c:	f8ca 6000 	str.w	r6, [sl]
 80060a0:	f8da 3000 	ldr.w	r3, [sl]
 80060a4:	4499      	add	r9, r3
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	4620      	mov	r0, r4
 80060ac:	4629      	mov	r1, r5
 80060ae:	f7fa fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80060b2:	b108      	cbz	r0, 80060b8 <__cvt+0xa4>
 80060b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80060b8:	2230      	movs	r2, #48	; 0x30
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	454b      	cmp	r3, r9
 80060be:	d307      	bcc.n	80060d0 <__cvt+0xbc>
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060c4:	1bdb      	subs	r3, r3, r7
 80060c6:	4638      	mov	r0, r7
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	b004      	add	sp, #16
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	1c59      	adds	r1, r3, #1
 80060d2:	9103      	str	r1, [sp, #12]
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e7f0      	b.n	80060ba <__cvt+0xa6>

080060d8 <__exponent>:
 80060d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060da:	4603      	mov	r3, r0
 80060dc:	2900      	cmp	r1, #0
 80060de:	bfb8      	it	lt
 80060e0:	4249      	neglt	r1, r1
 80060e2:	f803 2b02 	strb.w	r2, [r3], #2
 80060e6:	bfb4      	ite	lt
 80060e8:	222d      	movlt	r2, #45	; 0x2d
 80060ea:	222b      	movge	r2, #43	; 0x2b
 80060ec:	2909      	cmp	r1, #9
 80060ee:	7042      	strb	r2, [r0, #1]
 80060f0:	dd2a      	ble.n	8006148 <__exponent+0x70>
 80060f2:	f10d 0407 	add.w	r4, sp, #7
 80060f6:	46a4      	mov	ip, r4
 80060f8:	270a      	movs	r7, #10
 80060fa:	46a6      	mov	lr, r4
 80060fc:	460a      	mov	r2, r1
 80060fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006102:	fb07 1516 	mls	r5, r7, r6, r1
 8006106:	3530      	adds	r5, #48	; 0x30
 8006108:	2a63      	cmp	r2, #99	; 0x63
 800610a:	f104 34ff 	add.w	r4, r4, #4294967295
 800610e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006112:	4631      	mov	r1, r6
 8006114:	dcf1      	bgt.n	80060fa <__exponent+0x22>
 8006116:	3130      	adds	r1, #48	; 0x30
 8006118:	f1ae 0502 	sub.w	r5, lr, #2
 800611c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006120:	1c44      	adds	r4, r0, #1
 8006122:	4629      	mov	r1, r5
 8006124:	4561      	cmp	r1, ip
 8006126:	d30a      	bcc.n	800613e <__exponent+0x66>
 8006128:	f10d 0209 	add.w	r2, sp, #9
 800612c:	eba2 020e 	sub.w	r2, r2, lr
 8006130:	4565      	cmp	r5, ip
 8006132:	bf88      	it	hi
 8006134:	2200      	movhi	r2, #0
 8006136:	4413      	add	r3, r2
 8006138:	1a18      	subs	r0, r3, r0
 800613a:	b003      	add	sp, #12
 800613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006142:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006146:	e7ed      	b.n	8006124 <__exponent+0x4c>
 8006148:	2330      	movs	r3, #48	; 0x30
 800614a:	3130      	adds	r1, #48	; 0x30
 800614c:	7083      	strb	r3, [r0, #2]
 800614e:	70c1      	strb	r1, [r0, #3]
 8006150:	1d03      	adds	r3, r0, #4
 8006152:	e7f1      	b.n	8006138 <__exponent+0x60>

08006154 <_printf_float>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	ed2d 8b02 	vpush	{d8}
 800615c:	b08d      	sub	sp, #52	; 0x34
 800615e:	460c      	mov	r4, r1
 8006160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006164:	4616      	mov	r6, r2
 8006166:	461f      	mov	r7, r3
 8006168:	4605      	mov	r5, r0
 800616a:	f001 fd5d 	bl	8007c28 <_localeconv_r>
 800616e:	f8d0 a000 	ldr.w	sl, [r0]
 8006172:	4650      	mov	r0, sl
 8006174:	f7fa f82c 	bl	80001d0 <strlen>
 8006178:	2300      	movs	r3, #0
 800617a:	930a      	str	r3, [sp, #40]	; 0x28
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	9305      	str	r3, [sp, #20]
 8006180:	f8d8 3000 	ldr.w	r3, [r8]
 8006184:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006188:	3307      	adds	r3, #7
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	f103 0208 	add.w	r2, r3, #8
 8006192:	f8c8 2000 	str.w	r2, [r8]
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800619e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80061a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061a6:	9307      	str	r3, [sp, #28]
 80061a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80061ac:	ee08 0a10 	vmov	s16, r0
 80061b0:	4b9f      	ldr	r3, [pc, #636]	; (8006430 <_printf_float+0x2dc>)
 80061b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ba:	f7fa fcb7 	bl	8000b2c <__aeabi_dcmpun>
 80061be:	bb88      	cbnz	r0, 8006224 <_printf_float+0xd0>
 80061c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c4:	4b9a      	ldr	r3, [pc, #616]	; (8006430 <_printf_float+0x2dc>)
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	f7fa fc91 	bl	8000af0 <__aeabi_dcmple>
 80061ce:	bb48      	cbnz	r0, 8006224 <_printf_float+0xd0>
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	4640      	mov	r0, r8
 80061d6:	4649      	mov	r1, r9
 80061d8:	f7fa fc80 	bl	8000adc <__aeabi_dcmplt>
 80061dc:	b110      	cbz	r0, 80061e4 <_printf_float+0x90>
 80061de:	232d      	movs	r3, #45	; 0x2d
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e4:	4b93      	ldr	r3, [pc, #588]	; (8006434 <_printf_float+0x2e0>)
 80061e6:	4894      	ldr	r0, [pc, #592]	; (8006438 <_printf_float+0x2e4>)
 80061e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061ec:	bf94      	ite	ls
 80061ee:	4698      	movls	r8, r3
 80061f0:	4680      	movhi	r8, r0
 80061f2:	2303      	movs	r3, #3
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	9b05      	ldr	r3, [sp, #20]
 80061f8:	f023 0204 	bic.w	r2, r3, #4
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	f04f 0900 	mov.w	r9, #0
 8006202:	9700      	str	r7, [sp, #0]
 8006204:	4633      	mov	r3, r6
 8006206:	aa0b      	add	r2, sp, #44	; 0x2c
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f9d8 	bl	80065c0 <_printf_common>
 8006210:	3001      	adds	r0, #1
 8006212:	f040 8090 	bne.w	8006336 <_printf_float+0x1e2>
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	b00d      	add	sp, #52	; 0x34
 800621c:	ecbd 8b02 	vpop	{d8}
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7fa fc7e 	bl	8000b2c <__aeabi_dcmpun>
 8006230:	b140      	cbz	r0, 8006244 <_printf_float+0xf0>
 8006232:	464b      	mov	r3, r9
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfbc      	itt	lt
 8006238:	232d      	movlt	r3, #45	; 0x2d
 800623a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800623e:	487f      	ldr	r0, [pc, #508]	; (800643c <_printf_float+0x2e8>)
 8006240:	4b7f      	ldr	r3, [pc, #508]	; (8006440 <_printf_float+0x2ec>)
 8006242:	e7d1      	b.n	80061e8 <_printf_float+0x94>
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800624a:	9206      	str	r2, [sp, #24]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	d13f      	bne.n	80062d0 <_printf_float+0x17c>
 8006250:	2306      	movs	r3, #6
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	9b05      	ldr	r3, [sp, #20]
 8006256:	6861      	ldr	r1, [r4, #4]
 8006258:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800625c:	2300      	movs	r3, #0
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	ab0a      	add	r3, sp, #40	; 0x28
 8006262:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006266:	ab09      	add	r3, sp, #36	; 0x24
 8006268:	ec49 8b10 	vmov	d0, r8, r9
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006274:	4628      	mov	r0, r5
 8006276:	f7ff fecd 	bl	8006014 <__cvt>
 800627a:	9b06      	ldr	r3, [sp, #24]
 800627c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800627e:	2b47      	cmp	r3, #71	; 0x47
 8006280:	4680      	mov	r8, r0
 8006282:	d108      	bne.n	8006296 <_printf_float+0x142>
 8006284:	1cc8      	adds	r0, r1, #3
 8006286:	db02      	blt.n	800628e <_printf_float+0x13a>
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	4299      	cmp	r1, r3
 800628c:	dd41      	ble.n	8006312 <_printf_float+0x1be>
 800628e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006292:	fa5f fb8b 	uxtb.w	fp, fp
 8006296:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800629a:	d820      	bhi.n	80062de <_printf_float+0x18a>
 800629c:	3901      	subs	r1, #1
 800629e:	465a      	mov	r2, fp
 80062a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062a4:	9109      	str	r1, [sp, #36]	; 0x24
 80062a6:	f7ff ff17 	bl	80060d8 <__exponent>
 80062aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ac:	1813      	adds	r3, r2, r0
 80062ae:	2a01      	cmp	r2, #1
 80062b0:	4681      	mov	r9, r0
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	dc02      	bgt.n	80062bc <_printf_float+0x168>
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	07d2      	lsls	r2, r2, #31
 80062ba:	d501      	bpl.n	80062c0 <_printf_float+0x16c>
 80062bc:	3301      	adds	r3, #1
 80062be:	6123      	str	r3, [r4, #16]
 80062c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d09c      	beq.n	8006202 <_printf_float+0xae>
 80062c8:	232d      	movs	r3, #45	; 0x2d
 80062ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ce:	e798      	b.n	8006202 <_printf_float+0xae>
 80062d0:	9a06      	ldr	r2, [sp, #24]
 80062d2:	2a47      	cmp	r2, #71	; 0x47
 80062d4:	d1be      	bne.n	8006254 <_printf_float+0x100>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1bc      	bne.n	8006254 <_printf_float+0x100>
 80062da:	2301      	movs	r3, #1
 80062dc:	e7b9      	b.n	8006252 <_printf_float+0xfe>
 80062de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062e2:	d118      	bne.n	8006316 <_printf_float+0x1c2>
 80062e4:	2900      	cmp	r1, #0
 80062e6:	6863      	ldr	r3, [r4, #4]
 80062e8:	dd0b      	ble.n	8006302 <_printf_float+0x1ae>
 80062ea:	6121      	str	r1, [r4, #16]
 80062ec:	b913      	cbnz	r3, 80062f4 <_printf_float+0x1a0>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	07d0      	lsls	r0, r2, #31
 80062f2:	d502      	bpl.n	80062fa <_printf_float+0x1a6>
 80062f4:	3301      	adds	r3, #1
 80062f6:	440b      	add	r3, r1
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80062fc:	f04f 0900 	mov.w	r9, #0
 8006300:	e7de      	b.n	80062c0 <_printf_float+0x16c>
 8006302:	b913      	cbnz	r3, 800630a <_printf_float+0x1b6>
 8006304:	6822      	ldr	r2, [r4, #0]
 8006306:	07d2      	lsls	r2, r2, #31
 8006308:	d501      	bpl.n	800630e <_printf_float+0x1ba>
 800630a:	3302      	adds	r3, #2
 800630c:	e7f4      	b.n	80062f8 <_printf_float+0x1a4>
 800630e:	2301      	movs	r3, #1
 8006310:	e7f2      	b.n	80062f8 <_printf_float+0x1a4>
 8006312:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006318:	4299      	cmp	r1, r3
 800631a:	db05      	blt.n	8006328 <_printf_float+0x1d4>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	6121      	str	r1, [r4, #16]
 8006320:	07d8      	lsls	r0, r3, #31
 8006322:	d5ea      	bpl.n	80062fa <_printf_float+0x1a6>
 8006324:	1c4b      	adds	r3, r1, #1
 8006326:	e7e7      	b.n	80062f8 <_printf_float+0x1a4>
 8006328:	2900      	cmp	r1, #0
 800632a:	bfd4      	ite	le
 800632c:	f1c1 0202 	rsble	r2, r1, #2
 8006330:	2201      	movgt	r2, #1
 8006332:	4413      	add	r3, r2
 8006334:	e7e0      	b.n	80062f8 <_printf_float+0x1a4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	055a      	lsls	r2, r3, #21
 800633a:	d407      	bmi.n	800634c <_printf_float+0x1f8>
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	4642      	mov	r2, r8
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	d12c      	bne.n	80063a4 <_printf_float+0x250>
 800634a:	e764      	b.n	8006216 <_printf_float+0xc2>
 800634c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006350:	f240 80e0 	bls.w	8006514 <_printf_float+0x3c0>
 8006354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	f7fa fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006360:	2800      	cmp	r0, #0
 8006362:	d034      	beq.n	80063ce <_printf_float+0x27a>
 8006364:	4a37      	ldr	r2, [pc, #220]	; (8006444 <_printf_float+0x2f0>)
 8006366:	2301      	movs	r3, #1
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af51 	beq.w	8006216 <_printf_float+0xc2>
 8006374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006378:	429a      	cmp	r2, r3
 800637a:	db02      	blt.n	8006382 <_printf_float+0x22e>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07d8      	lsls	r0, r3, #31
 8006380:	d510      	bpl.n	80063a4 <_printf_float+0x250>
 8006382:	ee18 3a10 	vmov	r3, s16
 8006386:	4652      	mov	r2, sl
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af41 	beq.w	8006216 <_printf_float+0xc2>
 8006394:	f04f 0800 	mov.w	r8, #0
 8006398:	f104 091a 	add.w	r9, r4, #26
 800639c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639e:	3b01      	subs	r3, #1
 80063a0:	4543      	cmp	r3, r8
 80063a2:	dc09      	bgt.n	80063b8 <_printf_float+0x264>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	f100 8105 	bmi.w	80065b6 <_printf_float+0x462>
 80063ac:	68e0      	ldr	r0, [r4, #12]
 80063ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b0:	4298      	cmp	r0, r3
 80063b2:	bfb8      	it	lt
 80063b4:	4618      	movlt	r0, r3
 80063b6:	e730      	b.n	800621a <_printf_float+0xc6>
 80063b8:	2301      	movs	r3, #1
 80063ba:	464a      	mov	r2, r9
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af27 	beq.w	8006216 <_printf_float+0xc2>
 80063c8:	f108 0801 	add.w	r8, r8, #1
 80063cc:	e7e6      	b.n	800639c <_printf_float+0x248>
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc39      	bgt.n	8006448 <_printf_float+0x2f4>
 80063d4:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <_printf_float+0x2f0>)
 80063d6:	2301      	movs	r3, #1
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af19 	beq.w	8006216 <_printf_float+0xc2>
 80063e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d102      	bne.n	80063f2 <_printf_float+0x29e>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	07d9      	lsls	r1, r3, #31
 80063f0:	d5d8      	bpl.n	80063a4 <_printf_float+0x250>
 80063f2:	ee18 3a10 	vmov	r3, s16
 80063f6:	4652      	mov	r2, sl
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af09 	beq.w	8006216 <_printf_float+0xc2>
 8006404:	f04f 0900 	mov.w	r9, #0
 8006408:	f104 0a1a 	add.w	sl, r4, #26
 800640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640e:	425b      	negs	r3, r3
 8006410:	454b      	cmp	r3, r9
 8006412:	dc01      	bgt.n	8006418 <_printf_float+0x2c4>
 8006414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006416:	e792      	b.n	800633e <_printf_float+0x1ea>
 8006418:	2301      	movs	r3, #1
 800641a:	4652      	mov	r2, sl
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f aef7 	beq.w	8006216 <_printf_float+0xc2>
 8006428:	f109 0901 	add.w	r9, r9, #1
 800642c:	e7ee      	b.n	800640c <_printf_float+0x2b8>
 800642e:	bf00      	nop
 8006430:	7fefffff 	.word	0x7fefffff
 8006434:	08008b2c 	.word	0x08008b2c
 8006438:	08008b30 	.word	0x08008b30
 800643c:	08008b38 	.word	0x08008b38
 8006440:	08008b34 	.word	0x08008b34
 8006444:	08008b3c 	.word	0x08008b3c
 8006448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800644a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800644c:	429a      	cmp	r2, r3
 800644e:	bfa8      	it	ge
 8006450:	461a      	movge	r2, r3
 8006452:	2a00      	cmp	r2, #0
 8006454:	4691      	mov	r9, r2
 8006456:	dc37      	bgt.n	80064c8 <_printf_float+0x374>
 8006458:	f04f 0b00 	mov.w	fp, #0
 800645c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006460:	f104 021a 	add.w	r2, r4, #26
 8006464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	eba3 0309 	sub.w	r3, r3, r9
 800646c:	455b      	cmp	r3, fp
 800646e:	dc33      	bgt.n	80064d8 <_printf_float+0x384>
 8006470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006474:	429a      	cmp	r2, r3
 8006476:	db3b      	blt.n	80064f0 <_printf_float+0x39c>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07da      	lsls	r2, r3, #31
 800647c:	d438      	bmi.n	80064f0 <_printf_float+0x39c>
 800647e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006480:	9b05      	ldr	r3, [sp, #20]
 8006482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	eba2 0901 	sub.w	r9, r2, r1
 800648a:	4599      	cmp	r9, r3
 800648c:	bfa8      	it	ge
 800648e:	4699      	movge	r9, r3
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	dc35      	bgt.n	8006502 <_printf_float+0x3ae>
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800649e:	f104 0a1a 	add.w	sl, r4, #26
 80064a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	eba3 0309 	sub.w	r3, r3, r9
 80064ac:	4543      	cmp	r3, r8
 80064ae:	f77f af79 	ble.w	80063a4 <_printf_float+0x250>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4652      	mov	r2, sl
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f aeaa 	beq.w	8006216 <_printf_float+0xc2>
 80064c2:	f108 0801 	add.w	r8, r8, #1
 80064c6:	e7ec      	b.n	80064a2 <_printf_float+0x34e>
 80064c8:	4613      	mov	r3, r2
 80064ca:	4631      	mov	r1, r6
 80064cc:	4642      	mov	r2, r8
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	d1c0      	bne.n	8006458 <_printf_float+0x304>
 80064d6:	e69e      	b.n	8006216 <_printf_float+0xc2>
 80064d8:	2301      	movs	r3, #1
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	9205      	str	r2, [sp, #20]
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f ae97 	beq.w	8006216 <_printf_float+0xc2>
 80064e8:	9a05      	ldr	r2, [sp, #20]
 80064ea:	f10b 0b01 	add.w	fp, fp, #1
 80064ee:	e7b9      	b.n	8006464 <_printf_float+0x310>
 80064f0:	ee18 3a10 	vmov	r3, s16
 80064f4:	4652      	mov	r2, sl
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	d1be      	bne.n	800647e <_printf_float+0x32a>
 8006500:	e689      	b.n	8006216 <_printf_float+0xc2>
 8006502:	9a05      	ldr	r2, [sp, #20]
 8006504:	464b      	mov	r3, r9
 8006506:	4442      	add	r2, r8
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	d1c1      	bne.n	8006496 <_printf_float+0x342>
 8006512:	e680      	b.n	8006216 <_printf_float+0xc2>
 8006514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006516:	2a01      	cmp	r2, #1
 8006518:	dc01      	bgt.n	800651e <_printf_float+0x3ca>
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d538      	bpl.n	8006590 <_printf_float+0x43c>
 800651e:	2301      	movs	r3, #1
 8006520:	4642      	mov	r2, r8
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	f43f ae74 	beq.w	8006216 <_printf_float+0xc2>
 800652e:	ee18 3a10 	vmov	r3, s16
 8006532:	4652      	mov	r2, sl
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f ae6b 	beq.w	8006216 <_printf_float+0xc2>
 8006540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	f7fa fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800654c:	b9d8      	cbnz	r0, 8006586 <_printf_float+0x432>
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	f108 0201 	add.w	r2, r8, #1
 8006554:	3b01      	subs	r3, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d10e      	bne.n	800657e <_printf_float+0x42a>
 8006560:	e659      	b.n	8006216 <_printf_float+0xc2>
 8006562:	2301      	movs	r3, #1
 8006564:	4652      	mov	r2, sl
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae52 	beq.w	8006216 <_printf_float+0xc2>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006578:	3b01      	subs	r3, #1
 800657a:	4543      	cmp	r3, r8
 800657c:	dcf1      	bgt.n	8006562 <_printf_float+0x40e>
 800657e:	464b      	mov	r3, r9
 8006580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006584:	e6dc      	b.n	8006340 <_printf_float+0x1ec>
 8006586:	f04f 0800 	mov.w	r8, #0
 800658a:	f104 0a1a 	add.w	sl, r4, #26
 800658e:	e7f2      	b.n	8006576 <_printf_float+0x422>
 8006590:	2301      	movs	r3, #1
 8006592:	4642      	mov	r2, r8
 8006594:	e7df      	b.n	8006556 <_printf_float+0x402>
 8006596:	2301      	movs	r3, #1
 8006598:	464a      	mov	r2, r9
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f ae38 	beq.w	8006216 <_printf_float+0xc2>
 80065a6:	f108 0801 	add.w	r8, r8, #1
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ae:	1a5b      	subs	r3, r3, r1
 80065b0:	4543      	cmp	r3, r8
 80065b2:	dcf0      	bgt.n	8006596 <_printf_float+0x442>
 80065b4:	e6fa      	b.n	80063ac <_printf_float+0x258>
 80065b6:	f04f 0800 	mov.w	r8, #0
 80065ba:	f104 0919 	add.w	r9, r4, #25
 80065be:	e7f4      	b.n	80065aa <_printf_float+0x456>

080065c0 <_printf_common>:
 80065c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	4616      	mov	r6, r2
 80065c6:	4699      	mov	r9, r3
 80065c8:	688a      	ldr	r2, [r1, #8]
 80065ca:	690b      	ldr	r3, [r1, #16]
 80065cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	bfb8      	it	lt
 80065d4:	4613      	movlt	r3, r2
 80065d6:	6033      	str	r3, [r6, #0]
 80065d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065dc:	4607      	mov	r7, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	b10a      	cbz	r2, 80065e6 <_printf_common+0x26>
 80065e2:	3301      	adds	r3, #1
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	0699      	lsls	r1, r3, #26
 80065ea:	bf42      	ittt	mi
 80065ec:	6833      	ldrmi	r3, [r6, #0]
 80065ee:	3302      	addmi	r3, #2
 80065f0:	6033      	strmi	r3, [r6, #0]
 80065f2:	6825      	ldr	r5, [r4, #0]
 80065f4:	f015 0506 	ands.w	r5, r5, #6
 80065f8:	d106      	bne.n	8006608 <_printf_common+0x48>
 80065fa:	f104 0a19 	add.w	sl, r4, #25
 80065fe:	68e3      	ldr	r3, [r4, #12]
 8006600:	6832      	ldr	r2, [r6, #0]
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	42ab      	cmp	r3, r5
 8006606:	dc26      	bgt.n	8006656 <_printf_common+0x96>
 8006608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800660c:	1e13      	subs	r3, r2, #0
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	bf18      	it	ne
 8006612:	2301      	movne	r3, #1
 8006614:	0692      	lsls	r2, r2, #26
 8006616:	d42b      	bmi.n	8006670 <_printf_common+0xb0>
 8006618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800661c:	4649      	mov	r1, r9
 800661e:	4638      	mov	r0, r7
 8006620:	47c0      	blx	r8
 8006622:	3001      	adds	r0, #1
 8006624:	d01e      	beq.n	8006664 <_printf_common+0xa4>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	68e5      	ldr	r5, [r4, #12]
 800662a:	6832      	ldr	r2, [r6, #0]
 800662c:	f003 0306 	and.w	r3, r3, #6
 8006630:	2b04      	cmp	r3, #4
 8006632:	bf08      	it	eq
 8006634:	1aad      	subeq	r5, r5, r2
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	6922      	ldr	r2, [r4, #16]
 800663a:	bf0c      	ite	eq
 800663c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006640:	2500      	movne	r5, #0
 8006642:	4293      	cmp	r3, r2
 8006644:	bfc4      	itt	gt
 8006646:	1a9b      	subgt	r3, r3, r2
 8006648:	18ed      	addgt	r5, r5, r3
 800664a:	2600      	movs	r6, #0
 800664c:	341a      	adds	r4, #26
 800664e:	42b5      	cmp	r5, r6
 8006650:	d11a      	bne.n	8006688 <_printf_common+0xc8>
 8006652:	2000      	movs	r0, #0
 8006654:	e008      	b.n	8006668 <_printf_common+0xa8>
 8006656:	2301      	movs	r3, #1
 8006658:	4652      	mov	r2, sl
 800665a:	4649      	mov	r1, r9
 800665c:	4638      	mov	r0, r7
 800665e:	47c0      	blx	r8
 8006660:	3001      	adds	r0, #1
 8006662:	d103      	bne.n	800666c <_printf_common+0xac>
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666c:	3501      	adds	r5, #1
 800666e:	e7c6      	b.n	80065fe <_printf_common+0x3e>
 8006670:	18e1      	adds	r1, r4, r3
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	2030      	movs	r0, #48	; 0x30
 8006676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800667a:	4422      	add	r2, r4
 800667c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006684:	3302      	adds	r3, #2
 8006686:	e7c7      	b.n	8006618 <_printf_common+0x58>
 8006688:	2301      	movs	r3, #1
 800668a:	4622      	mov	r2, r4
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d0e6      	beq.n	8006664 <_printf_common+0xa4>
 8006696:	3601      	adds	r6, #1
 8006698:	e7d9      	b.n	800664e <_printf_common+0x8e>
	...

0800669c <_printf_i>:
 800669c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	4691      	mov	r9, r2
 80066a4:	7e27      	ldrb	r7, [r4, #24]
 80066a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066a8:	2f78      	cmp	r7, #120	; 0x78
 80066aa:	4680      	mov	r8, r0
 80066ac:	469a      	mov	sl, r3
 80066ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b2:	d807      	bhi.n	80066c4 <_printf_i+0x28>
 80066b4:	2f62      	cmp	r7, #98	; 0x62
 80066b6:	d80a      	bhi.n	80066ce <_printf_i+0x32>
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	f000 80d8 	beq.w	800686e <_printf_i+0x1d2>
 80066be:	2f58      	cmp	r7, #88	; 0x58
 80066c0:	f000 80a3 	beq.w	800680a <_printf_i+0x16e>
 80066c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066cc:	e03a      	b.n	8006744 <_printf_i+0xa8>
 80066ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066d2:	2b15      	cmp	r3, #21
 80066d4:	d8f6      	bhi.n	80066c4 <_printf_i+0x28>
 80066d6:	a001      	add	r0, pc, #4	; (adr r0, 80066dc <_printf_i+0x40>)
 80066d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066dc:	08006735 	.word	0x08006735
 80066e0:	08006749 	.word	0x08006749
 80066e4:	080066c5 	.word	0x080066c5
 80066e8:	080066c5 	.word	0x080066c5
 80066ec:	080066c5 	.word	0x080066c5
 80066f0:	080066c5 	.word	0x080066c5
 80066f4:	08006749 	.word	0x08006749
 80066f8:	080066c5 	.word	0x080066c5
 80066fc:	080066c5 	.word	0x080066c5
 8006700:	080066c5 	.word	0x080066c5
 8006704:	080066c5 	.word	0x080066c5
 8006708:	08006855 	.word	0x08006855
 800670c:	08006779 	.word	0x08006779
 8006710:	08006837 	.word	0x08006837
 8006714:	080066c5 	.word	0x080066c5
 8006718:	080066c5 	.word	0x080066c5
 800671c:	08006877 	.word	0x08006877
 8006720:	080066c5 	.word	0x080066c5
 8006724:	08006779 	.word	0x08006779
 8006728:	080066c5 	.word	0x080066c5
 800672c:	080066c5 	.word	0x080066c5
 8006730:	0800683f 	.word	0x0800683f
 8006734:	680b      	ldr	r3, [r1, #0]
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	600a      	str	r2, [r1, #0]
 800673c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006744:	2301      	movs	r3, #1
 8006746:	e0a3      	b.n	8006890 <_printf_i+0x1f4>
 8006748:	6825      	ldr	r5, [r4, #0]
 800674a:	6808      	ldr	r0, [r1, #0]
 800674c:	062e      	lsls	r6, r5, #24
 800674e:	f100 0304 	add.w	r3, r0, #4
 8006752:	d50a      	bpl.n	800676a <_printf_i+0xce>
 8006754:	6805      	ldr	r5, [r0, #0]
 8006756:	600b      	str	r3, [r1, #0]
 8006758:	2d00      	cmp	r5, #0
 800675a:	da03      	bge.n	8006764 <_printf_i+0xc8>
 800675c:	232d      	movs	r3, #45	; 0x2d
 800675e:	426d      	negs	r5, r5
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006764:	485e      	ldr	r0, [pc, #376]	; (80068e0 <_printf_i+0x244>)
 8006766:	230a      	movs	r3, #10
 8006768:	e019      	b.n	800679e <_printf_i+0x102>
 800676a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800676e:	6805      	ldr	r5, [r0, #0]
 8006770:	600b      	str	r3, [r1, #0]
 8006772:	bf18      	it	ne
 8006774:	b22d      	sxthne	r5, r5
 8006776:	e7ef      	b.n	8006758 <_printf_i+0xbc>
 8006778:	680b      	ldr	r3, [r1, #0]
 800677a:	6825      	ldr	r5, [r4, #0]
 800677c:	1d18      	adds	r0, r3, #4
 800677e:	6008      	str	r0, [r1, #0]
 8006780:	0628      	lsls	r0, r5, #24
 8006782:	d501      	bpl.n	8006788 <_printf_i+0xec>
 8006784:	681d      	ldr	r5, [r3, #0]
 8006786:	e002      	b.n	800678e <_printf_i+0xf2>
 8006788:	0669      	lsls	r1, r5, #25
 800678a:	d5fb      	bpl.n	8006784 <_printf_i+0xe8>
 800678c:	881d      	ldrh	r5, [r3, #0]
 800678e:	4854      	ldr	r0, [pc, #336]	; (80068e0 <_printf_i+0x244>)
 8006790:	2f6f      	cmp	r7, #111	; 0x6f
 8006792:	bf0c      	ite	eq
 8006794:	2308      	moveq	r3, #8
 8006796:	230a      	movne	r3, #10
 8006798:	2100      	movs	r1, #0
 800679a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800679e:	6866      	ldr	r6, [r4, #4]
 80067a0:	60a6      	str	r6, [r4, #8]
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	bfa2      	ittt	ge
 80067a6:	6821      	ldrge	r1, [r4, #0]
 80067a8:	f021 0104 	bicge.w	r1, r1, #4
 80067ac:	6021      	strge	r1, [r4, #0]
 80067ae:	b90d      	cbnz	r5, 80067b4 <_printf_i+0x118>
 80067b0:	2e00      	cmp	r6, #0
 80067b2:	d04d      	beq.n	8006850 <_printf_i+0x1b4>
 80067b4:	4616      	mov	r6, r2
 80067b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ba:	fb03 5711 	mls	r7, r3, r1, r5
 80067be:	5dc7      	ldrb	r7, [r0, r7]
 80067c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067c4:	462f      	mov	r7, r5
 80067c6:	42bb      	cmp	r3, r7
 80067c8:	460d      	mov	r5, r1
 80067ca:	d9f4      	bls.n	80067b6 <_printf_i+0x11a>
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d10b      	bne.n	80067e8 <_printf_i+0x14c>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	07df      	lsls	r7, r3, #31
 80067d4:	d508      	bpl.n	80067e8 <_printf_i+0x14c>
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	6861      	ldr	r1, [r4, #4]
 80067da:	4299      	cmp	r1, r3
 80067dc:	bfde      	ittt	le
 80067de:	2330      	movle	r3, #48	; 0x30
 80067e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067e8:	1b92      	subs	r2, r2, r6
 80067ea:	6122      	str	r2, [r4, #16]
 80067ec:	f8cd a000 	str.w	sl, [sp]
 80067f0:	464b      	mov	r3, r9
 80067f2:	aa03      	add	r2, sp, #12
 80067f4:	4621      	mov	r1, r4
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7ff fee2 	bl	80065c0 <_printf_common>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d14c      	bne.n	800689a <_printf_i+0x1fe>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	b004      	add	sp, #16
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	4835      	ldr	r0, [pc, #212]	; (80068e0 <_printf_i+0x244>)
 800680c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	680e      	ldr	r6, [r1, #0]
 8006814:	061f      	lsls	r7, r3, #24
 8006816:	f856 5b04 	ldr.w	r5, [r6], #4
 800681a:	600e      	str	r6, [r1, #0]
 800681c:	d514      	bpl.n	8006848 <_printf_i+0x1ac>
 800681e:	07d9      	lsls	r1, r3, #31
 8006820:	bf44      	itt	mi
 8006822:	f043 0320 	orrmi.w	r3, r3, #32
 8006826:	6023      	strmi	r3, [r4, #0]
 8006828:	b91d      	cbnz	r5, 8006832 <_printf_i+0x196>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f023 0320 	bic.w	r3, r3, #32
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	2310      	movs	r3, #16
 8006834:	e7b0      	b.n	8006798 <_printf_i+0xfc>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	f043 0320 	orr.w	r3, r3, #32
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	2378      	movs	r3, #120	; 0x78
 8006840:	4828      	ldr	r0, [pc, #160]	; (80068e4 <_printf_i+0x248>)
 8006842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006846:	e7e3      	b.n	8006810 <_printf_i+0x174>
 8006848:	065e      	lsls	r6, r3, #25
 800684a:	bf48      	it	mi
 800684c:	b2ad      	uxthmi	r5, r5
 800684e:	e7e6      	b.n	800681e <_printf_i+0x182>
 8006850:	4616      	mov	r6, r2
 8006852:	e7bb      	b.n	80067cc <_printf_i+0x130>
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	6826      	ldr	r6, [r4, #0]
 8006858:	6960      	ldr	r0, [r4, #20]
 800685a:	1d1d      	adds	r5, r3, #4
 800685c:	600d      	str	r5, [r1, #0]
 800685e:	0635      	lsls	r5, r6, #24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	d501      	bpl.n	8006868 <_printf_i+0x1cc>
 8006864:	6018      	str	r0, [r3, #0]
 8006866:	e002      	b.n	800686e <_printf_i+0x1d2>
 8006868:	0671      	lsls	r1, r6, #25
 800686a:	d5fb      	bpl.n	8006864 <_printf_i+0x1c8>
 800686c:	8018      	strh	r0, [r3, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	4616      	mov	r6, r2
 8006874:	e7ba      	b.n	80067ec <_printf_i+0x150>
 8006876:	680b      	ldr	r3, [r1, #0]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	600a      	str	r2, [r1, #0]
 800687c:	681e      	ldr	r6, [r3, #0]
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	2100      	movs	r1, #0
 8006882:	4630      	mov	r0, r6
 8006884:	f7f9 fcac 	bl	80001e0 <memchr>
 8006888:	b108      	cbz	r0, 800688e <_printf_i+0x1f2>
 800688a:	1b80      	subs	r0, r0, r6
 800688c:	6060      	str	r0, [r4, #4]
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	2300      	movs	r3, #0
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006898:	e7a8      	b.n	80067ec <_printf_i+0x150>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	4632      	mov	r2, r6
 800689e:	4649      	mov	r1, r9
 80068a0:	4640      	mov	r0, r8
 80068a2:	47d0      	blx	sl
 80068a4:	3001      	adds	r0, #1
 80068a6:	d0ab      	beq.n	8006800 <_printf_i+0x164>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	079b      	lsls	r3, r3, #30
 80068ac:	d413      	bmi.n	80068d6 <_printf_i+0x23a>
 80068ae:	68e0      	ldr	r0, [r4, #12]
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	4298      	cmp	r0, r3
 80068b4:	bfb8      	it	lt
 80068b6:	4618      	movlt	r0, r3
 80068b8:	e7a4      	b.n	8006804 <_printf_i+0x168>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4632      	mov	r2, r6
 80068be:	4649      	mov	r1, r9
 80068c0:	4640      	mov	r0, r8
 80068c2:	47d0      	blx	sl
 80068c4:	3001      	adds	r0, #1
 80068c6:	d09b      	beq.n	8006800 <_printf_i+0x164>
 80068c8:	3501      	adds	r5, #1
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	9903      	ldr	r1, [sp, #12]
 80068ce:	1a5b      	subs	r3, r3, r1
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dcf2      	bgt.n	80068ba <_printf_i+0x21e>
 80068d4:	e7eb      	b.n	80068ae <_printf_i+0x212>
 80068d6:	2500      	movs	r5, #0
 80068d8:	f104 0619 	add.w	r6, r4, #25
 80068dc:	e7f5      	b.n	80068ca <_printf_i+0x22e>
 80068de:	bf00      	nop
 80068e0:	08008b3e 	.word	0x08008b3e
 80068e4:	08008b4f 	.word	0x08008b4f

080068e8 <iprintf>:
 80068e8:	b40f      	push	{r0, r1, r2, r3}
 80068ea:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <iprintf+0x2c>)
 80068ec:	b513      	push	{r0, r1, r4, lr}
 80068ee:	681c      	ldr	r4, [r3, #0]
 80068f0:	b124      	cbz	r4, 80068fc <iprintf+0x14>
 80068f2:	69a3      	ldr	r3, [r4, #24]
 80068f4:	b913      	cbnz	r3, 80068fc <iprintf+0x14>
 80068f6:	4620      	mov	r0, r4
 80068f8:	f001 f8f8 	bl	8007aec <__sinit>
 80068fc:	ab05      	add	r3, sp, #20
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	68a1      	ldr	r1, [r4, #8]
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	4620      	mov	r0, r4
 8006906:	f001 fdcb 	bl	80084a0 <_vfiprintf_r>
 800690a:	b002      	add	sp, #8
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	b004      	add	sp, #16
 8006912:	4770      	bx	lr
 8006914:	2000000c 	.word	0x2000000c

08006918 <_puts_r>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	460e      	mov	r6, r1
 800691c:	4605      	mov	r5, r0
 800691e:	b118      	cbz	r0, 8006928 <_puts_r+0x10>
 8006920:	6983      	ldr	r3, [r0, #24]
 8006922:	b90b      	cbnz	r3, 8006928 <_puts_r+0x10>
 8006924:	f001 f8e2 	bl	8007aec <__sinit>
 8006928:	69ab      	ldr	r3, [r5, #24]
 800692a:	68ac      	ldr	r4, [r5, #8]
 800692c:	b913      	cbnz	r3, 8006934 <_puts_r+0x1c>
 800692e:	4628      	mov	r0, r5
 8006930:	f001 f8dc 	bl	8007aec <__sinit>
 8006934:	4b2c      	ldr	r3, [pc, #176]	; (80069e8 <_puts_r+0xd0>)
 8006936:	429c      	cmp	r4, r3
 8006938:	d120      	bne.n	800697c <_puts_r+0x64>
 800693a:	686c      	ldr	r4, [r5, #4]
 800693c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d405      	bmi.n	800694e <_puts_r+0x36>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d402      	bmi.n	800694e <_puts_r+0x36>
 8006948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800694a:	f001 f972 	bl	8007c32 <__retarget_lock_acquire_recursive>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	0719      	lsls	r1, r3, #28
 8006952:	d51d      	bpl.n	8006990 <_puts_r+0x78>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b1db      	cbz	r3, 8006990 <_puts_r+0x78>
 8006958:	3e01      	subs	r6, #1
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006960:	3b01      	subs	r3, #1
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	bb39      	cbnz	r1, 80069b6 <_puts_r+0x9e>
 8006966:	2b00      	cmp	r3, #0
 8006968:	da38      	bge.n	80069dc <_puts_r+0xc4>
 800696a:	4622      	mov	r2, r4
 800696c:	210a      	movs	r1, #10
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f86a 	bl	8006a48 <__swbuf_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d011      	beq.n	800699c <_puts_r+0x84>
 8006978:	250a      	movs	r5, #10
 800697a:	e011      	b.n	80069a0 <_puts_r+0x88>
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <_puts_r+0xd4>)
 800697e:	429c      	cmp	r4, r3
 8006980:	d101      	bne.n	8006986 <_puts_r+0x6e>
 8006982:	68ac      	ldr	r4, [r5, #8]
 8006984:	e7da      	b.n	800693c <_puts_r+0x24>
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <_puts_r+0xd8>)
 8006988:	429c      	cmp	r4, r3
 800698a:	bf08      	it	eq
 800698c:	68ec      	ldreq	r4, [r5, #12]
 800698e:	e7d5      	b.n	800693c <_puts_r+0x24>
 8006990:	4621      	mov	r1, r4
 8006992:	4628      	mov	r0, r5
 8006994:	f000 f8aa 	bl	8006aec <__swsetup_r>
 8006998:	2800      	cmp	r0, #0
 800699a:	d0dd      	beq.n	8006958 <_puts_r+0x40>
 800699c:	f04f 35ff 	mov.w	r5, #4294967295
 80069a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069a2:	07da      	lsls	r2, r3, #31
 80069a4:	d405      	bmi.n	80069b2 <_puts_r+0x9a>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	059b      	lsls	r3, r3, #22
 80069aa:	d402      	bmi.n	80069b2 <_puts_r+0x9a>
 80069ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ae:	f001 f941 	bl	8007c34 <__retarget_lock_release_recursive>
 80069b2:	4628      	mov	r0, r5
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da04      	bge.n	80069c4 <_puts_r+0xac>
 80069ba:	69a2      	ldr	r2, [r4, #24]
 80069bc:	429a      	cmp	r2, r3
 80069be:	dc06      	bgt.n	80069ce <_puts_r+0xb6>
 80069c0:	290a      	cmp	r1, #10
 80069c2:	d004      	beq.n	80069ce <_puts_r+0xb6>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	6022      	str	r2, [r4, #0]
 80069ca:	7019      	strb	r1, [r3, #0]
 80069cc:	e7c5      	b.n	800695a <_puts_r+0x42>
 80069ce:	4622      	mov	r2, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 f839 	bl	8006a48 <__swbuf_r>
 80069d6:	3001      	adds	r0, #1
 80069d8:	d1bf      	bne.n	800695a <_puts_r+0x42>
 80069da:	e7df      	b.n	800699c <_puts_r+0x84>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	250a      	movs	r5, #10
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	6022      	str	r2, [r4, #0]
 80069e4:	701d      	strb	r5, [r3, #0]
 80069e6:	e7db      	b.n	80069a0 <_puts_r+0x88>
 80069e8:	08008c14 	.word	0x08008c14
 80069ec:	08008c34 	.word	0x08008c34
 80069f0:	08008bf4 	.word	0x08008bf4

080069f4 <puts>:
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <puts+0xc>)
 80069f6:	4601      	mov	r1, r0
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	f7ff bf8d 	b.w	8006918 <_puts_r>
 80069fe:	bf00      	nop
 8006a00:	2000000c 	.word	0x2000000c

08006a04 <_sbrk_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d06      	ldr	r5, [pc, #24]	; (8006a20 <_sbrk_r+0x1c>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f7fb fa84 	bl	8001f1c <_sbrk>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_sbrk_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_sbrk_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	2000041c 	.word	0x2000041c

08006a24 <strncmp>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	b16a      	cbz	r2, 8006a44 <strncmp+0x20>
 8006a28:	3901      	subs	r1, #1
 8006a2a:	1884      	adds	r4, r0, r2
 8006a2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006a30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d103      	bne.n	8006a40 <strncmp+0x1c>
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d001      	beq.n	8006a40 <strncmp+0x1c>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f5      	bne.n	8006a2c <strncmp+0x8>
 8006a40:	1a98      	subs	r0, r3, r2
 8006a42:	bd10      	pop	{r4, pc}
 8006a44:	4610      	mov	r0, r2
 8006a46:	e7fc      	b.n	8006a42 <strncmp+0x1e>

08006a48 <__swbuf_r>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	460e      	mov	r6, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	4605      	mov	r5, r0
 8006a50:	b118      	cbz	r0, 8006a5a <__swbuf_r+0x12>
 8006a52:	6983      	ldr	r3, [r0, #24]
 8006a54:	b90b      	cbnz	r3, 8006a5a <__swbuf_r+0x12>
 8006a56:	f001 f849 	bl	8007aec <__sinit>
 8006a5a:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <__swbuf_r+0x98>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	d12b      	bne.n	8006ab8 <__swbuf_r+0x70>
 8006a60:	686c      	ldr	r4, [r5, #4]
 8006a62:	69a3      	ldr	r3, [r4, #24]
 8006a64:	60a3      	str	r3, [r4, #8]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	071a      	lsls	r2, r3, #28
 8006a6a:	d52f      	bpl.n	8006acc <__swbuf_r+0x84>
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	b36b      	cbz	r3, 8006acc <__swbuf_r+0x84>
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	1ac0      	subs	r0, r0, r3
 8006a76:	6963      	ldr	r3, [r4, #20]
 8006a78:	b2f6      	uxtb	r6, r6
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	4637      	mov	r7, r6
 8006a7e:	dc04      	bgt.n	8006a8a <__swbuf_r+0x42>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 ff9e 	bl	80079c4 <_fflush_r>
 8006a88:	bb30      	cbnz	r0, 8006ad8 <__swbuf_r+0x90>
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	60a3      	str	r3, [r4, #8]
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	701e      	strb	r6, [r3, #0]
 8006a98:	6963      	ldr	r3, [r4, #20]
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	4283      	cmp	r3, r0
 8006a9e:	d004      	beq.n	8006aaa <__swbuf_r+0x62>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	07db      	lsls	r3, r3, #31
 8006aa4:	d506      	bpl.n	8006ab4 <__swbuf_r+0x6c>
 8006aa6:	2e0a      	cmp	r6, #10
 8006aa8:	d104      	bne.n	8006ab4 <__swbuf_r+0x6c>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 ff89 	bl	80079c4 <_fflush_r>
 8006ab2:	b988      	cbnz	r0, 8006ad8 <__swbuf_r+0x90>
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <__swbuf_r+0x9c>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d101      	bne.n	8006ac2 <__swbuf_r+0x7a>
 8006abe:	68ac      	ldr	r4, [r5, #8]
 8006ac0:	e7cf      	b.n	8006a62 <__swbuf_r+0x1a>
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <__swbuf_r+0xa0>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	bf08      	it	eq
 8006ac8:	68ec      	ldreq	r4, [r5, #12]
 8006aca:	e7ca      	b.n	8006a62 <__swbuf_r+0x1a>
 8006acc:	4621      	mov	r1, r4
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 f80c 	bl	8006aec <__swsetup_r>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d0cb      	beq.n	8006a70 <__swbuf_r+0x28>
 8006ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8006adc:	e7ea      	b.n	8006ab4 <__swbuf_r+0x6c>
 8006ade:	bf00      	nop
 8006ae0:	08008c14 	.word	0x08008c14
 8006ae4:	08008c34 	.word	0x08008c34
 8006ae8:	08008bf4 	.word	0x08008bf4

08006aec <__swsetup_r>:
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <__swsetup_r+0xcc>)
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	681d      	ldr	r5, [r3, #0]
 8006af2:	4606      	mov	r6, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	b125      	cbz	r5, 8006b02 <__swsetup_r+0x16>
 8006af8:	69ab      	ldr	r3, [r5, #24]
 8006afa:	b913      	cbnz	r3, 8006b02 <__swsetup_r+0x16>
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 fff5 	bl	8007aec <__sinit>
 8006b02:	4b2e      	ldr	r3, [pc, #184]	; (8006bbc <__swsetup_r+0xd0>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d10f      	bne.n	8006b28 <__swsetup_r+0x3c>
 8006b08:	686c      	ldr	r4, [r5, #4]
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b10:	0719      	lsls	r1, r3, #28
 8006b12:	d42c      	bmi.n	8006b6e <__swsetup_r+0x82>
 8006b14:	06dd      	lsls	r5, r3, #27
 8006b16:	d411      	bmi.n	8006b3c <__swsetup_r+0x50>
 8006b18:	2309      	movs	r3, #9
 8006b1a:	6033      	str	r3, [r6, #0]
 8006b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	f04f 30ff 	mov.w	r0, #4294967295
 8006b26:	e03e      	b.n	8006ba6 <__swsetup_r+0xba>
 8006b28:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <__swsetup_r+0xd4>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d101      	bne.n	8006b32 <__swsetup_r+0x46>
 8006b2e:	68ac      	ldr	r4, [r5, #8]
 8006b30:	e7eb      	b.n	8006b0a <__swsetup_r+0x1e>
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <__swsetup_r+0xd8>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	bf08      	it	eq
 8006b38:	68ec      	ldreq	r4, [r5, #12]
 8006b3a:	e7e6      	b.n	8006b0a <__swsetup_r+0x1e>
 8006b3c:	0758      	lsls	r0, r3, #29
 8006b3e:	d512      	bpl.n	8006b66 <__swsetup_r+0x7a>
 8006b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b42:	b141      	cbz	r1, 8006b56 <__swsetup_r+0x6a>
 8006b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b48:	4299      	cmp	r1, r3
 8006b4a:	d002      	beq.n	8006b52 <__swsetup_r+0x66>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff f9b7 	bl	8005ec0 <_free_r>
 8006b52:	2300      	movs	r3, #0
 8006b54:	6363      	str	r3, [r4, #52]	; 0x34
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b5c:	81a3      	strh	r3, [r4, #12]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f043 0308 	orr.w	r3, r3, #8
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	b94b      	cbnz	r3, 8006b86 <__swsetup_r+0x9a>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7c:	d003      	beq.n	8006b86 <__swsetup_r+0x9a>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4630      	mov	r0, r6
 8006b82:	f001 f87d 	bl	8007c80 <__smakebuf_r>
 8006b86:	89a0      	ldrh	r0, [r4, #12]
 8006b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b8c:	f010 0301 	ands.w	r3, r0, #1
 8006b90:	d00a      	beq.n	8006ba8 <__swsetup_r+0xbc>
 8006b92:	2300      	movs	r3, #0
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6963      	ldr	r3, [r4, #20]
 8006b98:	425b      	negs	r3, r3
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b943      	cbnz	r3, 8006bb2 <__swsetup_r+0xc6>
 8006ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ba4:	d1ba      	bne.n	8006b1c <__swsetup_r+0x30>
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	0781      	lsls	r1, r0, #30
 8006baa:	bf58      	it	pl
 8006bac:	6963      	ldrpl	r3, [r4, #20]
 8006bae:	60a3      	str	r3, [r4, #8]
 8006bb0:	e7f4      	b.n	8006b9c <__swsetup_r+0xb0>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e7f7      	b.n	8006ba6 <__swsetup_r+0xba>
 8006bb6:	bf00      	nop
 8006bb8:	2000000c 	.word	0x2000000c
 8006bbc:	08008c14 	.word	0x08008c14
 8006bc0:	08008c34 	.word	0x08008c34
 8006bc4:	08008bf4 	.word	0x08008bf4

08006bc8 <quorem>:
 8006bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	6903      	ldr	r3, [r0, #16]
 8006bce:	690c      	ldr	r4, [r1, #16]
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	f2c0 8081 	blt.w	8006cda <quorem+0x112>
 8006bd8:	3c01      	subs	r4, #1
 8006bda:	f101 0814 	add.w	r8, r1, #20
 8006bde:	f100 0514 	add.w	r5, r0, #20
 8006be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006bf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c00:	d331      	bcc.n	8006c66 <quorem+0x9e>
 8006c02:	f04f 0e00 	mov.w	lr, #0
 8006c06:	4640      	mov	r0, r8
 8006c08:	46ac      	mov	ip, r5
 8006c0a:	46f2      	mov	sl, lr
 8006c0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c10:	b293      	uxth	r3, r2
 8006c12:	fb06 e303 	mla	r3, r6, r3, lr
 8006c16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c20:	0c12      	lsrs	r2, r2, #16
 8006c22:	f8dc a000 	ldr.w	sl, [ip]
 8006c26:	fb06 e202 	mla	r2, r6, r2, lr
 8006c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8006c2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c32:	fa1f fa82 	uxth.w	sl, r2
 8006c36:	f8dc 2000 	ldr.w	r2, [ip]
 8006c3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c48:	4581      	cmp	r9, r0
 8006c4a:	f84c 3b04 	str.w	r3, [ip], #4
 8006c4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c52:	d2db      	bcs.n	8006c0c <quorem+0x44>
 8006c54:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c58:	b92b      	cbnz	r3, 8006c66 <quorem+0x9e>
 8006c5a:	9b01      	ldr	r3, [sp, #4]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	429d      	cmp	r5, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	d32e      	bcc.n	8006cc2 <quorem+0xfa>
 8006c64:	613c      	str	r4, [r7, #16]
 8006c66:	4638      	mov	r0, r7
 8006c68:	f001 fae2 	bl	8008230 <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	db24      	blt.n	8006cba <quorem+0xf2>
 8006c70:	3601      	adds	r6, #1
 8006c72:	4628      	mov	r0, r5
 8006c74:	f04f 0c00 	mov.w	ip, #0
 8006c78:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c7c:	f8d0 e000 	ldr.w	lr, [r0]
 8006c80:	b293      	uxth	r3, r2
 8006c82:	ebac 0303 	sub.w	r3, ip, r3
 8006c86:	0c12      	lsrs	r2, r2, #16
 8006c88:	fa13 f38e 	uxtah	r3, r3, lr
 8006c8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9a:	45c1      	cmp	r9, r8
 8006c9c:	f840 3b04 	str.w	r3, [r0], #4
 8006ca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ca4:	d2e8      	bcs.n	8006c78 <quorem+0xb0>
 8006ca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cae:	b922      	cbnz	r2, 8006cba <quorem+0xf2>
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	429d      	cmp	r5, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	d30a      	bcc.n	8006cce <quorem+0x106>
 8006cb8:	613c      	str	r4, [r7, #16]
 8006cba:	4630      	mov	r0, r6
 8006cbc:	b003      	add	sp, #12
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d1cc      	bne.n	8006c64 <quorem+0x9c>
 8006cca:	3c01      	subs	r4, #1
 8006ccc:	e7c7      	b.n	8006c5e <quorem+0x96>
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	2a00      	cmp	r2, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <quorem+0xf0>
 8006cd6:	3c01      	subs	r4, #1
 8006cd8:	e7eb      	b.n	8006cb2 <quorem+0xea>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e7ee      	b.n	8006cbc <quorem+0xf4>
	...

08006ce0 <_dtoa_r>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	ed2d 8b02 	vpush	{d8}
 8006ce8:	ec57 6b10 	vmov	r6, r7, d0
 8006cec:	b095      	sub	sp, #84	; 0x54
 8006cee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cf4:	9105      	str	r1, [sp, #20]
 8006cf6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d00:	b975      	cbnz	r5, 8006d20 <_dtoa_r+0x40>
 8006d02:	2010      	movs	r0, #16
 8006d04:	f7ff f8c4 	bl	8005e90 <malloc>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d0c:	b920      	cbnz	r0, 8006d18 <_dtoa_r+0x38>
 8006d0e:	4bb2      	ldr	r3, [pc, #712]	; (8006fd8 <_dtoa_r+0x2f8>)
 8006d10:	21ea      	movs	r1, #234	; 0xea
 8006d12:	48b2      	ldr	r0, [pc, #712]	; (8006fdc <_dtoa_r+0x2fc>)
 8006d14:	f001 fd4a 	bl	80087ac <__assert_func>
 8006d18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d1c:	6005      	str	r5, [r0, #0]
 8006d1e:	60c5      	str	r5, [r0, #12]
 8006d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	b151      	cbz	r1, 8006d3c <_dtoa_r+0x5c>
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	604a      	str	r2, [r1, #4]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4093      	lsls	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f001 f83f 	bl	8007db4 <_Bfree>
 8006d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	1e3b      	subs	r3, r7, #0
 8006d3e:	bfb9      	ittee	lt
 8006d40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	9303      	strlt	r3, [sp, #12]
 8006d46:	2300      	movge	r3, #0
 8006d48:	f8c8 3000 	strge.w	r3, [r8]
 8006d4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d50:	4ba3      	ldr	r3, [pc, #652]	; (8006fe0 <_dtoa_r+0x300>)
 8006d52:	bfbc      	itt	lt
 8006d54:	2201      	movlt	r2, #1
 8006d56:	f8c8 2000 	strlt.w	r2, [r8]
 8006d5a:	ea33 0309 	bics.w	r3, r3, r9
 8006d5e:	d11b      	bne.n	8006d98 <_dtoa_r+0xb8>
 8006d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d62:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d6c:	4333      	orrs	r3, r6
 8006d6e:	f000 857a 	beq.w	8007866 <_dtoa_r+0xb86>
 8006d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d74:	b963      	cbnz	r3, 8006d90 <_dtoa_r+0xb0>
 8006d76:	4b9b      	ldr	r3, [pc, #620]	; (8006fe4 <_dtoa_r+0x304>)
 8006d78:	e024      	b.n	8006dc4 <_dtoa_r+0xe4>
 8006d7a:	4b9b      	ldr	r3, [pc, #620]	; (8006fe8 <_dtoa_r+0x308>)
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	9800      	ldr	r0, [sp, #0]
 8006d86:	b015      	add	sp, #84	; 0x54
 8006d88:	ecbd 8b02 	vpop	{d8}
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d90:	4b94      	ldr	r3, [pc, #592]	; (8006fe4 <_dtoa_r+0x304>)
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	3303      	adds	r3, #3
 8006d96:	e7f3      	b.n	8006d80 <_dtoa_r+0xa0>
 8006d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	ec51 0b17 	vmov	r0, r1, d7
 8006da2:	2300      	movs	r3, #0
 8006da4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006da8:	f7f9 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dac:	4680      	mov	r8, r0
 8006dae:	b158      	cbz	r0, 8006dc8 <_dtoa_r+0xe8>
 8006db0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006db2:	2301      	movs	r3, #1
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8551 	beq.w	8007860 <_dtoa_r+0xb80>
 8006dbe:	488b      	ldr	r0, [pc, #556]	; (8006fec <_dtoa_r+0x30c>)
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	1e43      	subs	r3, r0, #1
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	e7dd      	b.n	8006d84 <_dtoa_r+0xa4>
 8006dc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006dcc:	aa12      	add	r2, sp, #72	; 0x48
 8006dce:	a913      	add	r1, sp, #76	; 0x4c
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f001 fad1 	bl	8008378 <__d2b>
 8006dd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dda:	4683      	mov	fp, r0
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	d07c      	beq.n	8006eda <_dtoa_r+0x1fa>
 8006de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006dee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006df2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dfa:	4b7d      	ldr	r3, [pc, #500]	; (8006ff0 <_dtoa_r+0x310>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fa41 	bl	8000288 <__aeabi_dsub>
 8006e06:	a36e      	add	r3, pc, #440	; (adr r3, 8006fc0 <_dtoa_r+0x2e0>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 fbf4 	bl	80005f8 <__aeabi_dmul>
 8006e10:	a36d      	add	r3, pc, #436	; (adr r3, 8006fc8 <_dtoa_r+0x2e8>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fa39 	bl	800028c <__adddf3>
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	460f      	mov	r7, r1
 8006e20:	f7f9 fb80 	bl	8000524 <__aeabi_i2d>
 8006e24:	a36a      	add	r3, pc, #424	; (adr r3, 8006fd0 <_dtoa_r+0x2f0>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fbe5 	bl	80005f8 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 fa29 	bl	800028c <__adddf3>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	f7f9 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8006e42:	2200      	movs	r2, #0
 8006e44:	4682      	mov	sl, r0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe46 	bl	8000adc <__aeabi_dcmplt>
 8006e50:	b148      	cbz	r0, 8006e66 <_dtoa_r+0x186>
 8006e52:	4650      	mov	r0, sl
 8006e54:	f7f9 fb66 	bl	8000524 <__aeabi_i2d>
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	f7f9 fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e60:	b908      	cbnz	r0, 8006e66 <_dtoa_r+0x186>
 8006e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e66:	f1ba 0f16 	cmp.w	sl, #22
 8006e6a:	d854      	bhi.n	8006f16 <_dtoa_r+0x236>
 8006e6c:	4b61      	ldr	r3, [pc, #388]	; (8006ff4 <_dtoa_r+0x314>)
 8006e6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e7a:	f7f9 fe2f 	bl	8000adc <__aeabi_dcmplt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d04b      	beq.n	8006f1a <_dtoa_r+0x23a>
 8006e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e86:	2300      	movs	r3, #0
 8006e88:	930e      	str	r3, [sp, #56]	; 0x38
 8006e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e8c:	1b5d      	subs	r5, r3, r5
 8006e8e:	1e6b      	subs	r3, r5, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	bf43      	ittte	mi
 8006e94:	2300      	movmi	r3, #0
 8006e96:	f1c5 0801 	rsbmi	r8, r5, #1
 8006e9a:	9304      	strmi	r3, [sp, #16]
 8006e9c:	f04f 0800 	movpl.w	r8, #0
 8006ea0:	f1ba 0f00 	cmp.w	sl, #0
 8006ea4:	db3b      	blt.n	8006f1e <_dtoa_r+0x23e>
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006eac:	4453      	add	r3, sl
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9306      	str	r3, [sp, #24]
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	d869      	bhi.n	8006f8e <_dtoa_r+0x2ae>
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	bfc4      	itt	gt
 8006ebe:	3b04      	subgt	r3, #4
 8006ec0:	9305      	strgt	r3, [sp, #20]
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ec8:	bfcc      	ite	gt
 8006eca:	2500      	movgt	r5, #0
 8006ecc:	2501      	movle	r5, #1
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d869      	bhi.n	8006fa6 <_dtoa_r+0x2c6>
 8006ed2:	e8df f003 	tbb	[pc, r3]
 8006ed6:	4e2c      	.short	0x4e2c
 8006ed8:	5a4c      	.short	0x5a4c
 8006eda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ede:	441d      	add	r5, r3
 8006ee0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	bfc1      	itttt	gt
 8006ee8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006eec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ef0:	fa09 f303 	lslgt.w	r3, r9, r3
 8006ef4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ef8:	bfda      	itte	le
 8006efa:	f1c3 0320 	rsble	r3, r3, #32
 8006efe:	fa06 f003 	lslle.w	r0, r6, r3
 8006f02:	4318      	orrgt	r0, r3
 8006f04:	f7f9 fafe 	bl	8000504 <__aeabi_ui2d>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f10:	3d01      	subs	r5, #1
 8006f12:	9310      	str	r3, [sp, #64]	; 0x40
 8006f14:	e771      	b.n	8006dfa <_dtoa_r+0x11a>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e7b6      	b.n	8006e88 <_dtoa_r+0x1a8>
 8006f1a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f1c:	e7b5      	b.n	8006e8a <_dtoa_r+0x1aa>
 8006f1e:	f1ca 0300 	rsb	r3, sl, #0
 8006f22:	9306      	str	r3, [sp, #24]
 8006f24:	2300      	movs	r3, #0
 8006f26:	eba8 080a 	sub.w	r8, r8, sl
 8006f2a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f2c:	e7c2      	b.n	8006eb4 <_dtoa_r+0x1d4>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9308      	str	r3, [sp, #32]
 8006f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dc39      	bgt.n	8006fac <_dtoa_r+0x2cc>
 8006f38:	f04f 0901 	mov.w	r9, #1
 8006f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f40:	464b      	mov	r3, r9
 8006f42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f48:	2200      	movs	r2, #0
 8006f4a:	6042      	str	r2, [r0, #4]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	f102 0614 	add.w	r6, r2, #20
 8006f52:	429e      	cmp	r6, r3
 8006f54:	6841      	ldr	r1, [r0, #4]
 8006f56:	d92f      	bls.n	8006fb8 <_dtoa_r+0x2d8>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 feeb 	bl	8007d34 <_Balloc>
 8006f5e:	9000      	str	r0, [sp, #0]
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d14b      	bne.n	8006ffc <_dtoa_r+0x31c>
 8006f64:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <_dtoa_r+0x318>)
 8006f66:	4602      	mov	r2, r0
 8006f68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f6c:	e6d1      	b.n	8006d12 <_dtoa_r+0x32>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e7de      	b.n	8006f30 <_dtoa_r+0x250>
 8006f72:	2300      	movs	r3, #0
 8006f74:	9308      	str	r3, [sp, #32]
 8006f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f78:	eb0a 0903 	add.w	r9, sl, r3
 8006f7c:	f109 0301 	add.w	r3, r9, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	bfb8      	it	lt
 8006f86:	2301      	movlt	r3, #1
 8006f88:	e7dd      	b.n	8006f46 <_dtoa_r+0x266>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e7f2      	b.n	8006f74 <_dtoa_r+0x294>
 8006f8e:	2501      	movs	r5, #1
 8006f90:	2300      	movs	r3, #0
 8006f92:	9305      	str	r3, [sp, #20]
 8006f94:	9508      	str	r5, [sp, #32]
 8006f96:	f04f 39ff 	mov.w	r9, #4294967295
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fa0:	2312      	movs	r3, #18
 8006fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa4:	e7cf      	b.n	8006f46 <_dtoa_r+0x266>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	e7f4      	b.n	8006f96 <_dtoa_r+0x2b6>
 8006fac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	e7c6      	b.n	8006f46 <_dtoa_r+0x266>
 8006fb8:	3101      	adds	r1, #1
 8006fba:	6041      	str	r1, [r0, #4]
 8006fbc:	0052      	lsls	r2, r2, #1
 8006fbe:	e7c6      	b.n	8006f4e <_dtoa_r+0x26e>
 8006fc0:	636f4361 	.word	0x636f4361
 8006fc4:	3fd287a7 	.word	0x3fd287a7
 8006fc8:	8b60c8b3 	.word	0x8b60c8b3
 8006fcc:	3fc68a28 	.word	0x3fc68a28
 8006fd0:	509f79fb 	.word	0x509f79fb
 8006fd4:	3fd34413 	.word	0x3fd34413
 8006fd8:	08008b6d 	.word	0x08008b6d
 8006fdc:	08008b84 	.word	0x08008b84
 8006fe0:	7ff00000 	.word	0x7ff00000
 8006fe4:	08008b69 	.word	0x08008b69
 8006fe8:	08008b60 	.word	0x08008b60
 8006fec:	08008b3d 	.word	0x08008b3d
 8006ff0:	3ff80000 	.word	0x3ff80000
 8006ff4:	08008ce0 	.word	0x08008ce0
 8006ff8:	08008be3 	.word	0x08008be3
 8006ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffe:	9a00      	ldr	r2, [sp, #0]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	2b0e      	cmp	r3, #14
 8007006:	f200 80ad 	bhi.w	8007164 <_dtoa_r+0x484>
 800700a:	2d00      	cmp	r5, #0
 800700c:	f000 80aa 	beq.w	8007164 <_dtoa_r+0x484>
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	dd36      	ble.n	8007084 <_dtoa_r+0x3a4>
 8007016:	4ac3      	ldr	r2, [pc, #780]	; (8007324 <_dtoa_r+0x644>)
 8007018:	f00a 030f 	and.w	r3, sl, #15
 800701c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007020:	ed93 7b00 	vldr	d7, [r3]
 8007024:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007028:	ea4f 172a 	mov.w	r7, sl, asr #4
 800702c:	eeb0 8a47 	vmov.f32	s16, s14
 8007030:	eef0 8a67 	vmov.f32	s17, s15
 8007034:	d016      	beq.n	8007064 <_dtoa_r+0x384>
 8007036:	4bbc      	ldr	r3, [pc, #752]	; (8007328 <_dtoa_r+0x648>)
 8007038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800703c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007040:	f7f9 fc04 	bl	800084c <__aeabi_ddiv>
 8007044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007048:	f007 070f 	and.w	r7, r7, #15
 800704c:	2503      	movs	r5, #3
 800704e:	4eb6      	ldr	r6, [pc, #728]	; (8007328 <_dtoa_r+0x648>)
 8007050:	b957      	cbnz	r7, 8007068 <_dtoa_r+0x388>
 8007052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007056:	ec53 2b18 	vmov	r2, r3, d8
 800705a:	f7f9 fbf7 	bl	800084c <__aeabi_ddiv>
 800705e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007062:	e029      	b.n	80070b8 <_dtoa_r+0x3d8>
 8007064:	2502      	movs	r5, #2
 8007066:	e7f2      	b.n	800704e <_dtoa_r+0x36e>
 8007068:	07f9      	lsls	r1, r7, #31
 800706a:	d508      	bpl.n	800707e <_dtoa_r+0x39e>
 800706c:	ec51 0b18 	vmov	r0, r1, d8
 8007070:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_dmul>
 8007078:	ec41 0b18 	vmov	d8, r0, r1
 800707c:	3501      	adds	r5, #1
 800707e:	107f      	asrs	r7, r7, #1
 8007080:	3608      	adds	r6, #8
 8007082:	e7e5      	b.n	8007050 <_dtoa_r+0x370>
 8007084:	f000 80a6 	beq.w	80071d4 <_dtoa_r+0x4f4>
 8007088:	f1ca 0600 	rsb	r6, sl, #0
 800708c:	4ba5      	ldr	r3, [pc, #660]	; (8007324 <_dtoa_r+0x644>)
 800708e:	4fa6      	ldr	r7, [pc, #664]	; (8007328 <_dtoa_r+0x648>)
 8007090:	f006 020f 	and.w	r2, r6, #15
 8007094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070a0:	f7f9 faaa 	bl	80005f8 <__aeabi_dmul>
 80070a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a8:	1136      	asrs	r6, r6, #4
 80070aa:	2300      	movs	r3, #0
 80070ac:	2502      	movs	r5, #2
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	f040 8085 	bne.w	80071be <_dtoa_r+0x4de>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1d2      	bne.n	800705e <_dtoa_r+0x37e>
 80070b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 808c 	beq.w	80071d8 <_dtoa_r+0x4f8>
 80070c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070c4:	4b99      	ldr	r3, [pc, #612]	; (800732c <_dtoa_r+0x64c>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fd06 	bl	8000adc <__aeabi_dcmplt>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f000 8081 	beq.w	80071d8 <_dtoa_r+0x4f8>
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d07d      	beq.n	80071d8 <_dtoa_r+0x4f8>
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	dd3c      	ble.n	800715c <_dtoa_r+0x47c>
 80070e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	2200      	movs	r2, #0
 80070ea:	4b91      	ldr	r3, [pc, #580]	; (8007330 <_dtoa_r+0x650>)
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f8:	3501      	adds	r5, #1
 80070fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80070fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007102:	4628      	mov	r0, r5
 8007104:	f7f9 fa0e 	bl	8000524 <__aeabi_i2d>
 8007108:	4632      	mov	r2, r6
 800710a:	463b      	mov	r3, r7
 800710c:	f7f9 fa74 	bl	80005f8 <__aeabi_dmul>
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <_dtoa_r+0x654>)
 8007112:	2200      	movs	r2, #0
 8007114:	f7f9 f8ba 	bl	800028c <__adddf3>
 8007118:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800711c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007120:	9303      	str	r3, [sp, #12]
 8007122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007124:	2b00      	cmp	r3, #0
 8007126:	d15c      	bne.n	80071e2 <_dtoa_r+0x502>
 8007128:	4b83      	ldr	r3, [pc, #524]	; (8007338 <_dtoa_r+0x658>)
 800712a:	2200      	movs	r2, #0
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f7f9 f8aa 	bl	8000288 <__aeabi_dsub>
 8007134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	f7f9 fcec 	bl	8000b18 <__aeabi_dcmpgt>
 8007140:	2800      	cmp	r0, #0
 8007142:	f040 8296 	bne.w	8007672 <_dtoa_r+0x992>
 8007146:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800714a:	4630      	mov	r0, r6
 800714c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 fcc3 	bl	8000adc <__aeabi_dcmplt>
 8007156:	2800      	cmp	r0, #0
 8007158:	f040 8288 	bne.w	800766c <_dtoa_r+0x98c>
 800715c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007164:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007166:	2b00      	cmp	r3, #0
 8007168:	f2c0 8158 	blt.w	800741c <_dtoa_r+0x73c>
 800716c:	f1ba 0f0e 	cmp.w	sl, #14
 8007170:	f300 8154 	bgt.w	800741c <_dtoa_r+0x73c>
 8007174:	4b6b      	ldr	r3, [pc, #428]	; (8007324 <_dtoa_r+0x644>)
 8007176:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800717a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	f280 80e3 	bge.w	800734c <_dtoa_r+0x66c>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	f300 80df 	bgt.w	800734c <_dtoa_r+0x66c>
 800718e:	f040 826d 	bne.w	800766c <_dtoa_r+0x98c>
 8007192:	4b69      	ldr	r3, [pc, #420]	; (8007338 <_dtoa_r+0x658>)
 8007194:	2200      	movs	r2, #0
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 fa2d 	bl	80005f8 <__aeabi_dmul>
 800719e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071a2:	f7f9 fcaf 	bl	8000b04 <__aeabi_dcmpge>
 80071a6:	9e01      	ldr	r6, [sp, #4]
 80071a8:	4637      	mov	r7, r6
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f040 8243 	bne.w	8007636 <_dtoa_r+0x956>
 80071b0:	9d00      	ldr	r5, [sp, #0]
 80071b2:	2331      	movs	r3, #49	; 0x31
 80071b4:	f805 3b01 	strb.w	r3, [r5], #1
 80071b8:	f10a 0a01 	add.w	sl, sl, #1
 80071bc:	e23f      	b.n	800763e <_dtoa_r+0x95e>
 80071be:	07f2      	lsls	r2, r6, #31
 80071c0:	d505      	bpl.n	80071ce <_dtoa_r+0x4ee>
 80071c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c6:	f7f9 fa17 	bl	80005f8 <__aeabi_dmul>
 80071ca:	3501      	adds	r5, #1
 80071cc:	2301      	movs	r3, #1
 80071ce:	1076      	asrs	r6, r6, #1
 80071d0:	3708      	adds	r7, #8
 80071d2:	e76c      	b.n	80070ae <_dtoa_r+0x3ce>
 80071d4:	2502      	movs	r5, #2
 80071d6:	e76f      	b.n	80070b8 <_dtoa_r+0x3d8>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	f8cd a01c 	str.w	sl, [sp, #28]
 80071de:	930c      	str	r3, [sp, #48]	; 0x30
 80071e0:	e78d      	b.n	80070fe <_dtoa_r+0x41e>
 80071e2:	9900      	ldr	r1, [sp, #0]
 80071e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e8:	4b4e      	ldr	r3, [pc, #312]	; (8007324 <_dtoa_r+0x644>)
 80071ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071ee:	4401      	add	r1, r0
 80071f0:	9102      	str	r1, [sp, #8]
 80071f2:	9908      	ldr	r1, [sp, #32]
 80071f4:	eeb0 8a47 	vmov.f32	s16, s14
 80071f8:	eef0 8a67 	vmov.f32	s17, s15
 80071fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007200:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007204:	2900      	cmp	r1, #0
 8007206:	d045      	beq.n	8007294 <_dtoa_r+0x5b4>
 8007208:	494c      	ldr	r1, [pc, #304]	; (800733c <_dtoa_r+0x65c>)
 800720a:	2000      	movs	r0, #0
 800720c:	f7f9 fb1e 	bl	800084c <__aeabi_ddiv>
 8007210:	ec53 2b18 	vmov	r2, r3, d8
 8007214:	f7f9 f838 	bl	8000288 <__aeabi_dsub>
 8007218:	9d00      	ldr	r5, [sp, #0]
 800721a:	ec41 0b18 	vmov	d8, r0, r1
 800721e:	4639      	mov	r1, r7
 8007220:	4630      	mov	r0, r6
 8007222:	f7f9 fc99 	bl	8000b58 <__aeabi_d2iz>
 8007226:	900c      	str	r0, [sp, #48]	; 0x30
 8007228:	f7f9 f97c 	bl	8000524 <__aeabi_i2d>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f9 f828 	bl	8000288 <__aeabi_dsub>
 8007238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800723a:	3330      	adds	r3, #48	; 0x30
 800723c:	f805 3b01 	strb.w	r3, [r5], #1
 8007240:	ec53 2b18 	vmov	r2, r3, d8
 8007244:	4606      	mov	r6, r0
 8007246:	460f      	mov	r7, r1
 8007248:	f7f9 fc48 	bl	8000adc <__aeabi_dcmplt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d165      	bne.n	800731c <_dtoa_r+0x63c>
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	4935      	ldr	r1, [pc, #212]	; (800732c <_dtoa_r+0x64c>)
 8007256:	2000      	movs	r0, #0
 8007258:	f7f9 f816 	bl	8000288 <__aeabi_dsub>
 800725c:	ec53 2b18 	vmov	r2, r3, d8
 8007260:	f7f9 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	f040 80b9 	bne.w	80073dc <_dtoa_r+0x6fc>
 800726a:	9b02      	ldr	r3, [sp, #8]
 800726c:	429d      	cmp	r5, r3
 800726e:	f43f af75 	beq.w	800715c <_dtoa_r+0x47c>
 8007272:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <_dtoa_r+0x650>)
 8007274:	ec51 0b18 	vmov	r0, r1, d8
 8007278:	2200      	movs	r2, #0
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <_dtoa_r+0x650>)
 8007280:	ec41 0b18 	vmov	d8, r0, r1
 8007284:	2200      	movs	r2, #0
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	e7c4      	b.n	800721e <_dtoa_r+0x53e>
 8007294:	ec51 0b17 	vmov	r0, r1, d7
 8007298:	f7f9 f9ae 	bl	80005f8 <__aeabi_dmul>
 800729c:	9b02      	ldr	r3, [sp, #8]
 800729e:	9d00      	ldr	r5, [sp, #0]
 80072a0:	930c      	str	r3, [sp, #48]	; 0x30
 80072a2:	ec41 0b18 	vmov	d8, r0, r1
 80072a6:	4639      	mov	r1, r7
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7f9 fc55 	bl	8000b58 <__aeabi_d2iz>
 80072ae:	9011      	str	r0, [sp, #68]	; 0x44
 80072b0:	f7f9 f938 	bl	8000524 <__aeabi_i2d>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4630      	mov	r0, r6
 80072ba:	4639      	mov	r1, r7
 80072bc:	f7f8 ffe4 	bl	8000288 <__aeabi_dsub>
 80072c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c2:	3330      	adds	r3, #48	; 0x30
 80072c4:	f805 3b01 	strb.w	r3, [r5], #1
 80072c8:	9b02      	ldr	r3, [sp, #8]
 80072ca:	429d      	cmp	r5, r3
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	d134      	bne.n	8007340 <_dtoa_r+0x660>
 80072d6:	4b19      	ldr	r3, [pc, #100]	; (800733c <_dtoa_r+0x65c>)
 80072d8:	ec51 0b18 	vmov	r0, r1, d8
 80072dc:	f7f8 ffd6 	bl	800028c <__adddf3>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d175      	bne.n	80073dc <_dtoa_r+0x6fc>
 80072f0:	ec53 2b18 	vmov	r2, r3, d8
 80072f4:	4911      	ldr	r1, [pc, #68]	; (800733c <_dtoa_r+0x65c>)
 80072f6:	2000      	movs	r0, #0
 80072f8:	f7f8 ffc6 	bl	8000288 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f9 fbea 	bl	8000adc <__aeabi_dcmplt>
 8007308:	2800      	cmp	r0, #0
 800730a:	f43f af27 	beq.w	800715c <_dtoa_r+0x47c>
 800730e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007310:	1e6b      	subs	r3, r5, #1
 8007312:	930c      	str	r3, [sp, #48]	; 0x30
 8007314:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d0f8      	beq.n	800730e <_dtoa_r+0x62e>
 800731c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007320:	e04a      	b.n	80073b8 <_dtoa_r+0x6d8>
 8007322:	bf00      	nop
 8007324:	08008ce0 	.word	0x08008ce0
 8007328:	08008cb8 	.word	0x08008cb8
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	40240000 	.word	0x40240000
 8007334:	401c0000 	.word	0x401c0000
 8007338:	40140000 	.word	0x40140000
 800733c:	3fe00000 	.word	0x3fe00000
 8007340:	4baf      	ldr	r3, [pc, #700]	; (8007600 <_dtoa_r+0x920>)
 8007342:	f7f9 f959 	bl	80005f8 <__aeabi_dmul>
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	e7ac      	b.n	80072a6 <_dtoa_r+0x5c6>
 800734c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007350:	9d00      	ldr	r5, [sp, #0]
 8007352:	4642      	mov	r2, r8
 8007354:	464b      	mov	r3, r9
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 fa77 	bl	800084c <__aeabi_ddiv>
 800735e:	f7f9 fbfb 	bl	8000b58 <__aeabi_d2iz>
 8007362:	9002      	str	r0, [sp, #8]
 8007364:	f7f9 f8de 	bl	8000524 <__aeabi_i2d>
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	f7f9 f944 	bl	80005f8 <__aeabi_dmul>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f8 ff86 	bl	8000288 <__aeabi_dsub>
 800737c:	9e02      	ldr	r6, [sp, #8]
 800737e:	9f01      	ldr	r7, [sp, #4]
 8007380:	3630      	adds	r6, #48	; 0x30
 8007382:	f805 6b01 	strb.w	r6, [r5], #1
 8007386:	9e00      	ldr	r6, [sp, #0]
 8007388:	1bae      	subs	r6, r5, r6
 800738a:	42b7      	cmp	r7, r6
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	d137      	bne.n	8007402 <_dtoa_r+0x722>
 8007392:	f7f8 ff7b 	bl	800028c <__adddf3>
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	f7f9 fbbb 	bl	8000b18 <__aeabi_dcmpgt>
 80073a2:	b9c8      	cbnz	r0, 80073d8 <_dtoa_r+0x6f8>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	4630      	mov	r0, r6
 80073aa:	4639      	mov	r1, r7
 80073ac:	f7f9 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b0:	b110      	cbz	r0, 80073b8 <_dtoa_r+0x6d8>
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	07d9      	lsls	r1, r3, #31
 80073b6:	d40f      	bmi.n	80073d8 <_dtoa_r+0x6f8>
 80073b8:	4620      	mov	r0, r4
 80073ba:	4659      	mov	r1, fp
 80073bc:	f000 fcfa 	bl	8007db4 <_Bfree>
 80073c0:	2300      	movs	r3, #0
 80073c2:	702b      	strb	r3, [r5, #0]
 80073c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c6:	f10a 0001 	add.w	r0, sl, #1
 80073ca:	6018      	str	r0, [r3, #0]
 80073cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f43f acd8 	beq.w	8006d84 <_dtoa_r+0xa4>
 80073d4:	601d      	str	r5, [r3, #0]
 80073d6:	e4d5      	b.n	8006d84 <_dtoa_r+0xa4>
 80073d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80073dc:	462b      	mov	r3, r5
 80073de:	461d      	mov	r5, r3
 80073e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073e4:	2a39      	cmp	r2, #57	; 0x39
 80073e6:	d108      	bne.n	80073fa <_dtoa_r+0x71a>
 80073e8:	9a00      	ldr	r2, [sp, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d1f7      	bne.n	80073de <_dtoa_r+0x6fe>
 80073ee:	9a07      	ldr	r2, [sp, #28]
 80073f0:	9900      	ldr	r1, [sp, #0]
 80073f2:	3201      	adds	r2, #1
 80073f4:	9207      	str	r2, [sp, #28]
 80073f6:	2230      	movs	r2, #48	; 0x30
 80073f8:	700a      	strb	r2, [r1, #0]
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	3201      	adds	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e78c      	b.n	800731c <_dtoa_r+0x63c>
 8007402:	4b7f      	ldr	r3, [pc, #508]	; (8007600 <_dtoa_r+0x920>)
 8007404:	2200      	movs	r2, #0
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	2200      	movs	r2, #0
 800740c:	2300      	movs	r3, #0
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	f7f9 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007416:	2800      	cmp	r0, #0
 8007418:	d09b      	beq.n	8007352 <_dtoa_r+0x672>
 800741a:	e7cd      	b.n	80073b8 <_dtoa_r+0x6d8>
 800741c:	9a08      	ldr	r2, [sp, #32]
 800741e:	2a00      	cmp	r2, #0
 8007420:	f000 80c4 	beq.w	80075ac <_dtoa_r+0x8cc>
 8007424:	9a05      	ldr	r2, [sp, #20]
 8007426:	2a01      	cmp	r2, #1
 8007428:	f300 80a8 	bgt.w	800757c <_dtoa_r+0x89c>
 800742c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800742e:	2a00      	cmp	r2, #0
 8007430:	f000 80a0 	beq.w	8007574 <_dtoa_r+0x894>
 8007434:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007438:	9e06      	ldr	r6, [sp, #24]
 800743a:	4645      	mov	r5, r8
 800743c:	9a04      	ldr	r2, [sp, #16]
 800743e:	2101      	movs	r1, #1
 8007440:	441a      	add	r2, r3
 8007442:	4620      	mov	r0, r4
 8007444:	4498      	add	r8, r3
 8007446:	9204      	str	r2, [sp, #16]
 8007448:	f000 fd70 	bl	8007f2c <__i2b>
 800744c:	4607      	mov	r7, r0
 800744e:	2d00      	cmp	r5, #0
 8007450:	dd0b      	ble.n	800746a <_dtoa_r+0x78a>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dd08      	ble.n	800746a <_dtoa_r+0x78a>
 8007458:	42ab      	cmp	r3, r5
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	bfa8      	it	ge
 800745e:	462b      	movge	r3, r5
 8007460:	eba8 0803 	sub.w	r8, r8, r3
 8007464:	1aed      	subs	r5, r5, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	b1fb      	cbz	r3, 80074ae <_dtoa_r+0x7ce>
 800746e:	9b08      	ldr	r3, [sp, #32]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 809f 	beq.w	80075b4 <_dtoa_r+0x8d4>
 8007476:	2e00      	cmp	r6, #0
 8007478:	dd11      	ble.n	800749e <_dtoa_r+0x7be>
 800747a:	4639      	mov	r1, r7
 800747c:	4632      	mov	r2, r6
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fe10 	bl	80080a4 <__pow5mult>
 8007484:	465a      	mov	r2, fp
 8007486:	4601      	mov	r1, r0
 8007488:	4607      	mov	r7, r0
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fd64 	bl	8007f58 <__multiply>
 8007490:	4659      	mov	r1, fp
 8007492:	9007      	str	r0, [sp, #28]
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fc8d 	bl	8007db4 <_Bfree>
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	469b      	mov	fp, r3
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	1b9a      	subs	r2, r3, r6
 80074a2:	d004      	beq.n	80074ae <_dtoa_r+0x7ce>
 80074a4:	4659      	mov	r1, fp
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fdfc 	bl	80080a4 <__pow5mult>
 80074ac:	4683      	mov	fp, r0
 80074ae:	2101      	movs	r1, #1
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fd3b 	bl	8007f2c <__i2b>
 80074b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	4606      	mov	r6, r0
 80074bc:	dd7c      	ble.n	80075b8 <_dtoa_r+0x8d8>
 80074be:	461a      	mov	r2, r3
 80074c0:	4601      	mov	r1, r0
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fdee 	bl	80080a4 <__pow5mult>
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	4606      	mov	r6, r0
 80074ce:	dd76      	ble.n	80075be <_dtoa_r+0x8de>
 80074d0:	2300      	movs	r3, #0
 80074d2:	9306      	str	r3, [sp, #24]
 80074d4:	6933      	ldr	r3, [r6, #16]
 80074d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074da:	6918      	ldr	r0, [r3, #16]
 80074dc:	f000 fcd6 	bl	8007e8c <__hi0bits>
 80074e0:	f1c0 0020 	rsb	r0, r0, #32
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	4418      	add	r0, r3
 80074e8:	f010 001f 	ands.w	r0, r0, #31
 80074ec:	f000 8086 	beq.w	80075fc <_dtoa_r+0x91c>
 80074f0:	f1c0 0320 	rsb	r3, r0, #32
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	dd7f      	ble.n	80075f8 <_dtoa_r+0x918>
 80074f8:	f1c0 001c 	rsb	r0, r0, #28
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	4403      	add	r3, r0
 8007500:	4480      	add	r8, r0
 8007502:	4405      	add	r5, r0
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	dd05      	ble.n	8007518 <_dtoa_r+0x838>
 800750c:	4659      	mov	r1, fp
 800750e:	4642      	mov	r2, r8
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fe21 	bl	8008158 <__lshift>
 8007516:	4683      	mov	fp, r0
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	dd05      	ble.n	800752a <_dtoa_r+0x84a>
 800751e:	4631      	mov	r1, r6
 8007520:	461a      	mov	r2, r3
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fe18 	bl	8008158 <__lshift>
 8007528:	4606      	mov	r6, r0
 800752a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800752c:	2b00      	cmp	r3, #0
 800752e:	d069      	beq.n	8007604 <_dtoa_r+0x924>
 8007530:	4631      	mov	r1, r6
 8007532:	4658      	mov	r0, fp
 8007534:	f000 fe7c 	bl	8008230 <__mcmp>
 8007538:	2800      	cmp	r0, #0
 800753a:	da63      	bge.n	8007604 <_dtoa_r+0x924>
 800753c:	2300      	movs	r3, #0
 800753e:	4659      	mov	r1, fp
 8007540:	220a      	movs	r2, #10
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fc58 	bl	8007df8 <__multadd>
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800754e:	4683      	mov	fp, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 818f 	beq.w	8007874 <_dtoa_r+0xb94>
 8007556:	4639      	mov	r1, r7
 8007558:	2300      	movs	r3, #0
 800755a:	220a      	movs	r2, #10
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fc4b 	bl	8007df8 <__multadd>
 8007562:	f1b9 0f00 	cmp.w	r9, #0
 8007566:	4607      	mov	r7, r0
 8007568:	f300 808e 	bgt.w	8007688 <_dtoa_r+0x9a8>
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	2b02      	cmp	r3, #2
 8007570:	dc50      	bgt.n	8007614 <_dtoa_r+0x934>
 8007572:	e089      	b.n	8007688 <_dtoa_r+0x9a8>
 8007574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800757a:	e75d      	b.n	8007438 <_dtoa_r+0x758>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	1e5e      	subs	r6, r3, #1
 8007580:	9b06      	ldr	r3, [sp, #24]
 8007582:	42b3      	cmp	r3, r6
 8007584:	bfbf      	itttt	lt
 8007586:	9b06      	ldrlt	r3, [sp, #24]
 8007588:	9606      	strlt	r6, [sp, #24]
 800758a:	1af2      	sublt	r2, r6, r3
 800758c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800758e:	bfb6      	itet	lt
 8007590:	189b      	addlt	r3, r3, r2
 8007592:	1b9e      	subge	r6, r3, r6
 8007594:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	bfb8      	it	lt
 800759a:	2600      	movlt	r6, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	bfb5      	itete	lt
 80075a0:	eba8 0503 	sublt.w	r5, r8, r3
 80075a4:	9b01      	ldrge	r3, [sp, #4]
 80075a6:	2300      	movlt	r3, #0
 80075a8:	4645      	movge	r5, r8
 80075aa:	e747      	b.n	800743c <_dtoa_r+0x75c>
 80075ac:	9e06      	ldr	r6, [sp, #24]
 80075ae:	9f08      	ldr	r7, [sp, #32]
 80075b0:	4645      	mov	r5, r8
 80075b2:	e74c      	b.n	800744e <_dtoa_r+0x76e>
 80075b4:	9a06      	ldr	r2, [sp, #24]
 80075b6:	e775      	b.n	80074a4 <_dtoa_r+0x7c4>
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	dc18      	bgt.n	80075f0 <_dtoa_r+0x910>
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	b9b3      	cbnz	r3, 80075f0 <_dtoa_r+0x910>
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c8:	b9a3      	cbnz	r3, 80075f4 <_dtoa_r+0x914>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	0d1b      	lsrs	r3, r3, #20
 80075d2:	051b      	lsls	r3, r3, #20
 80075d4:	b12b      	cbz	r3, 80075e2 <_dtoa_r+0x902>
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	3301      	adds	r3, #1
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	f108 0801 	add.w	r8, r8, #1
 80075e0:	2301      	movs	r3, #1
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f47f af74 	bne.w	80074d4 <_dtoa_r+0x7f4>
 80075ec:	2001      	movs	r0, #1
 80075ee:	e779      	b.n	80074e4 <_dtoa_r+0x804>
 80075f0:	2300      	movs	r3, #0
 80075f2:	e7f6      	b.n	80075e2 <_dtoa_r+0x902>
 80075f4:	9b02      	ldr	r3, [sp, #8]
 80075f6:	e7f4      	b.n	80075e2 <_dtoa_r+0x902>
 80075f8:	d085      	beq.n	8007506 <_dtoa_r+0x826>
 80075fa:	4618      	mov	r0, r3
 80075fc:	301c      	adds	r0, #28
 80075fe:	e77d      	b.n	80074fc <_dtoa_r+0x81c>
 8007600:	40240000 	.word	0x40240000
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc38      	bgt.n	800767c <_dtoa_r+0x99c>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	2b02      	cmp	r3, #2
 800760e:	dd35      	ble.n	800767c <_dtoa_r+0x99c>
 8007610:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	d10d      	bne.n	8007636 <_dtoa_r+0x956>
 800761a:	4631      	mov	r1, r6
 800761c:	464b      	mov	r3, r9
 800761e:	2205      	movs	r2, #5
 8007620:	4620      	mov	r0, r4
 8007622:	f000 fbe9 	bl	8007df8 <__multadd>
 8007626:	4601      	mov	r1, r0
 8007628:	4606      	mov	r6, r0
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fe00 	bl	8008230 <__mcmp>
 8007630:	2800      	cmp	r0, #0
 8007632:	f73f adbd 	bgt.w	80071b0 <_dtoa_r+0x4d0>
 8007636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007638:	9d00      	ldr	r5, [sp, #0]
 800763a:	ea6f 0a03 	mvn.w	sl, r3
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	4631      	mov	r1, r6
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fbb5 	bl	8007db4 <_Bfree>
 800764a:	2f00      	cmp	r7, #0
 800764c:	f43f aeb4 	beq.w	80073b8 <_dtoa_r+0x6d8>
 8007650:	f1b8 0f00 	cmp.w	r8, #0
 8007654:	d005      	beq.n	8007662 <_dtoa_r+0x982>
 8007656:	45b8      	cmp	r8, r7
 8007658:	d003      	beq.n	8007662 <_dtoa_r+0x982>
 800765a:	4641      	mov	r1, r8
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fba9 	bl	8007db4 <_Bfree>
 8007662:	4639      	mov	r1, r7
 8007664:	4620      	mov	r0, r4
 8007666:	f000 fba5 	bl	8007db4 <_Bfree>
 800766a:	e6a5      	b.n	80073b8 <_dtoa_r+0x6d8>
 800766c:	2600      	movs	r6, #0
 800766e:	4637      	mov	r7, r6
 8007670:	e7e1      	b.n	8007636 <_dtoa_r+0x956>
 8007672:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007678:	4637      	mov	r7, r6
 800767a:	e599      	b.n	80071b0 <_dtoa_r+0x4d0>
 800767c:	9b08      	ldr	r3, [sp, #32]
 800767e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80fd 	beq.w	8007882 <_dtoa_r+0xba2>
 8007688:	2d00      	cmp	r5, #0
 800768a:	dd05      	ble.n	8007698 <_dtoa_r+0x9b8>
 800768c:	4639      	mov	r1, r7
 800768e:	462a      	mov	r2, r5
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fd61 	bl	8008158 <__lshift>
 8007696:	4607      	mov	r7, r0
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d05c      	beq.n	8007758 <_dtoa_r+0xa78>
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 fb47 	bl	8007d34 <_Balloc>
 80076a6:	4605      	mov	r5, r0
 80076a8:	b928      	cbnz	r0, 80076b6 <_dtoa_r+0x9d6>
 80076aa:	4b80      	ldr	r3, [pc, #512]	; (80078ac <_dtoa_r+0xbcc>)
 80076ac:	4602      	mov	r2, r0
 80076ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076b2:	f7ff bb2e 	b.w	8006d12 <_dtoa_r+0x32>
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	3202      	adds	r2, #2
 80076ba:	0092      	lsls	r2, r2, #2
 80076bc:	f107 010c 	add.w	r1, r7, #12
 80076c0:	300c      	adds	r0, #12
 80076c2:	f000 fb1d 	bl	8007d00 <memcpy>
 80076c6:	2201      	movs	r2, #1
 80076c8:	4629      	mov	r1, r5
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fd44 	bl	8008158 <__lshift>
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	444b      	add	r3, r9
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	9b02      	ldr	r3, [sp, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	46b8      	mov	r8, r7
 80076e4:	9306      	str	r3, [sp, #24]
 80076e6:	4607      	mov	r7, r0
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	4631      	mov	r1, r6
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4658      	mov	r0, fp
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	f7ff fa69 	bl	8006bc8 <quorem>
 80076f6:	4603      	mov	r3, r0
 80076f8:	3330      	adds	r3, #48	; 0x30
 80076fa:	9004      	str	r0, [sp, #16]
 80076fc:	4641      	mov	r1, r8
 80076fe:	4658      	mov	r0, fp
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	f000 fd95 	bl	8008230 <__mcmp>
 8007706:	463a      	mov	r2, r7
 8007708:	4681      	mov	r9, r0
 800770a:	4631      	mov	r1, r6
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fdab 	bl	8008268 <__mdiff>
 8007712:	68c2      	ldr	r2, [r0, #12]
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	4605      	mov	r5, r0
 8007718:	bb02      	cbnz	r2, 800775c <_dtoa_r+0xa7c>
 800771a:	4601      	mov	r1, r0
 800771c:	4658      	mov	r0, fp
 800771e:	f000 fd87 	bl	8008230 <__mcmp>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	4602      	mov	r2, r0
 8007726:	4629      	mov	r1, r5
 8007728:	4620      	mov	r0, r4
 800772a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800772e:	f000 fb41 	bl	8007db4 <_Bfree>
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007736:	9d01      	ldr	r5, [sp, #4]
 8007738:	ea43 0102 	orr.w	r1, r3, r2
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	430b      	orrs	r3, r1
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	d10d      	bne.n	8007760 <_dtoa_r+0xa80>
 8007744:	2b39      	cmp	r3, #57	; 0x39
 8007746:	d029      	beq.n	800779c <_dtoa_r+0xabc>
 8007748:	f1b9 0f00 	cmp.w	r9, #0
 800774c:	dd01      	ble.n	8007752 <_dtoa_r+0xa72>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	3331      	adds	r3, #49	; 0x31
 8007752:	9a02      	ldr	r2, [sp, #8]
 8007754:	7013      	strb	r3, [r2, #0]
 8007756:	e774      	b.n	8007642 <_dtoa_r+0x962>
 8007758:	4638      	mov	r0, r7
 800775a:	e7b9      	b.n	80076d0 <_dtoa_r+0x9f0>
 800775c:	2201      	movs	r2, #1
 800775e:	e7e2      	b.n	8007726 <_dtoa_r+0xa46>
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	db06      	blt.n	8007774 <_dtoa_r+0xa94>
 8007766:	9905      	ldr	r1, [sp, #20]
 8007768:	ea41 0909 	orr.w	r9, r1, r9
 800776c:	9906      	ldr	r1, [sp, #24]
 800776e:	ea59 0101 	orrs.w	r1, r9, r1
 8007772:	d120      	bne.n	80077b6 <_dtoa_r+0xad6>
 8007774:	2a00      	cmp	r2, #0
 8007776:	ddec      	ble.n	8007752 <_dtoa_r+0xa72>
 8007778:	4659      	mov	r1, fp
 800777a:	2201      	movs	r2, #1
 800777c:	4620      	mov	r0, r4
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	f000 fcea 	bl	8008158 <__lshift>
 8007784:	4631      	mov	r1, r6
 8007786:	4683      	mov	fp, r0
 8007788:	f000 fd52 	bl	8008230 <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	dc02      	bgt.n	8007798 <_dtoa_r+0xab8>
 8007792:	d1de      	bne.n	8007752 <_dtoa_r+0xa72>
 8007794:	07da      	lsls	r2, r3, #31
 8007796:	d5dc      	bpl.n	8007752 <_dtoa_r+0xa72>
 8007798:	2b39      	cmp	r3, #57	; 0x39
 800779a:	d1d8      	bne.n	800774e <_dtoa_r+0xa6e>
 800779c:	9a02      	ldr	r2, [sp, #8]
 800779e:	2339      	movs	r3, #57	; 0x39
 80077a0:	7013      	strb	r3, [r2, #0]
 80077a2:	462b      	mov	r3, r5
 80077a4:	461d      	mov	r5, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077ac:	2a39      	cmp	r2, #57	; 0x39
 80077ae:	d050      	beq.n	8007852 <_dtoa_r+0xb72>
 80077b0:	3201      	adds	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e745      	b.n	8007642 <_dtoa_r+0x962>
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	dd03      	ble.n	80077c2 <_dtoa_r+0xae2>
 80077ba:	2b39      	cmp	r3, #57	; 0x39
 80077bc:	d0ee      	beq.n	800779c <_dtoa_r+0xabc>
 80077be:	3301      	adds	r3, #1
 80077c0:	e7c7      	b.n	8007752 <_dtoa_r+0xa72>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	9907      	ldr	r1, [sp, #28]
 80077c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077ca:	428a      	cmp	r2, r1
 80077cc:	d02a      	beq.n	8007824 <_dtoa_r+0xb44>
 80077ce:	4659      	mov	r1, fp
 80077d0:	2300      	movs	r3, #0
 80077d2:	220a      	movs	r2, #10
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fb0f 	bl	8007df8 <__multadd>
 80077da:	45b8      	cmp	r8, r7
 80077dc:	4683      	mov	fp, r0
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	f04f 020a 	mov.w	r2, #10
 80077e6:	4641      	mov	r1, r8
 80077e8:	4620      	mov	r0, r4
 80077ea:	d107      	bne.n	80077fc <_dtoa_r+0xb1c>
 80077ec:	f000 fb04 	bl	8007df8 <__multadd>
 80077f0:	4680      	mov	r8, r0
 80077f2:	4607      	mov	r7, r0
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	3301      	adds	r3, #1
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	e775      	b.n	80076e8 <_dtoa_r+0xa08>
 80077fc:	f000 fafc 	bl	8007df8 <__multadd>
 8007800:	4639      	mov	r1, r7
 8007802:	4680      	mov	r8, r0
 8007804:	2300      	movs	r3, #0
 8007806:	220a      	movs	r2, #10
 8007808:	4620      	mov	r0, r4
 800780a:	f000 faf5 	bl	8007df8 <__multadd>
 800780e:	4607      	mov	r7, r0
 8007810:	e7f0      	b.n	80077f4 <_dtoa_r+0xb14>
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	9a00      	ldr	r2, [sp, #0]
 8007818:	bfcc      	ite	gt
 800781a:	464d      	movgt	r5, r9
 800781c:	2501      	movle	r5, #1
 800781e:	4415      	add	r5, r2
 8007820:	f04f 0800 	mov.w	r8, #0
 8007824:	4659      	mov	r1, fp
 8007826:	2201      	movs	r2, #1
 8007828:	4620      	mov	r0, r4
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	f000 fc94 	bl	8008158 <__lshift>
 8007830:	4631      	mov	r1, r6
 8007832:	4683      	mov	fp, r0
 8007834:	f000 fcfc 	bl	8008230 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	dcb2      	bgt.n	80077a2 <_dtoa_r+0xac2>
 800783c:	d102      	bne.n	8007844 <_dtoa_r+0xb64>
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	07db      	lsls	r3, r3, #31
 8007842:	d4ae      	bmi.n	80077a2 <_dtoa_r+0xac2>
 8007844:	462b      	mov	r3, r5
 8007846:	461d      	mov	r5, r3
 8007848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800784c:	2a30      	cmp	r2, #48	; 0x30
 800784e:	d0fa      	beq.n	8007846 <_dtoa_r+0xb66>
 8007850:	e6f7      	b.n	8007642 <_dtoa_r+0x962>
 8007852:	9a00      	ldr	r2, [sp, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d1a5      	bne.n	80077a4 <_dtoa_r+0xac4>
 8007858:	f10a 0a01 	add.w	sl, sl, #1
 800785c:	2331      	movs	r3, #49	; 0x31
 800785e:	e779      	b.n	8007754 <_dtoa_r+0xa74>
 8007860:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <_dtoa_r+0xbd0>)
 8007862:	f7ff baaf 	b.w	8006dc4 <_dtoa_r+0xe4>
 8007866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f aa86 	bne.w	8006d7a <_dtoa_r+0x9a>
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <_dtoa_r+0xbd4>)
 8007870:	f7ff baa8 	b.w	8006dc4 <_dtoa_r+0xe4>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	dc03      	bgt.n	8007882 <_dtoa_r+0xba2>
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	2b02      	cmp	r3, #2
 800787e:	f73f aec9 	bgt.w	8007614 <_dtoa_r+0x934>
 8007882:	9d00      	ldr	r5, [sp, #0]
 8007884:	4631      	mov	r1, r6
 8007886:	4658      	mov	r0, fp
 8007888:	f7ff f99e 	bl	8006bc8 <quorem>
 800788c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007890:	f805 3b01 	strb.w	r3, [r5], #1
 8007894:	9a00      	ldr	r2, [sp, #0]
 8007896:	1aaa      	subs	r2, r5, r2
 8007898:	4591      	cmp	r9, r2
 800789a:	ddba      	ble.n	8007812 <_dtoa_r+0xb32>
 800789c:	4659      	mov	r1, fp
 800789e:	2300      	movs	r3, #0
 80078a0:	220a      	movs	r2, #10
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 faa8 	bl	8007df8 <__multadd>
 80078a8:	4683      	mov	fp, r0
 80078aa:	e7eb      	b.n	8007884 <_dtoa_r+0xba4>
 80078ac:	08008be3 	.word	0x08008be3
 80078b0:	08008b3c 	.word	0x08008b3c
 80078b4:	08008b60 	.word	0x08008b60

080078b8 <__sflush_r>:
 80078b8:	898a      	ldrh	r2, [r1, #12]
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	4605      	mov	r5, r0
 80078c0:	0710      	lsls	r0, r2, #28
 80078c2:	460c      	mov	r4, r1
 80078c4:	d458      	bmi.n	8007978 <__sflush_r+0xc0>
 80078c6:	684b      	ldr	r3, [r1, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dc05      	bgt.n	80078d8 <__sflush_r+0x20>
 80078cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dc02      	bgt.n	80078d8 <__sflush_r+0x20>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078da:	2e00      	cmp	r6, #0
 80078dc:	d0f9      	beq.n	80078d2 <__sflush_r+0x1a>
 80078de:	2300      	movs	r3, #0
 80078e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078e4:	682f      	ldr	r7, [r5, #0]
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	d032      	beq.n	8007950 <__sflush_r+0x98>
 80078ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	075a      	lsls	r2, r3, #29
 80078f0:	d505      	bpl.n	80078fe <__sflush_r+0x46>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	1ac0      	subs	r0, r0, r3
 80078f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078f8:	b10b      	cbz	r3, 80078fe <__sflush_r+0x46>
 80078fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078fc:	1ac0      	subs	r0, r0, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	4602      	mov	r2, r0
 8007902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007904:	6a21      	ldr	r1, [r4, #32]
 8007906:	4628      	mov	r0, r5
 8007908:	47b0      	blx	r6
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	d106      	bne.n	800791e <__sflush_r+0x66>
 8007910:	6829      	ldr	r1, [r5, #0]
 8007912:	291d      	cmp	r1, #29
 8007914:	d82c      	bhi.n	8007970 <__sflush_r+0xb8>
 8007916:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <__sflush_r+0x108>)
 8007918:	40ca      	lsrs	r2, r1
 800791a:	07d6      	lsls	r6, r2, #31
 800791c:	d528      	bpl.n	8007970 <__sflush_r+0xb8>
 800791e:	2200      	movs	r2, #0
 8007920:	6062      	str	r2, [r4, #4]
 8007922:	04d9      	lsls	r1, r3, #19
 8007924:	6922      	ldr	r2, [r4, #16]
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	d504      	bpl.n	8007934 <__sflush_r+0x7c>
 800792a:	1c42      	adds	r2, r0, #1
 800792c:	d101      	bne.n	8007932 <__sflush_r+0x7a>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	b903      	cbnz	r3, 8007934 <__sflush_r+0x7c>
 8007932:	6560      	str	r0, [r4, #84]	; 0x54
 8007934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007936:	602f      	str	r7, [r5, #0]
 8007938:	2900      	cmp	r1, #0
 800793a:	d0ca      	beq.n	80078d2 <__sflush_r+0x1a>
 800793c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007940:	4299      	cmp	r1, r3
 8007942:	d002      	beq.n	800794a <__sflush_r+0x92>
 8007944:	4628      	mov	r0, r5
 8007946:	f7fe fabb 	bl	8005ec0 <_free_r>
 800794a:	2000      	movs	r0, #0
 800794c:	6360      	str	r0, [r4, #52]	; 0x34
 800794e:	e7c1      	b.n	80078d4 <__sflush_r+0x1c>
 8007950:	6a21      	ldr	r1, [r4, #32]
 8007952:	2301      	movs	r3, #1
 8007954:	4628      	mov	r0, r5
 8007956:	47b0      	blx	r6
 8007958:	1c41      	adds	r1, r0, #1
 800795a:	d1c7      	bne.n	80078ec <__sflush_r+0x34>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0c4      	beq.n	80078ec <__sflush_r+0x34>
 8007962:	2b1d      	cmp	r3, #29
 8007964:	d001      	beq.n	800796a <__sflush_r+0xb2>
 8007966:	2b16      	cmp	r3, #22
 8007968:	d101      	bne.n	800796e <__sflush_r+0xb6>
 800796a:	602f      	str	r7, [r5, #0]
 800796c:	e7b1      	b.n	80078d2 <__sflush_r+0x1a>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	e7ad      	b.n	80078d4 <__sflush_r+0x1c>
 8007978:	690f      	ldr	r7, [r1, #16]
 800797a:	2f00      	cmp	r7, #0
 800797c:	d0a9      	beq.n	80078d2 <__sflush_r+0x1a>
 800797e:	0793      	lsls	r3, r2, #30
 8007980:	680e      	ldr	r6, [r1, #0]
 8007982:	bf08      	it	eq
 8007984:	694b      	ldreq	r3, [r1, #20]
 8007986:	600f      	str	r7, [r1, #0]
 8007988:	bf18      	it	ne
 800798a:	2300      	movne	r3, #0
 800798c:	eba6 0807 	sub.w	r8, r6, r7
 8007990:	608b      	str	r3, [r1, #8]
 8007992:	f1b8 0f00 	cmp.w	r8, #0
 8007996:	dd9c      	ble.n	80078d2 <__sflush_r+0x1a>
 8007998:	6a21      	ldr	r1, [r4, #32]
 800799a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800799c:	4643      	mov	r3, r8
 800799e:	463a      	mov	r2, r7
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b0      	blx	r6
 80079a4:	2800      	cmp	r0, #0
 80079a6:	dc06      	bgt.n	80079b6 <__sflush_r+0xfe>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e78e      	b.n	80078d4 <__sflush_r+0x1c>
 80079b6:	4407      	add	r7, r0
 80079b8:	eba8 0800 	sub.w	r8, r8, r0
 80079bc:	e7e9      	b.n	8007992 <__sflush_r+0xda>
 80079be:	bf00      	nop
 80079c0:	20400001 	.word	0x20400001

080079c4 <_fflush_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	690b      	ldr	r3, [r1, #16]
 80079c8:	4605      	mov	r5, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	b913      	cbnz	r3, 80079d4 <_fflush_r+0x10>
 80079ce:	2500      	movs	r5, #0
 80079d0:	4628      	mov	r0, r5
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	b118      	cbz	r0, 80079de <_fflush_r+0x1a>
 80079d6:	6983      	ldr	r3, [r0, #24]
 80079d8:	b90b      	cbnz	r3, 80079de <_fflush_r+0x1a>
 80079da:	f000 f887 	bl	8007aec <__sinit>
 80079de:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <_fflush_r+0x6c>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	d11b      	bne.n	8007a1c <_fflush_r+0x58>
 80079e4:	686c      	ldr	r4, [r5, #4]
 80079e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ef      	beq.n	80079ce <_fflush_r+0xa>
 80079ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079f0:	07d0      	lsls	r0, r2, #31
 80079f2:	d404      	bmi.n	80079fe <_fflush_r+0x3a>
 80079f4:	0599      	lsls	r1, r3, #22
 80079f6:	d402      	bmi.n	80079fe <_fflush_r+0x3a>
 80079f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fa:	f000 f91a 	bl	8007c32 <__retarget_lock_acquire_recursive>
 80079fe:	4628      	mov	r0, r5
 8007a00:	4621      	mov	r1, r4
 8007a02:	f7ff ff59 	bl	80078b8 <__sflush_r>
 8007a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a08:	07da      	lsls	r2, r3, #31
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	d4e0      	bmi.n	80079d0 <_fflush_r+0xc>
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	059b      	lsls	r3, r3, #22
 8007a12:	d4dd      	bmi.n	80079d0 <_fflush_r+0xc>
 8007a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a16:	f000 f90d 	bl	8007c34 <__retarget_lock_release_recursive>
 8007a1a:	e7d9      	b.n	80079d0 <_fflush_r+0xc>
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <_fflush_r+0x70>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d101      	bne.n	8007a26 <_fflush_r+0x62>
 8007a22:	68ac      	ldr	r4, [r5, #8]
 8007a24:	e7df      	b.n	80079e6 <_fflush_r+0x22>
 8007a26:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <_fflush_r+0x74>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	bf08      	it	eq
 8007a2c:	68ec      	ldreq	r4, [r5, #12]
 8007a2e:	e7da      	b.n	80079e6 <_fflush_r+0x22>
 8007a30:	08008c14 	.word	0x08008c14
 8007a34:	08008c34 	.word	0x08008c34
 8007a38:	08008bf4 	.word	0x08008bf4

08007a3c <std>:
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	e9c0 3300 	strd	r3, r3, [r0]
 8007a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a4a:	6083      	str	r3, [r0, #8]
 8007a4c:	8181      	strh	r1, [r0, #12]
 8007a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a50:	81c2      	strh	r2, [r0, #14]
 8007a52:	6183      	str	r3, [r0, #24]
 8007a54:	4619      	mov	r1, r3
 8007a56:	2208      	movs	r2, #8
 8007a58:	305c      	adds	r0, #92	; 0x5c
 8007a5a:	f7fe fa29 	bl	8005eb0 <memset>
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <std+0x38>)
 8007a60:	6263      	str	r3, [r4, #36]	; 0x24
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <std+0x3c>)
 8007a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a66:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <std+0x40>)
 8007a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <std+0x44>)
 8007a6c:	6224      	str	r4, [r4, #32]
 8007a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a70:	bd10      	pop	{r4, pc}
 8007a72:	bf00      	nop
 8007a74:	08008701 	.word	0x08008701
 8007a78:	08008723 	.word	0x08008723
 8007a7c:	0800875b 	.word	0x0800875b
 8007a80:	0800877f 	.word	0x0800877f

08007a84 <_cleanup_r>:
 8007a84:	4901      	ldr	r1, [pc, #4]	; (8007a8c <_cleanup_r+0x8>)
 8007a86:	f000 b8af 	b.w	8007be8 <_fwalk_reent>
 8007a8a:	bf00      	nop
 8007a8c:	080079c5 	.word	0x080079c5

08007a90 <__sfmoreglue>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	1e4a      	subs	r2, r1, #1
 8007a94:	2568      	movs	r5, #104	; 0x68
 8007a96:	4355      	muls	r5, r2
 8007a98:	460e      	mov	r6, r1
 8007a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a9e:	f7fe fa5f 	bl	8005f60 <_malloc_r>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	b140      	cbz	r0, 8007ab8 <__sfmoreglue+0x28>
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8007aac:	300c      	adds	r0, #12
 8007aae:	60a0      	str	r0, [r4, #8]
 8007ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ab4:	f7fe f9fc 	bl	8005eb0 <memset>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	bd70      	pop	{r4, r5, r6, pc}

08007abc <__sfp_lock_acquire>:
 8007abc:	4801      	ldr	r0, [pc, #4]	; (8007ac4 <__sfp_lock_acquire+0x8>)
 8007abe:	f000 b8b8 	b.w	8007c32 <__retarget_lock_acquire_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	20000418 	.word	0x20000418

08007ac8 <__sfp_lock_release>:
 8007ac8:	4801      	ldr	r0, [pc, #4]	; (8007ad0 <__sfp_lock_release+0x8>)
 8007aca:	f000 b8b3 	b.w	8007c34 <__retarget_lock_release_recursive>
 8007ace:	bf00      	nop
 8007ad0:	20000418 	.word	0x20000418

08007ad4 <__sinit_lock_acquire>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	; (8007adc <__sinit_lock_acquire+0x8>)
 8007ad6:	f000 b8ac 	b.w	8007c32 <__retarget_lock_acquire_recursive>
 8007ada:	bf00      	nop
 8007adc:	20000413 	.word	0x20000413

08007ae0 <__sinit_lock_release>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	; (8007ae8 <__sinit_lock_release+0x8>)
 8007ae2:	f000 b8a7 	b.w	8007c34 <__retarget_lock_release_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	20000413 	.word	0x20000413

08007aec <__sinit>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4604      	mov	r4, r0
 8007af0:	f7ff fff0 	bl	8007ad4 <__sinit_lock_acquire>
 8007af4:	69a3      	ldr	r3, [r4, #24]
 8007af6:	b11b      	cbz	r3, 8007b00 <__sinit+0x14>
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f7ff bff0 	b.w	8007ae0 <__sinit_lock_release>
 8007b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b04:	6523      	str	r3, [r4, #80]	; 0x50
 8007b06:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <__sinit+0x68>)
 8007b08:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <__sinit+0x6c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	bf04      	itt	eq
 8007b12:	2301      	moveq	r3, #1
 8007b14:	61a3      	streq	r3, [r4, #24]
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f820 	bl	8007b5c <__sfp>
 8007b1c:	6060      	str	r0, [r4, #4]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f81c 	bl	8007b5c <__sfp>
 8007b24:	60a0      	str	r0, [r4, #8]
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 f818 	bl	8007b5c <__sfp>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	60e0      	str	r0, [r4, #12]
 8007b30:	2104      	movs	r1, #4
 8007b32:	6860      	ldr	r0, [r4, #4]
 8007b34:	f7ff ff82 	bl	8007a3c <std>
 8007b38:	68a0      	ldr	r0, [r4, #8]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	2109      	movs	r1, #9
 8007b3e:	f7ff ff7d 	bl	8007a3c <std>
 8007b42:	68e0      	ldr	r0, [r4, #12]
 8007b44:	2202      	movs	r2, #2
 8007b46:	2112      	movs	r1, #18
 8007b48:	f7ff ff78 	bl	8007a3c <std>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	61a3      	str	r3, [r4, #24]
 8007b50:	e7d2      	b.n	8007af8 <__sinit+0xc>
 8007b52:	bf00      	nop
 8007b54:	08008b28 	.word	0x08008b28
 8007b58:	08007a85 	.word	0x08007a85

08007b5c <__sfp>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	4607      	mov	r7, r0
 8007b60:	f7ff ffac 	bl	8007abc <__sfp_lock_acquire>
 8007b64:	4b1e      	ldr	r3, [pc, #120]	; (8007be0 <__sfp+0x84>)
 8007b66:	681e      	ldr	r6, [r3, #0]
 8007b68:	69b3      	ldr	r3, [r6, #24]
 8007b6a:	b913      	cbnz	r3, 8007b72 <__sfp+0x16>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ffbd 	bl	8007aec <__sinit>
 8007b72:	3648      	adds	r6, #72	; 0x48
 8007b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	d503      	bpl.n	8007b84 <__sfp+0x28>
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	b30b      	cbz	r3, 8007bc4 <__sfp+0x68>
 8007b80:	6836      	ldr	r6, [r6, #0]
 8007b82:	e7f7      	b.n	8007b74 <__sfp+0x18>
 8007b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b88:	b9d5      	cbnz	r5, 8007bc0 <__sfp+0x64>
 8007b8a:	4b16      	ldr	r3, [pc, #88]	; (8007be4 <__sfp+0x88>)
 8007b8c:	60e3      	str	r3, [r4, #12]
 8007b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b92:	6665      	str	r5, [r4, #100]	; 0x64
 8007b94:	f000 f84c 	bl	8007c30 <__retarget_lock_init_recursive>
 8007b98:	f7ff ff96 	bl	8007ac8 <__sfp_lock_release>
 8007b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ba4:	6025      	str	r5, [r4, #0]
 8007ba6:	61a5      	str	r5, [r4, #24]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	4629      	mov	r1, r5
 8007bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bb0:	f7fe f97e 	bl	8005eb0 <memset>
 8007bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc0:	3468      	adds	r4, #104	; 0x68
 8007bc2:	e7d9      	b.n	8007b78 <__sfp+0x1c>
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f7ff ff62 	bl	8007a90 <__sfmoreglue>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	6030      	str	r0, [r6, #0]
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d1d5      	bne.n	8007b80 <__sfp+0x24>
 8007bd4:	f7ff ff78 	bl	8007ac8 <__sfp_lock_release>
 8007bd8:	230c      	movs	r3, #12
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	e7ee      	b.n	8007bbc <__sfp+0x60>
 8007bde:	bf00      	nop
 8007be0:	08008b28 	.word	0x08008b28
 8007be4:	ffff0001 	.word	0xffff0001

08007be8 <_fwalk_reent>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4606      	mov	r6, r0
 8007bee:	4688      	mov	r8, r1
 8007bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bf4:	2700      	movs	r7, #0
 8007bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfe:	d505      	bpl.n	8007c0c <_fwalk_reent+0x24>
 8007c00:	6824      	ldr	r4, [r4, #0]
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	d1f7      	bne.n	8007bf6 <_fwalk_reent+0xe>
 8007c06:	4638      	mov	r0, r7
 8007c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0c:	89ab      	ldrh	r3, [r5, #12]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d907      	bls.n	8007c22 <_fwalk_reent+0x3a>
 8007c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c16:	3301      	adds	r3, #1
 8007c18:	d003      	beq.n	8007c22 <_fwalk_reent+0x3a>
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	47c0      	blx	r8
 8007c20:	4307      	orrs	r7, r0
 8007c22:	3568      	adds	r5, #104	; 0x68
 8007c24:	e7e9      	b.n	8007bfa <_fwalk_reent+0x12>
	...

08007c28 <_localeconv_r>:
 8007c28:	4800      	ldr	r0, [pc, #0]	; (8007c2c <_localeconv_r+0x4>)
 8007c2a:	4770      	bx	lr
 8007c2c:	20000160 	.word	0x20000160

08007c30 <__retarget_lock_init_recursive>:
 8007c30:	4770      	bx	lr

08007c32 <__retarget_lock_acquire_recursive>:
 8007c32:	4770      	bx	lr

08007c34 <__retarget_lock_release_recursive>:
 8007c34:	4770      	bx	lr

08007c36 <__swhatbuf_r>:
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	460e      	mov	r6, r1
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	b096      	sub	sp, #88	; 0x58
 8007c42:	4614      	mov	r4, r2
 8007c44:	461d      	mov	r5, r3
 8007c46:	da07      	bge.n	8007c58 <__swhatbuf_r+0x22>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	89b3      	ldrh	r3, [r6, #12]
 8007c4e:	061a      	lsls	r2, r3, #24
 8007c50:	d410      	bmi.n	8007c74 <__swhatbuf_r+0x3e>
 8007c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c56:	e00e      	b.n	8007c76 <__swhatbuf_r+0x40>
 8007c58:	466a      	mov	r2, sp
 8007c5a:	f000 fde7 	bl	800882c <_fstat_r>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	dbf2      	blt.n	8007c48 <__swhatbuf_r+0x12>
 8007c62:	9a01      	ldr	r2, [sp, #4]
 8007c64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c6c:	425a      	negs	r2, r3
 8007c6e:	415a      	adcs	r2, r3
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	e7ee      	b.n	8007c52 <__swhatbuf_r+0x1c>
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	2000      	movs	r0, #0
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	b016      	add	sp, #88	; 0x58
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c80 <__smakebuf_r>:
 8007c80:	898b      	ldrh	r3, [r1, #12]
 8007c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c84:	079d      	lsls	r5, r3, #30
 8007c86:	4606      	mov	r6, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	d507      	bpl.n	8007c9c <__smakebuf_r+0x1c>
 8007c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	2301      	movs	r3, #1
 8007c96:	6163      	str	r3, [r4, #20]
 8007c98:	b002      	add	sp, #8
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	ab01      	add	r3, sp, #4
 8007c9e:	466a      	mov	r2, sp
 8007ca0:	f7ff ffc9 	bl	8007c36 <__swhatbuf_r>
 8007ca4:	9900      	ldr	r1, [sp, #0]
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7fe f959 	bl	8005f60 <_malloc_r>
 8007cae:	b948      	cbnz	r0, 8007cc4 <__smakebuf_r+0x44>
 8007cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb4:	059a      	lsls	r2, r3, #22
 8007cb6:	d4ef      	bmi.n	8007c98 <__smakebuf_r+0x18>
 8007cb8:	f023 0303 	bic.w	r3, r3, #3
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7e3      	b.n	8007c8c <__smakebuf_r+0xc>
 8007cc4:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <__smakebuf_r+0x7c>)
 8007cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	6020      	str	r0, [r4, #0]
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	6163      	str	r3, [r4, #20]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	6120      	str	r0, [r4, #16]
 8007cda:	b15b      	cbz	r3, 8007cf4 <__smakebuf_r+0x74>
 8007cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fdb5 	bl	8008850 <_isatty_r>
 8007ce6:	b128      	cbz	r0, 8007cf4 <__smakebuf_r+0x74>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f023 0303 	bic.w	r3, r3, #3
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	89a0      	ldrh	r0, [r4, #12]
 8007cf6:	4305      	orrs	r5, r0
 8007cf8:	81a5      	strh	r5, [r4, #12]
 8007cfa:	e7cd      	b.n	8007c98 <__smakebuf_r+0x18>
 8007cfc:	08007a85 	.word	0x08007a85

08007d00 <memcpy>:
 8007d00:	440a      	add	r2, r1
 8007d02:	4291      	cmp	r1, r2
 8007d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d08:	d100      	bne.n	8007d0c <memcpy+0xc>
 8007d0a:	4770      	bx	lr
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d1f9      	bne.n	8007d0e <memcpy+0xe>
 8007d1a:	bd10      	pop	{r4, pc}

08007d1c <__malloc_lock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__malloc_lock+0x8>)
 8007d1e:	f7ff bf88 	b.w	8007c32 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	20000414 	.word	0x20000414

08007d28 <__malloc_unlock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__malloc_unlock+0x8>)
 8007d2a:	f7ff bf83 	b.w	8007c34 <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000414 	.word	0x20000414

08007d34 <_Balloc>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	b976      	cbnz	r6, 8007d5c <_Balloc+0x28>
 8007d3e:	2010      	movs	r0, #16
 8007d40:	f7fe f8a6 	bl	8005e90 <malloc>
 8007d44:	4602      	mov	r2, r0
 8007d46:	6260      	str	r0, [r4, #36]	; 0x24
 8007d48:	b920      	cbnz	r0, 8007d54 <_Balloc+0x20>
 8007d4a:	4b18      	ldr	r3, [pc, #96]	; (8007dac <_Balloc+0x78>)
 8007d4c:	4818      	ldr	r0, [pc, #96]	; (8007db0 <_Balloc+0x7c>)
 8007d4e:	2166      	movs	r1, #102	; 0x66
 8007d50:	f000 fd2c 	bl	80087ac <__assert_func>
 8007d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d58:	6006      	str	r6, [r0, #0]
 8007d5a:	60c6      	str	r6, [r0, #12]
 8007d5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d5e:	68f3      	ldr	r3, [r6, #12]
 8007d60:	b183      	cbz	r3, 8007d84 <_Balloc+0x50>
 8007d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d6a:	b9b8      	cbnz	r0, 8007d9c <_Balloc+0x68>
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d72:	1d72      	adds	r2, r6, #5
 8007d74:	0092      	lsls	r2, r2, #2
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fb5a 	bl	8008430 <_calloc_r>
 8007d7c:	b160      	cbz	r0, 8007d98 <_Balloc+0x64>
 8007d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d82:	e00e      	b.n	8007da2 <_Balloc+0x6e>
 8007d84:	2221      	movs	r2, #33	; 0x21
 8007d86:	2104      	movs	r1, #4
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fb51 	bl	8008430 <_calloc_r>
 8007d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d90:	60f0      	str	r0, [r6, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e4      	bne.n	8007d62 <_Balloc+0x2e>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	6802      	ldr	r2, [r0, #0]
 8007d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007da2:	2300      	movs	r3, #0
 8007da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007da8:	e7f7      	b.n	8007d9a <_Balloc+0x66>
 8007daa:	bf00      	nop
 8007dac:	08008b6d 	.word	0x08008b6d
 8007db0:	08008c54 	.word	0x08008c54

08007db4 <_Bfree>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007db8:	4605      	mov	r5, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b976      	cbnz	r6, 8007ddc <_Bfree+0x28>
 8007dbe:	2010      	movs	r0, #16
 8007dc0:	f7fe f866 	bl	8005e90 <malloc>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007dc8:	b920      	cbnz	r0, 8007dd4 <_Bfree+0x20>
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <_Bfree+0x3c>)
 8007dcc:	4809      	ldr	r0, [pc, #36]	; (8007df4 <_Bfree+0x40>)
 8007dce:	218a      	movs	r1, #138	; 0x8a
 8007dd0:	f000 fcec 	bl	80087ac <__assert_func>
 8007dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dd8:	6006      	str	r6, [r0, #0]
 8007dda:	60c6      	str	r6, [r0, #12]
 8007ddc:	b13c      	cbz	r4, 8007dee <_Bfree+0x3a>
 8007dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de0:	6862      	ldr	r2, [r4, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007de8:	6021      	str	r1, [r4, #0]
 8007dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	08008b6d 	.word	0x08008b6d
 8007df4:	08008c54 	.word	0x08008c54

08007df8 <__multadd>:
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	690e      	ldr	r6, [r1, #16]
 8007dfe:	4607      	mov	r7, r0
 8007e00:	4698      	mov	r8, r3
 8007e02:	460c      	mov	r4, r1
 8007e04:	f101 0014 	add.w	r0, r1, #20
 8007e08:	2300      	movs	r3, #0
 8007e0a:	6805      	ldr	r5, [r0, #0]
 8007e0c:	b2a9      	uxth	r1, r5
 8007e0e:	fb02 8101 	mla	r1, r2, r1, r8
 8007e12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e16:	0c2d      	lsrs	r5, r5, #16
 8007e18:	fb02 c505 	mla	r5, r2, r5, ip
 8007e1c:	b289      	uxth	r1, r1
 8007e1e:	3301      	adds	r3, #1
 8007e20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007e24:	429e      	cmp	r6, r3
 8007e26:	f840 1b04 	str.w	r1, [r0], #4
 8007e2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007e2e:	dcec      	bgt.n	8007e0a <__multadd+0x12>
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	d022      	beq.n	8007e7c <__multadd+0x84>
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	dc19      	bgt.n	8007e70 <__multadd+0x78>
 8007e3c:	6861      	ldr	r1, [r4, #4]
 8007e3e:	4638      	mov	r0, r7
 8007e40:	3101      	adds	r1, #1
 8007e42:	f7ff ff77 	bl	8007d34 <_Balloc>
 8007e46:	4605      	mov	r5, r0
 8007e48:	b928      	cbnz	r0, 8007e56 <__multadd+0x5e>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <__multadd+0x8c>)
 8007e4e:	480e      	ldr	r0, [pc, #56]	; (8007e88 <__multadd+0x90>)
 8007e50:	21b5      	movs	r1, #181	; 0xb5
 8007e52:	f000 fcab 	bl	80087ac <__assert_func>
 8007e56:	6922      	ldr	r2, [r4, #16]
 8007e58:	3202      	adds	r2, #2
 8007e5a:	f104 010c 	add.w	r1, r4, #12
 8007e5e:	0092      	lsls	r2, r2, #2
 8007e60:	300c      	adds	r0, #12
 8007e62:	f7ff ff4d 	bl	8007d00 <memcpy>
 8007e66:	4621      	mov	r1, r4
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff ffa3 	bl	8007db4 <_Bfree>
 8007e6e:	462c      	mov	r4, r5
 8007e70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007e74:	3601      	adds	r6, #1
 8007e76:	f8c3 8014 	str.w	r8, [r3, #20]
 8007e7a:	6126      	str	r6, [r4, #16]
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e82:	bf00      	nop
 8007e84:	08008be3 	.word	0x08008be3
 8007e88:	08008c54 	.word	0x08008c54

08007e8c <__hi0bits>:
 8007e8c:	0c03      	lsrs	r3, r0, #16
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	b9d3      	cbnz	r3, 8007ec8 <__hi0bits+0x3c>
 8007e92:	0400      	lsls	r0, r0, #16
 8007e94:	2310      	movs	r3, #16
 8007e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e9a:	bf04      	itt	eq
 8007e9c:	0200      	lsleq	r0, r0, #8
 8007e9e:	3308      	addeq	r3, #8
 8007ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ea4:	bf04      	itt	eq
 8007ea6:	0100      	lsleq	r0, r0, #4
 8007ea8:	3304      	addeq	r3, #4
 8007eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007eae:	bf04      	itt	eq
 8007eb0:	0080      	lsleq	r0, r0, #2
 8007eb2:	3302      	addeq	r3, #2
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	db05      	blt.n	8007ec4 <__hi0bits+0x38>
 8007eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ebc:	f103 0301 	add.w	r3, r3, #1
 8007ec0:	bf08      	it	eq
 8007ec2:	2320      	moveq	r3, #32
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4770      	bx	lr
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e7e4      	b.n	8007e96 <__hi0bits+0xa>

08007ecc <__lo0bits>:
 8007ecc:	6803      	ldr	r3, [r0, #0]
 8007ece:	f013 0207 	ands.w	r2, r3, #7
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	d00b      	beq.n	8007eee <__lo0bits+0x22>
 8007ed6:	07da      	lsls	r2, r3, #31
 8007ed8:	d424      	bmi.n	8007f24 <__lo0bits+0x58>
 8007eda:	0798      	lsls	r0, r3, #30
 8007edc:	bf49      	itett	mi
 8007ede:	085b      	lsrmi	r3, r3, #1
 8007ee0:	089b      	lsrpl	r3, r3, #2
 8007ee2:	2001      	movmi	r0, #1
 8007ee4:	600b      	strmi	r3, [r1, #0]
 8007ee6:	bf5c      	itt	pl
 8007ee8:	600b      	strpl	r3, [r1, #0]
 8007eea:	2002      	movpl	r0, #2
 8007eec:	4770      	bx	lr
 8007eee:	b298      	uxth	r0, r3
 8007ef0:	b9b0      	cbnz	r0, 8007f20 <__lo0bits+0x54>
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	2010      	movs	r0, #16
 8007ef6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007efa:	bf04      	itt	eq
 8007efc:	0a1b      	lsreq	r3, r3, #8
 8007efe:	3008      	addeq	r0, #8
 8007f00:	071a      	lsls	r2, r3, #28
 8007f02:	bf04      	itt	eq
 8007f04:	091b      	lsreq	r3, r3, #4
 8007f06:	3004      	addeq	r0, #4
 8007f08:	079a      	lsls	r2, r3, #30
 8007f0a:	bf04      	itt	eq
 8007f0c:	089b      	lsreq	r3, r3, #2
 8007f0e:	3002      	addeq	r0, #2
 8007f10:	07da      	lsls	r2, r3, #31
 8007f12:	d403      	bmi.n	8007f1c <__lo0bits+0x50>
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	f100 0001 	add.w	r0, r0, #1
 8007f1a:	d005      	beq.n	8007f28 <__lo0bits+0x5c>
 8007f1c:	600b      	str	r3, [r1, #0]
 8007f1e:	4770      	bx	lr
 8007f20:	4610      	mov	r0, r2
 8007f22:	e7e8      	b.n	8007ef6 <__lo0bits+0x2a>
 8007f24:	2000      	movs	r0, #0
 8007f26:	4770      	bx	lr
 8007f28:	2020      	movs	r0, #32
 8007f2a:	4770      	bx	lr

08007f2c <__i2b>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	460c      	mov	r4, r1
 8007f30:	2101      	movs	r1, #1
 8007f32:	f7ff feff 	bl	8007d34 <_Balloc>
 8007f36:	4602      	mov	r2, r0
 8007f38:	b928      	cbnz	r0, 8007f46 <__i2b+0x1a>
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <__i2b+0x24>)
 8007f3c:	4805      	ldr	r0, [pc, #20]	; (8007f54 <__i2b+0x28>)
 8007f3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f42:	f000 fc33 	bl	80087ac <__assert_func>
 8007f46:	2301      	movs	r3, #1
 8007f48:	6144      	str	r4, [r0, #20]
 8007f4a:	6103      	str	r3, [r0, #16]
 8007f4c:	bd10      	pop	{r4, pc}
 8007f4e:	bf00      	nop
 8007f50:	08008be3 	.word	0x08008be3
 8007f54:	08008c54 	.word	0x08008c54

08007f58 <__multiply>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	690a      	ldr	r2, [r1, #16]
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	bfb8      	it	lt
 8007f66:	460b      	movlt	r3, r1
 8007f68:	460d      	mov	r5, r1
 8007f6a:	bfbc      	itt	lt
 8007f6c:	4625      	movlt	r5, r4
 8007f6e:	461c      	movlt	r4, r3
 8007f70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f78:	68ab      	ldr	r3, [r5, #8]
 8007f7a:	6869      	ldr	r1, [r5, #4]
 8007f7c:	eb0a 0709 	add.w	r7, sl, r9
 8007f80:	42bb      	cmp	r3, r7
 8007f82:	b085      	sub	sp, #20
 8007f84:	bfb8      	it	lt
 8007f86:	3101      	addlt	r1, #1
 8007f88:	f7ff fed4 	bl	8007d34 <_Balloc>
 8007f8c:	b930      	cbnz	r0, 8007f9c <__multiply+0x44>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b42      	ldr	r3, [pc, #264]	; (800809c <__multiply+0x144>)
 8007f92:	4843      	ldr	r0, [pc, #268]	; (80080a0 <__multiply+0x148>)
 8007f94:	f240 115d 	movw	r1, #349	; 0x15d
 8007f98:	f000 fc08 	bl	80087ac <__assert_func>
 8007f9c:	f100 0614 	add.w	r6, r0, #20
 8007fa0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007fa4:	4633      	mov	r3, r6
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4543      	cmp	r3, r8
 8007faa:	d31e      	bcc.n	8007fea <__multiply+0x92>
 8007fac:	f105 0c14 	add.w	ip, r5, #20
 8007fb0:	f104 0314 	add.w	r3, r4, #20
 8007fb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007fb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007fbc:	9202      	str	r2, [sp, #8]
 8007fbe:	ebac 0205 	sub.w	r2, ip, r5
 8007fc2:	3a15      	subs	r2, #21
 8007fc4:	f022 0203 	bic.w	r2, r2, #3
 8007fc8:	3204      	adds	r2, #4
 8007fca:	f105 0115 	add.w	r1, r5, #21
 8007fce:	458c      	cmp	ip, r1
 8007fd0:	bf38      	it	cc
 8007fd2:	2204      	movcc	r2, #4
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9a02      	ldr	r2, [sp, #8]
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d808      	bhi.n	8007ff0 <__multiply+0x98>
 8007fde:	2f00      	cmp	r7, #0
 8007fe0:	dc55      	bgt.n	800808e <__multiply+0x136>
 8007fe2:	6107      	str	r7, [r0, #16]
 8007fe4:	b005      	add	sp, #20
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	f843 2b04 	str.w	r2, [r3], #4
 8007fee:	e7db      	b.n	8007fa8 <__multiply+0x50>
 8007ff0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ff4:	f1ba 0f00 	cmp.w	sl, #0
 8007ff8:	d020      	beq.n	800803c <__multiply+0xe4>
 8007ffa:	f105 0e14 	add.w	lr, r5, #20
 8007ffe:	46b1      	mov	r9, r6
 8008000:	2200      	movs	r2, #0
 8008002:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008006:	f8d9 b000 	ldr.w	fp, [r9]
 800800a:	b2a1      	uxth	r1, r4
 800800c:	fa1f fb8b 	uxth.w	fp, fp
 8008010:	fb0a b101 	mla	r1, sl, r1, fp
 8008014:	4411      	add	r1, r2
 8008016:	f8d9 2000 	ldr.w	r2, [r9]
 800801a:	0c24      	lsrs	r4, r4, #16
 800801c:	0c12      	lsrs	r2, r2, #16
 800801e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008022:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008026:	b289      	uxth	r1, r1
 8008028:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800802c:	45f4      	cmp	ip, lr
 800802e:	f849 1b04 	str.w	r1, [r9], #4
 8008032:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008036:	d8e4      	bhi.n	8008002 <__multiply+0xaa>
 8008038:	9901      	ldr	r1, [sp, #4]
 800803a:	5072      	str	r2, [r6, r1]
 800803c:	9a03      	ldr	r2, [sp, #12]
 800803e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008042:	3304      	adds	r3, #4
 8008044:	f1b9 0f00 	cmp.w	r9, #0
 8008048:	d01f      	beq.n	800808a <__multiply+0x132>
 800804a:	6834      	ldr	r4, [r6, #0]
 800804c:	f105 0114 	add.w	r1, r5, #20
 8008050:	46b6      	mov	lr, r6
 8008052:	f04f 0a00 	mov.w	sl, #0
 8008056:	880a      	ldrh	r2, [r1, #0]
 8008058:	f8be b002 	ldrh.w	fp, [lr, #2]
 800805c:	fb09 b202 	mla	r2, r9, r2, fp
 8008060:	4492      	add	sl, r2
 8008062:	b2a4      	uxth	r4, r4
 8008064:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008068:	f84e 4b04 	str.w	r4, [lr], #4
 800806c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008070:	f8be 2000 	ldrh.w	r2, [lr]
 8008074:	0c24      	lsrs	r4, r4, #16
 8008076:	fb09 2404 	mla	r4, r9, r4, r2
 800807a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800807e:	458c      	cmp	ip, r1
 8008080:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008084:	d8e7      	bhi.n	8008056 <__multiply+0xfe>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	50b4      	str	r4, [r6, r2]
 800808a:	3604      	adds	r6, #4
 800808c:	e7a3      	b.n	8007fd6 <__multiply+0x7e>
 800808e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1a5      	bne.n	8007fe2 <__multiply+0x8a>
 8008096:	3f01      	subs	r7, #1
 8008098:	e7a1      	b.n	8007fde <__multiply+0x86>
 800809a:	bf00      	nop
 800809c:	08008be3 	.word	0x08008be3
 80080a0:	08008c54 	.word	0x08008c54

080080a4 <__pow5mult>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4615      	mov	r5, r2
 80080aa:	f012 0203 	ands.w	r2, r2, #3
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	d007      	beq.n	80080c4 <__pow5mult+0x20>
 80080b4:	4c25      	ldr	r4, [pc, #148]	; (800814c <__pow5mult+0xa8>)
 80080b6:	3a01      	subs	r2, #1
 80080b8:	2300      	movs	r3, #0
 80080ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080be:	f7ff fe9b 	bl	8007df8 <__multadd>
 80080c2:	4607      	mov	r7, r0
 80080c4:	10ad      	asrs	r5, r5, #2
 80080c6:	d03d      	beq.n	8008144 <__pow5mult+0xa0>
 80080c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080ca:	b97c      	cbnz	r4, 80080ec <__pow5mult+0x48>
 80080cc:	2010      	movs	r0, #16
 80080ce:	f7fd fedf 	bl	8005e90 <malloc>
 80080d2:	4602      	mov	r2, r0
 80080d4:	6270      	str	r0, [r6, #36]	; 0x24
 80080d6:	b928      	cbnz	r0, 80080e4 <__pow5mult+0x40>
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <__pow5mult+0xac>)
 80080da:	481e      	ldr	r0, [pc, #120]	; (8008154 <__pow5mult+0xb0>)
 80080dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080e0:	f000 fb64 	bl	80087ac <__assert_func>
 80080e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080e8:	6004      	str	r4, [r0, #0]
 80080ea:	60c4      	str	r4, [r0, #12]
 80080ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080f4:	b94c      	cbnz	r4, 800810a <__pow5mult+0x66>
 80080f6:	f240 2171 	movw	r1, #625	; 0x271
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff ff16 	bl	8007f2c <__i2b>
 8008100:	2300      	movs	r3, #0
 8008102:	f8c8 0008 	str.w	r0, [r8, #8]
 8008106:	4604      	mov	r4, r0
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	f04f 0900 	mov.w	r9, #0
 800810e:	07eb      	lsls	r3, r5, #31
 8008110:	d50a      	bpl.n	8008128 <__pow5mult+0x84>
 8008112:	4639      	mov	r1, r7
 8008114:	4622      	mov	r2, r4
 8008116:	4630      	mov	r0, r6
 8008118:	f7ff ff1e 	bl	8007f58 <__multiply>
 800811c:	4639      	mov	r1, r7
 800811e:	4680      	mov	r8, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff fe47 	bl	8007db4 <_Bfree>
 8008126:	4647      	mov	r7, r8
 8008128:	106d      	asrs	r5, r5, #1
 800812a:	d00b      	beq.n	8008144 <__pow5mult+0xa0>
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	b938      	cbnz	r0, 8008140 <__pow5mult+0x9c>
 8008130:	4622      	mov	r2, r4
 8008132:	4621      	mov	r1, r4
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ff0f 	bl	8007f58 <__multiply>
 800813a:	6020      	str	r0, [r4, #0]
 800813c:	f8c0 9000 	str.w	r9, [r0]
 8008140:	4604      	mov	r4, r0
 8008142:	e7e4      	b.n	800810e <__pow5mult+0x6a>
 8008144:	4638      	mov	r0, r7
 8008146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814a:	bf00      	nop
 800814c:	08008da8 	.word	0x08008da8
 8008150:	08008b6d 	.word	0x08008b6d
 8008154:	08008c54 	.word	0x08008c54

08008158 <__lshift>:
 8008158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800815c:	460c      	mov	r4, r1
 800815e:	6849      	ldr	r1, [r1, #4]
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	4607      	mov	r7, r0
 800816a:	4691      	mov	r9, r2
 800816c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008170:	f108 0601 	add.w	r6, r8, #1
 8008174:	42b3      	cmp	r3, r6
 8008176:	db0b      	blt.n	8008190 <__lshift+0x38>
 8008178:	4638      	mov	r0, r7
 800817a:	f7ff fddb 	bl	8007d34 <_Balloc>
 800817e:	4605      	mov	r5, r0
 8008180:	b948      	cbnz	r0, 8008196 <__lshift+0x3e>
 8008182:	4602      	mov	r2, r0
 8008184:	4b28      	ldr	r3, [pc, #160]	; (8008228 <__lshift+0xd0>)
 8008186:	4829      	ldr	r0, [pc, #164]	; (800822c <__lshift+0xd4>)
 8008188:	f240 11d9 	movw	r1, #473	; 0x1d9
 800818c:	f000 fb0e 	bl	80087ac <__assert_func>
 8008190:	3101      	adds	r1, #1
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	e7ee      	b.n	8008174 <__lshift+0x1c>
 8008196:	2300      	movs	r3, #0
 8008198:	f100 0114 	add.w	r1, r0, #20
 800819c:	f100 0210 	add.w	r2, r0, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	4553      	cmp	r3, sl
 80081a4:	db33      	blt.n	800820e <__lshift+0xb6>
 80081a6:	6920      	ldr	r0, [r4, #16]
 80081a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081ac:	f104 0314 	add.w	r3, r4, #20
 80081b0:	f019 091f 	ands.w	r9, r9, #31
 80081b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081bc:	d02b      	beq.n	8008216 <__lshift+0xbe>
 80081be:	f1c9 0e20 	rsb	lr, r9, #32
 80081c2:	468a      	mov	sl, r1
 80081c4:	2200      	movs	r2, #0
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	fa00 f009 	lsl.w	r0, r0, r9
 80081cc:	4302      	orrs	r2, r0
 80081ce:	f84a 2b04 	str.w	r2, [sl], #4
 80081d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d6:	459c      	cmp	ip, r3
 80081d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80081dc:	d8f3      	bhi.n	80081c6 <__lshift+0x6e>
 80081de:	ebac 0304 	sub.w	r3, ip, r4
 80081e2:	3b15      	subs	r3, #21
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	3304      	adds	r3, #4
 80081ea:	f104 0015 	add.w	r0, r4, #21
 80081ee:	4584      	cmp	ip, r0
 80081f0:	bf38      	it	cc
 80081f2:	2304      	movcc	r3, #4
 80081f4:	50ca      	str	r2, [r1, r3]
 80081f6:	b10a      	cbz	r2, 80081fc <__lshift+0xa4>
 80081f8:	f108 0602 	add.w	r6, r8, #2
 80081fc:	3e01      	subs	r6, #1
 80081fe:	4638      	mov	r0, r7
 8008200:	612e      	str	r6, [r5, #16]
 8008202:	4621      	mov	r1, r4
 8008204:	f7ff fdd6 	bl	8007db4 <_Bfree>
 8008208:	4628      	mov	r0, r5
 800820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008212:	3301      	adds	r3, #1
 8008214:	e7c5      	b.n	80081a2 <__lshift+0x4a>
 8008216:	3904      	subs	r1, #4
 8008218:	f853 2b04 	ldr.w	r2, [r3], #4
 800821c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008220:	459c      	cmp	ip, r3
 8008222:	d8f9      	bhi.n	8008218 <__lshift+0xc0>
 8008224:	e7ea      	b.n	80081fc <__lshift+0xa4>
 8008226:	bf00      	nop
 8008228:	08008be3 	.word	0x08008be3
 800822c:	08008c54 	.word	0x08008c54

08008230 <__mcmp>:
 8008230:	b530      	push	{r4, r5, lr}
 8008232:	6902      	ldr	r2, [r0, #16]
 8008234:	690c      	ldr	r4, [r1, #16]
 8008236:	1b12      	subs	r2, r2, r4
 8008238:	d10e      	bne.n	8008258 <__mcmp+0x28>
 800823a:	f100 0314 	add.w	r3, r0, #20
 800823e:	3114      	adds	r1, #20
 8008240:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008244:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008248:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800824c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008250:	42a5      	cmp	r5, r4
 8008252:	d003      	beq.n	800825c <__mcmp+0x2c>
 8008254:	d305      	bcc.n	8008262 <__mcmp+0x32>
 8008256:	2201      	movs	r2, #1
 8008258:	4610      	mov	r0, r2
 800825a:	bd30      	pop	{r4, r5, pc}
 800825c:	4283      	cmp	r3, r0
 800825e:	d3f3      	bcc.n	8008248 <__mcmp+0x18>
 8008260:	e7fa      	b.n	8008258 <__mcmp+0x28>
 8008262:	f04f 32ff 	mov.w	r2, #4294967295
 8008266:	e7f7      	b.n	8008258 <__mcmp+0x28>

08008268 <__mdiff>:
 8008268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	460c      	mov	r4, r1
 800826e:	4606      	mov	r6, r0
 8008270:	4611      	mov	r1, r2
 8008272:	4620      	mov	r0, r4
 8008274:	4617      	mov	r7, r2
 8008276:	f7ff ffdb 	bl	8008230 <__mcmp>
 800827a:	1e05      	subs	r5, r0, #0
 800827c:	d110      	bne.n	80082a0 <__mdiff+0x38>
 800827e:	4629      	mov	r1, r5
 8008280:	4630      	mov	r0, r6
 8008282:	f7ff fd57 	bl	8007d34 <_Balloc>
 8008286:	b930      	cbnz	r0, 8008296 <__mdiff+0x2e>
 8008288:	4b39      	ldr	r3, [pc, #228]	; (8008370 <__mdiff+0x108>)
 800828a:	4602      	mov	r2, r0
 800828c:	f240 2132 	movw	r1, #562	; 0x232
 8008290:	4838      	ldr	r0, [pc, #224]	; (8008374 <__mdiff+0x10c>)
 8008292:	f000 fa8b 	bl	80087ac <__assert_func>
 8008296:	2301      	movs	r3, #1
 8008298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800829c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a0:	bfa4      	itt	ge
 80082a2:	463b      	movge	r3, r7
 80082a4:	4627      	movge	r7, r4
 80082a6:	4630      	mov	r0, r6
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	bfa6      	itte	ge
 80082ac:	461c      	movge	r4, r3
 80082ae:	2500      	movge	r5, #0
 80082b0:	2501      	movlt	r5, #1
 80082b2:	f7ff fd3f 	bl	8007d34 <_Balloc>
 80082b6:	b920      	cbnz	r0, 80082c2 <__mdiff+0x5a>
 80082b8:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <__mdiff+0x108>)
 80082ba:	4602      	mov	r2, r0
 80082bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082c0:	e7e6      	b.n	8008290 <__mdiff+0x28>
 80082c2:	693e      	ldr	r6, [r7, #16]
 80082c4:	60c5      	str	r5, [r0, #12]
 80082c6:	6925      	ldr	r5, [r4, #16]
 80082c8:	f107 0114 	add.w	r1, r7, #20
 80082cc:	f104 0914 	add.w	r9, r4, #20
 80082d0:	f100 0e14 	add.w	lr, r0, #20
 80082d4:	f107 0210 	add.w	r2, r7, #16
 80082d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80082dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80082e0:	46f2      	mov	sl, lr
 80082e2:	2700      	movs	r7, #0
 80082e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80082e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80082ec:	fa1f f883 	uxth.w	r8, r3
 80082f0:	fa17 f78b 	uxtah	r7, r7, fp
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	eba7 0808 	sub.w	r8, r7, r8
 80082fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008302:	fa1f f888 	uxth.w	r8, r8
 8008306:	141f      	asrs	r7, r3, #16
 8008308:	454d      	cmp	r5, r9
 800830a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800830e:	f84a 3b04 	str.w	r3, [sl], #4
 8008312:	d8e7      	bhi.n	80082e4 <__mdiff+0x7c>
 8008314:	1b2b      	subs	r3, r5, r4
 8008316:	3b15      	subs	r3, #21
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	3304      	adds	r3, #4
 800831e:	3415      	adds	r4, #21
 8008320:	42a5      	cmp	r5, r4
 8008322:	bf38      	it	cc
 8008324:	2304      	movcc	r3, #4
 8008326:	4419      	add	r1, r3
 8008328:	4473      	add	r3, lr
 800832a:	469e      	mov	lr, r3
 800832c:	460d      	mov	r5, r1
 800832e:	4565      	cmp	r5, ip
 8008330:	d30e      	bcc.n	8008350 <__mdiff+0xe8>
 8008332:	f10c 0203 	add.w	r2, ip, #3
 8008336:	1a52      	subs	r2, r2, r1
 8008338:	f022 0203 	bic.w	r2, r2, #3
 800833c:	3903      	subs	r1, #3
 800833e:	458c      	cmp	ip, r1
 8008340:	bf38      	it	cc
 8008342:	2200      	movcc	r2, #0
 8008344:	441a      	add	r2, r3
 8008346:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800834a:	b17b      	cbz	r3, 800836c <__mdiff+0x104>
 800834c:	6106      	str	r6, [r0, #16]
 800834e:	e7a5      	b.n	800829c <__mdiff+0x34>
 8008350:	f855 8b04 	ldr.w	r8, [r5], #4
 8008354:	fa17 f488 	uxtah	r4, r7, r8
 8008358:	1422      	asrs	r2, r4, #16
 800835a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800835e:	b2a4      	uxth	r4, r4
 8008360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008364:	f84e 4b04 	str.w	r4, [lr], #4
 8008368:	1417      	asrs	r7, r2, #16
 800836a:	e7e0      	b.n	800832e <__mdiff+0xc6>
 800836c:	3e01      	subs	r6, #1
 800836e:	e7ea      	b.n	8008346 <__mdiff+0xde>
 8008370:	08008be3 	.word	0x08008be3
 8008374:	08008c54 	.word	0x08008c54

08008378 <__d2b>:
 8008378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4689      	mov	r9, r1
 800837e:	2101      	movs	r1, #1
 8008380:	ec57 6b10 	vmov	r6, r7, d0
 8008384:	4690      	mov	r8, r2
 8008386:	f7ff fcd5 	bl	8007d34 <_Balloc>
 800838a:	4604      	mov	r4, r0
 800838c:	b930      	cbnz	r0, 800839c <__d2b+0x24>
 800838e:	4602      	mov	r2, r0
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <__d2b+0xb0>)
 8008392:	4826      	ldr	r0, [pc, #152]	; (800842c <__d2b+0xb4>)
 8008394:	f240 310a 	movw	r1, #778	; 0x30a
 8008398:	f000 fa08 	bl	80087ac <__assert_func>
 800839c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083a4:	bb35      	cbnz	r5, 80083f4 <__d2b+0x7c>
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	d028      	beq.n	80083fe <__d2b+0x86>
 80083ac:	4668      	mov	r0, sp
 80083ae:	9600      	str	r6, [sp, #0]
 80083b0:	f7ff fd8c 	bl	8007ecc <__lo0bits>
 80083b4:	9900      	ldr	r1, [sp, #0]
 80083b6:	b300      	cbz	r0, 80083fa <__d2b+0x82>
 80083b8:	9a01      	ldr	r2, [sp, #4]
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	fa02 f303 	lsl.w	r3, r2, r3
 80083c2:	430b      	orrs	r3, r1
 80083c4:	40c2      	lsrs	r2, r0
 80083c6:	6163      	str	r3, [r4, #20]
 80083c8:	9201      	str	r2, [sp, #4]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	61a3      	str	r3, [r4, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bf14      	ite	ne
 80083d2:	2202      	movne	r2, #2
 80083d4:	2201      	moveq	r2, #1
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	b1d5      	cbz	r5, 8008410 <__d2b+0x98>
 80083da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083de:	4405      	add	r5, r0
 80083e0:	f8c9 5000 	str.w	r5, [r9]
 80083e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083e8:	f8c8 0000 	str.w	r0, [r8]
 80083ec:	4620      	mov	r0, r4
 80083ee:	b003      	add	sp, #12
 80083f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f8:	e7d5      	b.n	80083a6 <__d2b+0x2e>
 80083fa:	6161      	str	r1, [r4, #20]
 80083fc:	e7e5      	b.n	80083ca <__d2b+0x52>
 80083fe:	a801      	add	r0, sp, #4
 8008400:	f7ff fd64 	bl	8007ecc <__lo0bits>
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	2201      	movs	r2, #1
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	3020      	adds	r0, #32
 800840e:	e7e3      	b.n	80083d8 <__d2b+0x60>
 8008410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008418:	f8c9 0000 	str.w	r0, [r9]
 800841c:	6918      	ldr	r0, [r3, #16]
 800841e:	f7ff fd35 	bl	8007e8c <__hi0bits>
 8008422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008426:	e7df      	b.n	80083e8 <__d2b+0x70>
 8008428:	08008be3 	.word	0x08008be3
 800842c:	08008c54 	.word	0x08008c54

08008430 <_calloc_r>:
 8008430:	b513      	push	{r0, r1, r4, lr}
 8008432:	434a      	muls	r2, r1
 8008434:	4611      	mov	r1, r2
 8008436:	9201      	str	r2, [sp, #4]
 8008438:	f7fd fd92 	bl	8005f60 <_malloc_r>
 800843c:	4604      	mov	r4, r0
 800843e:	b118      	cbz	r0, 8008448 <_calloc_r+0x18>
 8008440:	9a01      	ldr	r2, [sp, #4]
 8008442:	2100      	movs	r1, #0
 8008444:	f7fd fd34 	bl	8005eb0 <memset>
 8008448:	4620      	mov	r0, r4
 800844a:	b002      	add	sp, #8
 800844c:	bd10      	pop	{r4, pc}

0800844e <__sfputc_r>:
 800844e:	6893      	ldr	r3, [r2, #8]
 8008450:	3b01      	subs	r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	b410      	push	{r4}
 8008456:	6093      	str	r3, [r2, #8]
 8008458:	da08      	bge.n	800846c <__sfputc_r+0x1e>
 800845a:	6994      	ldr	r4, [r2, #24]
 800845c:	42a3      	cmp	r3, r4
 800845e:	db01      	blt.n	8008464 <__sfputc_r+0x16>
 8008460:	290a      	cmp	r1, #10
 8008462:	d103      	bne.n	800846c <__sfputc_r+0x1e>
 8008464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008468:	f7fe baee 	b.w	8006a48 <__swbuf_r>
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	1c58      	adds	r0, r3, #1
 8008470:	6010      	str	r0, [r2, #0]
 8008472:	7019      	strb	r1, [r3, #0]
 8008474:	4608      	mov	r0, r1
 8008476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800847a:	4770      	bx	lr

0800847c <__sfputs_r>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	4614      	mov	r4, r2
 8008484:	18d5      	adds	r5, r2, r3
 8008486:	42ac      	cmp	r4, r5
 8008488:	d101      	bne.n	800848e <__sfputs_r+0x12>
 800848a:	2000      	movs	r0, #0
 800848c:	e007      	b.n	800849e <__sfputs_r+0x22>
 800848e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008492:	463a      	mov	r2, r7
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ffda 	bl	800844e <__sfputc_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d1f3      	bne.n	8008486 <__sfputs_r+0xa>
 800849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084a0 <_vfiprintf_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	460d      	mov	r5, r1
 80084a6:	b09d      	sub	sp, #116	; 0x74
 80084a8:	4614      	mov	r4, r2
 80084aa:	4698      	mov	r8, r3
 80084ac:	4606      	mov	r6, r0
 80084ae:	b118      	cbz	r0, 80084b8 <_vfiprintf_r+0x18>
 80084b0:	6983      	ldr	r3, [r0, #24]
 80084b2:	b90b      	cbnz	r3, 80084b8 <_vfiprintf_r+0x18>
 80084b4:	f7ff fb1a 	bl	8007aec <__sinit>
 80084b8:	4b89      	ldr	r3, [pc, #548]	; (80086e0 <_vfiprintf_r+0x240>)
 80084ba:	429d      	cmp	r5, r3
 80084bc:	d11b      	bne.n	80084f6 <_vfiprintf_r+0x56>
 80084be:	6875      	ldr	r5, [r6, #4]
 80084c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	d405      	bmi.n	80084d2 <_vfiprintf_r+0x32>
 80084c6:	89ab      	ldrh	r3, [r5, #12]
 80084c8:	059a      	lsls	r2, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_vfiprintf_r+0x32>
 80084cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ce:	f7ff fbb0 	bl	8007c32 <__retarget_lock_acquire_recursive>
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	071b      	lsls	r3, r3, #28
 80084d6:	d501      	bpl.n	80084dc <_vfiprintf_r+0x3c>
 80084d8:	692b      	ldr	r3, [r5, #16]
 80084da:	b9eb      	cbnz	r3, 8008518 <_vfiprintf_r+0x78>
 80084dc:	4629      	mov	r1, r5
 80084de:	4630      	mov	r0, r6
 80084e0:	f7fe fb04 	bl	8006aec <__swsetup_r>
 80084e4:	b1c0      	cbz	r0, 8008518 <_vfiprintf_r+0x78>
 80084e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e8:	07dc      	lsls	r4, r3, #31
 80084ea:	d50e      	bpl.n	800850a <_vfiprintf_r+0x6a>
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	b01d      	add	sp, #116	; 0x74
 80084f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f6:	4b7b      	ldr	r3, [pc, #492]	; (80086e4 <_vfiprintf_r+0x244>)
 80084f8:	429d      	cmp	r5, r3
 80084fa:	d101      	bne.n	8008500 <_vfiprintf_r+0x60>
 80084fc:	68b5      	ldr	r5, [r6, #8]
 80084fe:	e7df      	b.n	80084c0 <_vfiprintf_r+0x20>
 8008500:	4b79      	ldr	r3, [pc, #484]	; (80086e8 <_vfiprintf_r+0x248>)
 8008502:	429d      	cmp	r5, r3
 8008504:	bf08      	it	eq
 8008506:	68f5      	ldreq	r5, [r6, #12]
 8008508:	e7da      	b.n	80084c0 <_vfiprintf_r+0x20>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	0598      	lsls	r0, r3, #22
 800850e:	d4ed      	bmi.n	80084ec <_vfiprintf_r+0x4c>
 8008510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008512:	f7ff fb8f 	bl	8007c34 <__retarget_lock_release_recursive>
 8008516:	e7e9      	b.n	80084ec <_vfiprintf_r+0x4c>
 8008518:	2300      	movs	r3, #0
 800851a:	9309      	str	r3, [sp, #36]	; 0x24
 800851c:	2320      	movs	r3, #32
 800851e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008522:	f8cd 800c 	str.w	r8, [sp, #12]
 8008526:	2330      	movs	r3, #48	; 0x30
 8008528:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086ec <_vfiprintf_r+0x24c>
 800852c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008530:	f04f 0901 	mov.w	r9, #1
 8008534:	4623      	mov	r3, r4
 8008536:	469a      	mov	sl, r3
 8008538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853c:	b10a      	cbz	r2, 8008542 <_vfiprintf_r+0xa2>
 800853e:	2a25      	cmp	r2, #37	; 0x25
 8008540:	d1f9      	bne.n	8008536 <_vfiprintf_r+0x96>
 8008542:	ebba 0b04 	subs.w	fp, sl, r4
 8008546:	d00b      	beq.n	8008560 <_vfiprintf_r+0xc0>
 8008548:	465b      	mov	r3, fp
 800854a:	4622      	mov	r2, r4
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff ff94 	bl	800847c <__sfputs_r>
 8008554:	3001      	adds	r0, #1
 8008556:	f000 80aa 	beq.w	80086ae <_vfiprintf_r+0x20e>
 800855a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800855c:	445a      	add	r2, fp
 800855e:	9209      	str	r2, [sp, #36]	; 0x24
 8008560:	f89a 3000 	ldrb.w	r3, [sl]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80a2 	beq.w	80086ae <_vfiprintf_r+0x20e>
 800856a:	2300      	movs	r3, #0
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008574:	f10a 0a01 	add.w	sl, sl, #1
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008580:	931a      	str	r3, [sp, #104]	; 0x68
 8008582:	4654      	mov	r4, sl
 8008584:	2205      	movs	r2, #5
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4858      	ldr	r0, [pc, #352]	; (80086ec <_vfiprintf_r+0x24c>)
 800858c:	f7f7 fe28 	bl	80001e0 <memchr>
 8008590:	9a04      	ldr	r2, [sp, #16]
 8008592:	b9d8      	cbnz	r0, 80085cc <_vfiprintf_r+0x12c>
 8008594:	06d1      	lsls	r1, r2, #27
 8008596:	bf44      	itt	mi
 8008598:	2320      	movmi	r3, #32
 800859a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859e:	0713      	lsls	r3, r2, #28
 80085a0:	bf44      	itt	mi
 80085a2:	232b      	movmi	r3, #43	; 0x2b
 80085a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ac:	2b2a      	cmp	r3, #42	; 0x2a
 80085ae:	d015      	beq.n	80085dc <_vfiprintf_r+0x13c>
 80085b0:	9a07      	ldr	r2, [sp, #28]
 80085b2:	4654      	mov	r4, sl
 80085b4:	2000      	movs	r0, #0
 80085b6:	f04f 0c0a 	mov.w	ip, #10
 80085ba:	4621      	mov	r1, r4
 80085bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c0:	3b30      	subs	r3, #48	; 0x30
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d94e      	bls.n	8008664 <_vfiprintf_r+0x1c4>
 80085c6:	b1b0      	cbz	r0, 80085f6 <_vfiprintf_r+0x156>
 80085c8:	9207      	str	r2, [sp, #28]
 80085ca:	e014      	b.n	80085f6 <_vfiprintf_r+0x156>
 80085cc:	eba0 0308 	sub.w	r3, r0, r8
 80085d0:	fa09 f303 	lsl.w	r3, r9, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	46a2      	mov	sl, r4
 80085da:	e7d2      	b.n	8008582 <_vfiprintf_r+0xe2>
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	1d19      	adds	r1, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	9103      	str	r1, [sp, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfbb      	ittet	lt
 80085e8:	425b      	neglt	r3, r3
 80085ea:	f042 0202 	orrlt.w	r2, r2, #2
 80085ee:	9307      	strge	r3, [sp, #28]
 80085f0:	9307      	strlt	r3, [sp, #28]
 80085f2:	bfb8      	it	lt
 80085f4:	9204      	strlt	r2, [sp, #16]
 80085f6:	7823      	ldrb	r3, [r4, #0]
 80085f8:	2b2e      	cmp	r3, #46	; 0x2e
 80085fa:	d10c      	bne.n	8008616 <_vfiprintf_r+0x176>
 80085fc:	7863      	ldrb	r3, [r4, #1]
 80085fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008600:	d135      	bne.n	800866e <_vfiprintf_r+0x1ce>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	9203      	str	r2, [sp, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	bfb8      	it	lt
 800860e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008612:	3402      	adds	r4, #2
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086fc <_vfiprintf_r+0x25c>
 800861a:	7821      	ldrb	r1, [r4, #0]
 800861c:	2203      	movs	r2, #3
 800861e:	4650      	mov	r0, sl
 8008620:	f7f7 fdde 	bl	80001e0 <memchr>
 8008624:	b140      	cbz	r0, 8008638 <_vfiprintf_r+0x198>
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	eba0 000a 	sub.w	r0, r0, sl
 800862c:	fa03 f000 	lsl.w	r0, r3, r0
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	4303      	orrs	r3, r0
 8008634:	3401      	adds	r4, #1
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863c:	482c      	ldr	r0, [pc, #176]	; (80086f0 <_vfiprintf_r+0x250>)
 800863e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008642:	2206      	movs	r2, #6
 8008644:	f7f7 fdcc 	bl	80001e0 <memchr>
 8008648:	2800      	cmp	r0, #0
 800864a:	d03f      	beq.n	80086cc <_vfiprintf_r+0x22c>
 800864c:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <_vfiprintf_r+0x254>)
 800864e:	bb1b      	cbnz	r3, 8008698 <_vfiprintf_r+0x1f8>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	3307      	adds	r3, #7
 8008654:	f023 0307 	bic.w	r3, r3, #7
 8008658:	3308      	adds	r3, #8
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865e:	443b      	add	r3, r7
 8008660:	9309      	str	r3, [sp, #36]	; 0x24
 8008662:	e767      	b.n	8008534 <_vfiprintf_r+0x94>
 8008664:	fb0c 3202 	mla	r2, ip, r2, r3
 8008668:	460c      	mov	r4, r1
 800866a:	2001      	movs	r0, #1
 800866c:	e7a5      	b.n	80085ba <_vfiprintf_r+0x11a>
 800866e:	2300      	movs	r3, #0
 8008670:	3401      	adds	r4, #1
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	4619      	mov	r1, r3
 8008676:	f04f 0c0a 	mov.w	ip, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008680:	3a30      	subs	r2, #48	; 0x30
 8008682:	2a09      	cmp	r2, #9
 8008684:	d903      	bls.n	800868e <_vfiprintf_r+0x1ee>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0c5      	beq.n	8008616 <_vfiprintf_r+0x176>
 800868a:	9105      	str	r1, [sp, #20]
 800868c:	e7c3      	b.n	8008616 <_vfiprintf_r+0x176>
 800868e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008692:	4604      	mov	r4, r0
 8008694:	2301      	movs	r3, #1
 8008696:	e7f0      	b.n	800867a <_vfiprintf_r+0x1da>
 8008698:	ab03      	add	r3, sp, #12
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	462a      	mov	r2, r5
 800869e:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <_vfiprintf_r+0x258>)
 80086a0:	a904      	add	r1, sp, #16
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7fd fd56 	bl	8006154 <_printf_float>
 80086a8:	4607      	mov	r7, r0
 80086aa:	1c78      	adds	r0, r7, #1
 80086ac:	d1d6      	bne.n	800865c <_vfiprintf_r+0x1bc>
 80086ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b0:	07d9      	lsls	r1, r3, #31
 80086b2:	d405      	bmi.n	80086c0 <_vfiprintf_r+0x220>
 80086b4:	89ab      	ldrh	r3, [r5, #12]
 80086b6:	059a      	lsls	r2, r3, #22
 80086b8:	d402      	bmi.n	80086c0 <_vfiprintf_r+0x220>
 80086ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086bc:	f7ff faba 	bl	8007c34 <__retarget_lock_release_recursive>
 80086c0:	89ab      	ldrh	r3, [r5, #12]
 80086c2:	065b      	lsls	r3, r3, #25
 80086c4:	f53f af12 	bmi.w	80084ec <_vfiprintf_r+0x4c>
 80086c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ca:	e711      	b.n	80084f0 <_vfiprintf_r+0x50>
 80086cc:	ab03      	add	r3, sp, #12
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	462a      	mov	r2, r5
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <_vfiprintf_r+0x258>)
 80086d4:	a904      	add	r1, sp, #16
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7fd ffe0 	bl	800669c <_printf_i>
 80086dc:	e7e4      	b.n	80086a8 <_vfiprintf_r+0x208>
 80086de:	bf00      	nop
 80086e0:	08008c14 	.word	0x08008c14
 80086e4:	08008c34 	.word	0x08008c34
 80086e8:	08008bf4 	.word	0x08008bf4
 80086ec:	08008db4 	.word	0x08008db4
 80086f0:	08008dbe 	.word	0x08008dbe
 80086f4:	08006155 	.word	0x08006155
 80086f8:	0800847d 	.word	0x0800847d
 80086fc:	08008dba 	.word	0x08008dba

08008700 <__sread>:
 8008700:	b510      	push	{r4, lr}
 8008702:	460c      	mov	r4, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	f000 f8d6 	bl	80088b8 <_read_r>
 800870c:	2800      	cmp	r0, #0
 800870e:	bfab      	itete	ge
 8008710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008712:	89a3      	ldrhlt	r3, [r4, #12]
 8008714:	181b      	addge	r3, r3, r0
 8008716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800871a:	bfac      	ite	ge
 800871c:	6563      	strge	r3, [r4, #84]	; 0x54
 800871e:	81a3      	strhlt	r3, [r4, #12]
 8008720:	bd10      	pop	{r4, pc}

08008722 <__swrite>:
 8008722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	461f      	mov	r7, r3
 8008728:	898b      	ldrh	r3, [r1, #12]
 800872a:	05db      	lsls	r3, r3, #23
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	4616      	mov	r6, r2
 8008732:	d505      	bpl.n	8008740 <__swrite+0x1e>
 8008734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008738:	2302      	movs	r3, #2
 800873a:	2200      	movs	r2, #0
 800873c:	f000 f898 	bl	8008870 <_lseek_r>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	f000 b817 	b.w	8008788 <_write_r>

0800875a <__sseek>:
 800875a:	b510      	push	{r4, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 f885 	bl	8008870 <_lseek_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	bf15      	itete	ne
 800876c:	6560      	strne	r0, [r4, #84]	; 0x54
 800876e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008776:	81a3      	strheq	r3, [r4, #12]
 8008778:	bf18      	it	ne
 800877a:	81a3      	strhne	r3, [r4, #12]
 800877c:	bd10      	pop	{r4, pc}

0800877e <__sclose>:
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 b831 	b.w	80087e8 <_close_r>
	...

08008788 <_write_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	; (80087a8 <_write_r+0x20>)
 800878c:	4604      	mov	r4, r0
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f9 fb6f 	bl	8001e7a <_write>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_write_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_write_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	2000041c 	.word	0x2000041c

080087ac <__assert_func>:
 80087ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ae:	4614      	mov	r4, r2
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <__assert_func+0x2c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4605      	mov	r5, r0
 80087b8:	68d8      	ldr	r0, [r3, #12]
 80087ba:	b14c      	cbz	r4, 80087d0 <__assert_func+0x24>
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <__assert_func+0x30>)
 80087be:	9100      	str	r1, [sp, #0]
 80087c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087c4:	4906      	ldr	r1, [pc, #24]	; (80087e0 <__assert_func+0x34>)
 80087c6:	462b      	mov	r3, r5
 80087c8:	f000 f81e 	bl	8008808 <fiprintf>
 80087cc:	f000 f893 	bl	80088f6 <abort>
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <__assert_func+0x38>)
 80087d2:	461c      	mov	r4, r3
 80087d4:	e7f3      	b.n	80087be <__assert_func+0x12>
 80087d6:	bf00      	nop
 80087d8:	2000000c 	.word	0x2000000c
 80087dc:	08008dc5 	.word	0x08008dc5
 80087e0:	08008dd2 	.word	0x08008dd2
 80087e4:	08008e00 	.word	0x08008e00

080087e8 <_close_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d06      	ldr	r5, [pc, #24]	; (8008804 <_close_r+0x1c>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	f7f9 fb5d 	bl	8001eb2 <_close>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_close_r+0x1a>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_close_r+0x1a>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	2000041c 	.word	0x2000041c

08008808 <fiprintf>:
 8008808:	b40e      	push	{r1, r2, r3}
 800880a:	b503      	push	{r0, r1, lr}
 800880c:	4601      	mov	r1, r0
 800880e:	ab03      	add	r3, sp, #12
 8008810:	4805      	ldr	r0, [pc, #20]	; (8008828 <fiprintf+0x20>)
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f7ff fe41 	bl	80084a0 <_vfiprintf_r>
 800881e:	b002      	add	sp, #8
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b003      	add	sp, #12
 8008826:	4770      	bx	lr
 8008828:	2000000c 	.word	0x2000000c

0800882c <_fstat_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d07      	ldr	r5, [pc, #28]	; (800884c <_fstat_r+0x20>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	f7f9 fb46 	bl	8001eca <_fstat>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d102      	bne.n	8008848 <_fstat_r+0x1c>
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	b103      	cbz	r3, 8008848 <_fstat_r+0x1c>
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	2000041c 	.word	0x2000041c

08008850 <_isatty_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	; (800886c <_isatty_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7f9 fb45 	bl	8001eea <_isatty>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_isatty_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_isatty_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	2000041c 	.word	0x2000041c

08008870 <_lseek_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_lseek_r+0x20>)
 8008874:	4604      	mov	r4, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	602a      	str	r2, [r5, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7f9 fb3e 	bl	8001f00 <_lseek>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_lseek_r+0x1e>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_lseek_r+0x1e>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	2000041c 	.word	0x2000041c

08008894 <__ascii_mbtowc>:
 8008894:	b082      	sub	sp, #8
 8008896:	b901      	cbnz	r1, 800889a <__ascii_mbtowc+0x6>
 8008898:	a901      	add	r1, sp, #4
 800889a:	b142      	cbz	r2, 80088ae <__ascii_mbtowc+0x1a>
 800889c:	b14b      	cbz	r3, 80088b2 <__ascii_mbtowc+0x1e>
 800889e:	7813      	ldrb	r3, [r2, #0]
 80088a0:	600b      	str	r3, [r1, #0]
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	1e10      	subs	r0, r2, #0
 80088a6:	bf18      	it	ne
 80088a8:	2001      	movne	r0, #1
 80088aa:	b002      	add	sp, #8
 80088ac:	4770      	bx	lr
 80088ae:	4610      	mov	r0, r2
 80088b0:	e7fb      	b.n	80088aa <__ascii_mbtowc+0x16>
 80088b2:	f06f 0001 	mvn.w	r0, #1
 80088b6:	e7f8      	b.n	80088aa <__ascii_mbtowc+0x16>

080088b8 <_read_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_read_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f9 faba 	bl	8001e40 <_read>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_read_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_read_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	2000041c 	.word	0x2000041c

080088dc <__ascii_wctomb>:
 80088dc:	b149      	cbz	r1, 80088f2 <__ascii_wctomb+0x16>
 80088de:	2aff      	cmp	r2, #255	; 0xff
 80088e0:	bf85      	ittet	hi
 80088e2:	238a      	movhi	r3, #138	; 0x8a
 80088e4:	6003      	strhi	r3, [r0, #0]
 80088e6:	700a      	strbls	r2, [r1, #0]
 80088e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80088ec:	bf98      	it	ls
 80088ee:	2001      	movls	r0, #1
 80088f0:	4770      	bx	lr
 80088f2:	4608      	mov	r0, r1
 80088f4:	4770      	bx	lr

080088f6 <abort>:
 80088f6:	b508      	push	{r3, lr}
 80088f8:	2006      	movs	r0, #6
 80088fa:	f000 f82b 	bl	8008954 <raise>
 80088fe:	2001      	movs	r0, #1
 8008900:	f7f9 fa94 	bl	8001e2c <_exit>

08008904 <_raise_r>:
 8008904:	291f      	cmp	r1, #31
 8008906:	b538      	push	{r3, r4, r5, lr}
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	d904      	bls.n	8008918 <_raise_r+0x14>
 800890e:	2316      	movs	r3, #22
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800891a:	b112      	cbz	r2, 8008922 <_raise_r+0x1e>
 800891c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008920:	b94b      	cbnz	r3, 8008936 <_raise_r+0x32>
 8008922:	4620      	mov	r0, r4
 8008924:	f000 f830 	bl	8008988 <_getpid_r>
 8008928:	462a      	mov	r2, r5
 800892a:	4601      	mov	r1, r0
 800892c:	4620      	mov	r0, r4
 800892e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008932:	f000 b817 	b.w	8008964 <_kill_r>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d00a      	beq.n	8008950 <_raise_r+0x4c>
 800893a:	1c59      	adds	r1, r3, #1
 800893c:	d103      	bne.n	8008946 <_raise_r+0x42>
 800893e:	2316      	movs	r3, #22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	2001      	movs	r0, #1
 8008944:	e7e7      	b.n	8008916 <_raise_r+0x12>
 8008946:	2400      	movs	r4, #0
 8008948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800894c:	4628      	mov	r0, r5
 800894e:	4798      	blx	r3
 8008950:	2000      	movs	r0, #0
 8008952:	e7e0      	b.n	8008916 <_raise_r+0x12>

08008954 <raise>:
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <raise+0xc>)
 8008956:	4601      	mov	r1, r0
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	f7ff bfd3 	b.w	8008904 <_raise_r>
 800895e:	bf00      	nop
 8008960:	2000000c 	.word	0x2000000c

08008964 <_kill_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d07      	ldr	r5, [pc, #28]	; (8008984 <_kill_r+0x20>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	4611      	mov	r1, r2
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f7f9 fa4b 	bl	8001e0c <_kill>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d102      	bne.n	8008980 <_kill_r+0x1c>
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	b103      	cbz	r3, 8008980 <_kill_r+0x1c>
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	bd38      	pop	{r3, r4, r5, pc}
 8008982:	bf00      	nop
 8008984:	2000041c 	.word	0x2000041c

08008988 <_getpid_r>:
 8008988:	f7f9 ba38 	b.w	8001dfc <_getpid>

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
