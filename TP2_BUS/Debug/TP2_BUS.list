
TP2_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080088e8  080088e8  000188e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e64  08008e64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e6c  08008e6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001dc  08009050  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009050  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab28  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333c  00000000  00000000  0003ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029079  00000000  00000000  0003fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138fd  00000000  00000000  00068e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8ae  00000000  00000000  0007c78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b03c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  0016b090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088cc 	.word	0x080088cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080088cc 	.word	0x080088cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b9 	b.w	8000f3c <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_CAN1_Init+0x64>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_CAN1_Init+0x60>)
 8000f8e:	f001 f9bf 	bl	8002310 <HAL_CAN_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 fe90 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000020c 	.word	0x2000020c
 8000fa4:	40006400 	.word	0x40006400

08000fa8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a18      	ldr	r2, [pc, #96]	; (8001028 <HAL_CAN_MspInit+0x80>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d129      	bne.n	800101e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_CAN_MspInit+0x84>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ffa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800100c:	2309      	movs	r3, #9
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f001 fc05 	bl	8002828 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40006400 	.word	0x40006400
 800102c:	40021000 	.word	0x40021000

08001030 <Ligne_Init>:
int16_t dig_P6;
int16_t dig_P7;
int16_t dig_P8;
int16_t dig_P9;

void Ligne_Init(UART_HandleTypeDef *huart){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)&LIGNE, 7, 0xFFFF);
 8001038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103c:	2207      	movs	r2, #7
 800103e:	4904      	ldr	r1, [pc, #16]	; (8001050 <Ligne_Init+0x20>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f003 fde7 	bl	8004c14 <HAL_UART_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	08008a08 	.word	0x08008a08

08001054 <Commande_exec>:

void Commande_exec(int i){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	int commande_existe=0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
	if ((strncmp(Commande,SET_K,i)==0) && (i==strlen(SET_K))){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	461a      	mov	r2, r3
 8001064:	4947      	ldr	r1, [pc, #284]	; (8001184 <Commande_exec+0x130>)
 8001066:	4848      	ldr	r0, [pc, #288]	; (8001188 <Commande_exec+0x134>)
 8001068:	f005 fc7c 	bl	8006964 <strncmp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <Commande_exec+0x2e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b05      	cmp	r3, #5
 8001076:	d104      	bne.n	8001082 <Commande_exec+0x2e>
		printf("\r\nSET_K non implémenté \r\n");
 8001078:	4844      	ldr	r0, [pc, #272]	; (800118c <Commande_exec+0x138>)
 800107a:	f005 fc5b 	bl	8006934 <puts>
		commande_existe=1;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_K,i)==0) && (i==strlen(GET_K))){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	461a      	mov	r2, r3
 8001086:	4942      	ldr	r1, [pc, #264]	; (8001190 <Commande_exec+0x13c>)
 8001088:	483f      	ldr	r0, [pc, #252]	; (8001188 <Commande_exec+0x134>)
 800108a:	f005 fc6b 	bl	8006964 <strncmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d107      	bne.n	80010a4 <Commande_exec+0x50>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d104      	bne.n	80010a4 <Commande_exec+0x50>
		printf("\r\nGET_K OK non implémenté\r\n");
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <Commande_exec+0x140>)
 800109c:	f005 fc4a 	bl	8006934 <puts>
		commande_existe=1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_A,i)==0) && (i==strlen(GET_A))){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	493b      	ldr	r1, [pc, #236]	; (8001198 <Commande_exec+0x144>)
 80010aa:	4837      	ldr	r0, [pc, #220]	; (8001188 <Commande_exec+0x134>)
 80010ac:	f005 fc5a 	bl	8006964 <strncmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <Commande_exec+0x72>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d104      	bne.n	80010c6 <Commande_exec+0x72>
		printf("\r\nGET_A non implémenté \r\n");
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <Commande_exec+0x148>)
 80010be:	f005 fc39 	bl	8006934 <puts>
		commande_existe=1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_P,i)==0) && (i==strlen(GET_P))){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4935      	ldr	r1, [pc, #212]	; (80011a0 <Commande_exec+0x14c>)
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <Commande_exec+0x134>)
 80010ce:	f005 fc49 	bl	8006964 <strncmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d120      	bne.n	800111a <Commande_exec+0xc6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b05      	cmp	r3, #5
 80010dc:	d11d      	bne.n	800111a <Commande_exec+0xc6>
		printf("\r\n");
 80010de:	4831      	ldr	r0, [pc, #196]	; (80011a4 <Commande_exec+0x150>)
 80010e0:	f005 fc28 	bl	8006934 <puts>
		BMP280_S32_t P_nc = Get_P();
 80010e4:	f000 f9ff 	bl	80014e6 <Get_P>
 80010e8:	61b8      	str	r0, [r7, #24]
		BMP280_U32_t P=bmp280_compensate_P_int64(P_nc);
 80010ea:	69b8      	ldr	r0, [r7, #24]
 80010ec:	f000 fa62 	bl	80015b4 <bmp280_compensate_P_int64>
 80010f0:	6178      	str	r0, [r7, #20]
		printf("Pression : %.0f Pa\r\n",(float)P/256);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80011a8 <Commande_exec+0x154>
 8001100:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001104:	ee16 0a90 	vmov	r0, s13
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <Commande_exec+0x158>)
 8001112:	f005 fb89 	bl	8006828 <iprintf>
		commande_existe=1;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
	}
	if ((strncmp(Commande,GET_T,i)==0) && (i==strlen(GET_T))){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	461a      	mov	r2, r3
 800111e:	4924      	ldr	r1, [pc, #144]	; (80011b0 <Commande_exec+0x15c>)
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <Commande_exec+0x134>)
 8001122:	f005 fc1f 	bl	8006964 <strncmp>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d120      	bne.n	800116e <Commande_exec+0x11a>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d11d      	bne.n	800116e <Commande_exec+0x11a>
		printf("\r\n");
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <Commande_exec+0x150>)
 8001134:	f005 fbfe 	bl	8006934 <puts>
		BMP280_S32_t T_nc =Get_T();
 8001138:	f000 f9b0 	bl	800149c <Get_T>
 800113c:	6138      	str	r0, [r7, #16]
		BMP280_S32_t T=bmp280_compensate_T_int32(T_nc);
 800113e:	6938      	ldr	r0, [r7, #16]
 8001140:	f000 f9f6 	bl	8001530 <bmp280_compensate_T_int32>
 8001144:	60f8      	str	r0, [r7, #12]
		printf("Temperature : %.2f C\r\n",(float)T/100);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011b4 <Commande_exec+0x160>
 8001154:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001158:	ee16 0a90 	vmov	r0, s13
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <Commande_exec+0x164>)
 8001166:	f005 fb5f 	bl	8006828 <iprintf>
		commande_existe=1;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
	}
	if(commande_existe==0){
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <Commande_exec+0x126>
		printf("\r\nCette commande n'existe pas\r\n");
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <Commande_exec+0x168>)
 8001176:	f005 fbdd 	bl	8006934 <puts>
	}
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	08008a10 	.word	0x08008a10
 8001188:	200002a0 	.word	0x200002a0
 800118c:	080088e8 	.word	0x080088e8
 8001190:	08008a18 	.word	0x08008a18
 8001194:	08008904 	.word	0x08008904
 8001198:	08008a20 	.word	0x08008a20
 800119c:	08008924 	.word	0x08008924
 80011a0:	08008a28 	.word	0x08008a28
 80011a4:	08008940 	.word	0x08008940
 80011a8:	43800000 	.word	0x43800000
 80011ac:	08008944 	.word	0x08008944
 80011b0:	08008a30 	.word	0x08008a30
 80011b4:	42c80000 	.word	0x42c80000
 80011b8:	0800895c 	.word	0x0800895c
 80011bc:	08008974 	.word	0x08008974

080011c0 <BMP280_Write_Reg>:
	}

	printf("L'ID est 0x%x\r\n", buf[0]);
}

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80011d8:	23ee      	movs	r3, #238	; 0xee
 80011da:	b299      	uxth	r1, r3
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2302      	movs	r3, #2
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <BMP280_Write_Reg+0x7c>)
 80011ea:	f001 fd57 	bl	8002c9c <HAL_I2C_Master_Transmit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <BMP280_Write_Reg+0x3e>
		printf("Erreur Tx\r\n");
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <BMP280_Write_Reg+0x80>)
 80011fa:	f005 fb9b 	bl	8006934 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80011fe:	23ee      	movs	r3, #238	; 0xee
 8001200:	b299      	uxth	r1, r3
 8001202:	f107 020c 	add.w	r2, r7, #12
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <BMP280_Write_Reg+0x7c>)
 8001210:	f001 fe38 	bl	8002e84 <HAL_I2C_Master_Receive>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BMP280_Write_Reg+0x64>
		printf("Erreur Rx\r\n");
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <BMP280_Write_Reg+0x84>)
 8001220:	f005 fb88 	bl	8006934 <puts>
	}

	if (buf[0] == value) {
 8001224:	7b3b      	ldrb	r3, [r7, #12]
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	429a      	cmp	r2, r3
 800122a:	d101      	bne.n	8001230 <BMP280_Write_Reg+0x70>
		return 0;
 800122c:	2300      	movs	r3, #0
 800122e:	e000      	b.n	8001232 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8001230:	2301      	movs	r3, #1
	}
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000250 	.word	0x20000250
 8001240:	08008994 	.word	0x08008994
 8001244:	080089a0 	.word	0x080089a0

08001248 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001258:	23ee      	movs	r3, #238	; 0xee
 800125a:	b299      	uxth	r1, r3
 800125c:	1dfa      	adds	r2, r7, #7
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <BMP280_Read_Reg+0x70>)
 8001268:	f001 fd18 	bl	8002c9c <HAL_I2C_Master_Transmit>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <BMP280_Read_Reg+0x34>
		printf("Erreur Tx\r\n");
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <BMP280_Read_Reg+0x74>)
 8001278:	f005 fb5c 	bl	8006934 <puts>
	}

	buf = (uint8_t*) malloc(length);
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fda6 	bl	8005dd0 <malloc>
 8001284:	4603      	mov	r3, r0
 8001286:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,HAL_MAX_DELAY);
 8001288:	23ee      	movs	r3, #238	; 0xee
 800128a:	b299      	uxth	r1, r3
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <BMP280_Read_Reg+0x70>)
 800129a:	f001 fdf3 	bl	8002e84 <HAL_I2C_Master_Receive>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <BMP280_Read_Reg+0x66>
		printf("Erreur Rx\r\n");
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <BMP280_Read_Reg+0x78>)
 80012aa:	f005 fb43 	bl	8006934 <puts>
	}

	return buf;
 80012ae:	68bb      	ldr	r3, [r7, #8]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000250 	.word	0x20000250
 80012bc:	08008994 	.word	0x08008994
 80012c0:	080089a0 	.word	0x080089a0

080012c4 <Set_config>:

//Config du BMP280
void Set_config(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t val = 0x57;
 80012ca:	2357      	movs	r3, #87	; 0x57
 80012cc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = 0xF4;
 80012ce:	23f4      	movs	r3, #244	; 0xf4
 80012d0:	71bb      	strb	r3, [r7, #6]

	ret = BMP280_Write_Reg(reg, val);
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff71 	bl	80011c0 <BMP280_Write_Reg>
 80012de:	4603      	mov	r3, r0
 80012e0:	717b      	strb	r3, [r7, #5]
	if (ret == 0) {
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <Set_config+0x2c>
		printf("Config Ok\r\n");
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <Set_config+0x3c>)
 80012ea:	f005 fb23 	bl	8006934 <puts>
	} else {
		printf("Erreur Config\r\n");
	}
}
 80012ee:	e002      	b.n	80012f6 <Set_config+0x32>
		printf("Erreur Config\r\n");
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <Set_config+0x40>)
 80012f2:	f005 fb1f 	bl	8006934 <puts>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	080089bc 	.word	0x080089bc
 8001304:	080089c8 	.word	0x080089c8

08001308 <Get_calib>:

void Get_calib(){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	uint8_t reg = 0x88;
 800130e:	2388      	movs	r3, #136	; 0x88
 8001310:	71fb      	strb	r3, [r7, #7]
	uint8_t length = 24;
 8001312:	2318      	movs	r3, #24
 8001314:	71bb      	strb	r3, [r7, #6]

	buf = BMP280_Read_Reg(reg, length);
 8001316:	79ba      	ldrb	r2, [r7, #6]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff93 	bl	8001248 <BMP280_Read_Reg>
 8001322:	6038      	str	r0, [r7, #0]
	//	dig_P5 = ((int16_t)buf[14] << 4) | (buf[15] >> 4);
	//	dig_P6 = ((int16_t)buf[16] << 4) | (buf[17] >> 4);
	//	dig_P7 = ((int16_t)buf[18] << 4) | (buf[19] >> 4);
	//	dig_P8 = ((int16_t)buf[20] << 4) | (buf[21] >> 4);
	//	dig_P9 = ((int16_t)buf[22] << 4) | (buf[23] >> 4);
	dig_T1 = buf[0] | buf[1] << 8;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b21a      	sxth	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <Get_calib+0x164>)
 800133c:	801a      	strh	r2, [r3, #0]
	dig_T2 = buf[2] | buf[3] << 8;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3302      	adds	r3, #2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b21a      	sxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3303      	adds	r3, #3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <Get_calib+0x168>)
 8001356:	801a      	strh	r2, [r3, #0]
	dig_T3 = buf[4] | buf[5] << 8;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3304      	adds	r3, #4
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b21a      	sxth	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3305      	adds	r3, #5
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <Get_calib+0x16c>)
 8001370:	801a      	strh	r2, [r3, #0]
	dig_P1 = buf[6] | buf[7] << 8;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	3306      	adds	r3, #6
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b21a      	sxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	3307      	adds	r3, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <Get_calib+0x170>)
 800138c:	801a      	strh	r2, [r3, #0]
	dig_P2 = buf[8] | buf[9] << 8;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3308      	adds	r3, #8
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b21a      	sxth	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3309      	adds	r3, #9
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b35      	ldr	r3, [pc, #212]	; (800147c <Get_calib+0x174>)
 80013a6:	801a      	strh	r2, [r3, #0]
	dig_P3 = buf[10] | buf[11] << 8;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	330a      	adds	r3, #10
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	330b      	adds	r3, #11
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <Get_calib+0x178>)
 80013c0:	801a      	strh	r2, [r3, #0]
	dig_P4 = buf[12] | buf[13] << 8;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	330c      	adds	r3, #12
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	330d      	adds	r3, #13
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <Get_calib+0x17c>)
 80013da:	801a      	strh	r2, [r3, #0]
	dig_P5 = buf[14] | buf[15] << 8;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	330e      	adds	r3, #14
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	330f      	adds	r3, #15
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <Get_calib+0x180>)
 80013f4:	801a      	strh	r2, [r3, #0]
	dig_P6 = buf[16] | buf[17] << 8;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3310      	adds	r3, #16
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3311      	adds	r3, #17
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <Get_calib+0x184>)
 800140e:	801a      	strh	r2, [r3, #0]
	dig_P7 = buf[18] | buf[19] << 8;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3312      	adds	r3, #18
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21a      	sxth	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3313      	adds	r3, #19
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <Get_calib+0x188>)
 8001428:	801a      	strh	r2, [r3, #0]
	dig_P8 = buf[20] | buf[21] << 8;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3314      	adds	r3, #20
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b21a      	sxth	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3315      	adds	r3, #21
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <Get_calib+0x18c>)
 8001442:	801a      	strh	r2, [r3, #0]
	dig_P9 = buf[22] | buf[23] << 8;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3316      	adds	r3, #22
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b21a      	sxth	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3317      	adds	r3, #23
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <Get_calib+0x190>)
 800145c:	801a      	strh	r2, [r3, #0]

	free(buf);
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f004 fcbe 	bl	8005de0 <free>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000236 	.word	0x20000236
 8001470:	20000238 	.word	0x20000238
 8001474:	20000248 	.word	0x20000248
 8001478:	20000240 	.word	0x20000240
 800147c:	2000023a 	.word	0x2000023a
 8001480:	20000242 	.word	0x20000242
 8001484:	2000023c 	.word	0x2000023c
 8001488:	2000023e 	.word	0x2000023e
 800148c:	2000024a 	.word	0x2000024a
 8001490:	20000234 	.word	0x20000234
 8001494:	20000244 	.word	0x20000244
 8001498:	20000246 	.word	0x20000246

0800149c <Get_T>:

BMP280_S32_t Get_T() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;
	uint8_t reg = 0xFA;
 80014a2:	23fa      	movs	r3, #250	; 0xfa
 80014a4:	73fb      	strb	r3, [r7, #15]
	uint8_t length = 3;
 80014a6:	2303      	movs	r3, #3
 80014a8:	73bb      	strb	r3, [r7, #14]

	buf = BMP280_Read_Reg(reg, length);
 80014aa:	7bba      	ldrb	r2, [r7, #14]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fec9 	bl	8001248 <BMP280_Read_Reg>
 80014b6:	60b8      	str	r0, [r7, #8]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3301      	adds	r3, #1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4313      	orrs	r3, r2
					| ((BMP280_S32_t) (buf[2]) >> 4);
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	3202      	adds	r2, #2
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	0912      	lsrs	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	607b      	str	r3, [r7, #4]

	free(buf);
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f004 fc82 	bl	8005de0 <free>

	return adc_T;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Get_P>:

BMP280_S32_t Get_P() {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;
	uint8_t reg = 0xF7;
 80014ec:	23f7      	movs	r3, #247	; 0xf7
 80014ee:	73fb      	strb	r3, [r7, #15]
	uint8_t length = 3;
 80014f0:	2303      	movs	r3, #3
 80014f2:	73bb      	strb	r3, [r7, #14]

	buf = BMP280_Read_Reg(reg, length);
 80014f4:	7bba      	ldrb	r2, [r7, #14]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fea4 	bl	8001248 <BMP280_Read_Reg>
 8001500:	60b8      	str	r0, [r7, #8]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	031a      	lsls	r2, r3, #12
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3301      	adds	r3, #1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4313      	orrs	r3, r2
					| ((BMP280_S32_t) (buf[2]) >> 4);
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	3202      	adds	r2, #2
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	0912      	lsrs	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800151c:	4313      	orrs	r3, r2
 800151e:	607b      	str	r3, [r7, #4]

	free(buf);
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f004 fc5d 	bl	8005de0 <free>

	return adc_P;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <bmp280_compensate_T_int32>:

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T){
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1  = ((((adc_T>>3)-((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	10da      	asrs	r2, r3, #3
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <bmp280_compensate_T_int32+0x74>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <bmp280_compensate_T_int32+0x78>)
 8001546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	12db      	asrs	r3, r3, #11
 8001550:	617b      	str	r3, [r7, #20]
	var2  = (((((adc_T>>4)-((BMP280_S32_t)dig_T1)) * ((adc_T>>4)-((BMP280_S32_t)dig_T1))) >> 12) *((BMP280_S32_t)dig_T3)) >> 14;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	111b      	asrs	r3, r3, #4
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <bmp280_compensate_T_int32+0x74>)
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	1112      	asrs	r2, r2, #4
 8001560:	4910      	ldr	r1, [pc, #64]	; (80015a4 <bmp280_compensate_T_int32+0x74>)
 8001562:	8809      	ldrh	r1, [r1, #0]
 8001564:	1a52      	subs	r2, r2, r1
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	131b      	asrs	r3, r3, #12
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <bmp280_compensate_T_int32+0x7c>)
 800156e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	139b      	asrs	r3, r3, #14
 8001578:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <bmp280_compensate_T_int32+0x80>)
 8001582:	6013      	str	r3, [r2, #0]
	T  = (t_fine * 5 + 128) >> 8;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <bmp280_compensate_T_int32+0x80>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3380      	adds	r3, #128	; 0x80
 8001590:	121b      	asrs	r3, r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
	return T;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	4618      	mov	r0, r3
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000236 	.word	0x20000236
 80015a8:	20000238 	.word	0x20000238
 80015ac:	20000248 	.word	0x20000248
 80015b0:	2000024c 	.word	0x2000024c

080015b4 <bmp280_compensate_P_int64>:

BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P){
 80015b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b8:	b09a      	sub	sp, #104	; 0x68
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	64f8      	str	r0, [r7, #76]	; 0x4c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine)-128000;
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <bmp280_compensate_P_int64+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015c8:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015cc:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015d0:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 80015d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d8:	fb03 f102 	mul.w	r1, r3, r2
 80015dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	fb03 f302 	mul.w	r3, r3, r2
 80015e4:	18ca      	adds	r2, r1, r3
 80015e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e8:	fba3 4503 	umull	r4, r5, r3, r3
 80015ec:	1953      	adds	r3, r2, r5
 80015ee:	461d      	mov	r5, r3
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <bmp280_compensate_P_int64+0x1bc>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015fc:	fb02 f005 	mul.w	r0, r2, r5
 8001600:	fb04 f103 	mul.w	r1, r4, r3
 8001604:	4401      	add	r1, r0
 8001606:	fba4 2302 	umull	r2, r3, r4, r2
 800160a:	4419      	add	r1, r3
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001612:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <bmp280_compensate_P_int64+0x1c0>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	b21a      	sxth	r2, r3
 800161e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001622:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001624:	fb03 f001 	mul.w	r0, r3, r1
 8001628:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800162a:	fb02 f101 	mul.w	r1, r2, r1
 800162e:	4408      	add	r0, r1
 8001630:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001632:	fba1 2302 	umull	r2, r3, r1, r2
 8001636:	18c1      	adds	r1, r0, r3
 8001638:	460b      	mov	r3, r1
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0459      	lsls	r1, r3, #17
 8001644:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001648:	0450      	lsls	r0, r2, #17
 800164a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800164e:	eb12 0800 	adds.w	r8, r2, r0
 8001652:	eb43 0901 	adc.w	r9, r3, r1
 8001656:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <bmp280_compensate_P_int64+0x1c4>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	b21a      	sxth	r2, r3
 8001662:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	00d1      	lsls	r1, r2, #3
 8001670:	2000      	movs	r0, #0
 8001672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001676:	1814      	adds	r4, r2, r0
 8001678:	61bc      	str	r4, [r7, #24]
 800167a:	414b      	adcs	r3, r1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001682:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8001686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800168a:	fb03 f102 	mul.w	r1, r3, r2
 800168e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001692:	fb03 f302 	mul.w	r3, r3, r2
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169a:	fba3 4503 	umull	r4, r5, r3, r3
 800169e:	1953      	adds	r3, r2, r5
 80016a0:	461d      	mov	r5, r3
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <bmp280_compensate_P_int64+0x1c8>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016ae:	fb02 f005 	mul.w	r0, r2, r5
 80016b2:	fb04 f103 	mul.w	r1, r4, r3
 80016b6:	4401      	add	r1, r0
 80016b8:	fba4 2302 	umull	r2, r3, r4, r2
 80016bc:	4419      	add	r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	f04f 0800 	mov.w	r8, #0
 80016c4:	f04f 0900 	mov.w	r9, #0
 80016c8:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016cc:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016d0:	ea4f 2923 	mov.w	r9, r3, asr #8
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <bmp280_compensate_P_int64+0x1cc>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	b21a      	sxth	r2, r3
 80016dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016e2:	fb03 f001 	mul.w	r0, r3, r1
 80016e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80016e8:	fb02 f101 	mul.w	r1, r2, r1
 80016ec:	1844      	adds	r4, r0, r1
 80016ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016f0:	fba1 0102 	umull	r0, r1, r1, r2
 80016f4:	1863      	adds	r3, r4, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	030b      	lsls	r3, r1, #12
 8001702:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001706:	0302      	lsls	r2, r0, #12
 8001708:	eb18 0102 	adds.w	r1, r8, r2
 800170c:	6139      	str	r1, [r7, #16]
 800170e:	eb49 0303 	adc.w	r3, r9, r3
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001718:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 800171c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001720:	1c11      	adds	r1, r2, #0
 8001722:	6439      	str	r1, [r7, #64]	; 0x40
 8001724:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001728:	647b      	str	r3, [r7, #68]	; 0x44
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <bmp280_compensate_P_int64+0x1d0>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001738:	4629      	mov	r1, r5
 800173a:	fb02 f001 	mul.w	r0, r2, r1
 800173e:	4621      	mov	r1, r4
 8001740:	fb01 f103 	mul.w	r1, r1, r3
 8001744:	4401      	add	r1, r0
 8001746:	4620      	mov	r0, r4
 8001748:	fba0 2302 	umull	r2, r3, r0, r2
 800174c:	4419      	add	r1, r3
 800174e:	460b      	mov	r3, r1
 8001750:	f04f 0000 	mov.w	r0, #0
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	1058      	asrs	r0, r3, #1
 800175a:	17d9      	asrs	r1, r3, #31
 800175c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	if (var1 == 0)
 8001760:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001764:	4313      	orrs	r3, r2
 8001766:	d10f      	bne.n	8001788 <bmp280_compensate_P_int64+0x1d4>
	{
		return 0; // avoid exception caused by division by zero
 8001768:	2300      	movs	r3, #0
 800176a:	e0ef      	b.n	800194c <bmp280_compensate_P_int64+0x398>
 800176c:	2000024c 	.word	0x2000024c
 8001770:	2000024a 	.word	0x2000024a
 8001774:	2000023e 	.word	0x2000023e
 8001778:	2000023c 	.word	0x2000023c
 800177c:	20000242 	.word	0x20000242
 8001780:	2000023a 	.word	0x2000023a
 8001784:	20000240 	.word	0x20000240
	}
	p = 1048576-adc_P;
 8001788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800178e:	461a      	mov	r2, r3
 8001790:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001794:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	p = (((p<<31)-var2)*3125)/var1;
 8001798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179a:	105b      	asrs	r3, r3, #1
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a0:	07db      	lsls	r3, r3, #31
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017a8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80017ac:	4621      	mov	r1, r4
 80017ae:	ebb1 0a02 	subs.w	sl, r1, r2
 80017b2:	4629      	mov	r1, r5
 80017b4:	eb61 0b03 	sbc.w	fp, r1, r3
 80017b8:	4652      	mov	r2, sl
 80017ba:	465b      	mov	r3, fp
 80017bc:	1891      	adds	r1, r2, r2
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	415b      	adcs	r3, r3
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c8:	eb12 020a 	adds.w	r2, r2, sl
 80017cc:	eb43 030b 	adc.w	r3, r3, fp
 80017d0:	f04f 0000 	mov.w	r0, #0
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	0199      	lsls	r1, r3, #6
 80017da:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80017de:	0190      	lsls	r0, r2, #6
 80017e0:	1812      	adds	r2, r2, r0
 80017e2:	eb41 0303 	adc.w	r3, r1, r3
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0099      	lsls	r1, r3, #2
 80017f0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017f4:	0090      	lsls	r0, r2, #2
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	eb12 020a 	adds.w	r2, r2, sl
 80017fe:	eb43 030b 	adc.w	r3, r3, fp
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f04f 0100 	mov.w	r1, #0
 800180a:	0099      	lsls	r1, r3, #2
 800180c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001810:	0090      	lsls	r0, r2, #2
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	eb12 010a 	adds.w	r1, r2, sl
 800181a:	6339      	str	r1, [r7, #48]	; 0x30
 800181c:	eb43 030b 	adc.w	r3, r3, fp
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
 8001822:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001826:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800182a:	f7ff f9bd 	bl	8000ba8 <__aeabi_ldivmod>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001836:	4b48      	ldr	r3, [pc, #288]	; (8001958 <bmp280_compensate_P_int64+0x3a4>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	b218      	sxth	r0, r3
 800183e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001842:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	0b62      	lsrs	r2, r4, #13
 8001850:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001854:	136b      	asrs	r3, r5, #13
 8001856:	fb02 f501 	mul.w	r5, r2, r1
 800185a:	fb00 f403 	mul.w	r4, r0, r3
 800185e:	442c      	add	r4, r5
 8001860:	fba0 0102 	umull	r0, r1, r0, r2
 8001864:	1863      	adds	r3, r4, r1
 8001866:	4619      	mov	r1, r3
 8001868:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	0b62      	lsrs	r2, r4, #13
 8001876:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800187a:	136b      	asrs	r3, r5, #13
 800187c:	fb02 f501 	mul.w	r5, r2, r1
 8001880:	fb00 f403 	mul.w	r4, r0, r3
 8001884:	442c      	add	r4, r5
 8001886:	fba0 0102 	umull	r0, r1, r0, r2
 800188a:	1863      	adds	r3, r4, r1
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	0e42      	lsrs	r2, r0, #25
 8001898:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800189c:	164b      	asrs	r3, r1, #25
 800189e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <bmp280_compensate_P_int64+0x3a8>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018b0:	fb03 f001 	mul.w	r0, r3, r1
 80018b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018b6:	fb02 f101 	mul.w	r1, r2, r1
 80018ba:	1844      	adds	r4, r0, r1
 80018bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018be:	fba1 0102 	umull	r0, r1, r1, r2
 80018c2:	1863      	adds	r3, r4, r1
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	0cc2      	lsrs	r2, r0, #19
 80018d0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018d4:	14cb      	asrs	r3, r1, #19
 80018d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 80018da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018f4:	4621      	mov	r1, r4
 80018f6:	1889      	adds	r1, r1, r2
 80018f8:	6239      	str	r1, [r7, #32]
 80018fa:	4629      	mov	r1, r5
 80018fc:	eb43 0101 	adc.w	r1, r3, r1
 8001900:	6279      	str	r1, [r7, #36]	; 0x24
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800190e:	4623      	mov	r3, r4
 8001910:	0a18      	lsrs	r0, r3, #8
 8001912:	462b      	mov	r3, r5
 8001914:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001918:	462b      	mov	r3, r5
 800191a:	1219      	asrs	r1, r3, #8
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <bmp280_compensate_P_int64+0x3ac>)
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	b21c      	sxth	r4, r3
 8001924:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	012b      	lsls	r3, r5, #4
 8001932:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001936:	0122      	lsls	r2, r4, #4
 8001938:	1884      	adds	r4, r0, r2
 800193a:	603c      	str	r4, [r7, #0]
 800193c:	eb41 0303 	adc.w	r3, r1, r3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001946:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	return (BMP280_U32_t)p;
 800194a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800194c:	4618      	mov	r0, r3
 800194e:	3768      	adds	r7, #104	; 0x68
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	20000246 	.word	0x20000246
 800195c:	20000244 	.word	0x20000244
 8001960:	20000234 	.word	0x20000234

08001964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_GPIO_Init+0x44>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <MX_GPIO_Init+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_GPIO_Init+0x44>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_GPIO_Init+0x44>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <MX_GPIO_Init+0x44>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_GPIO_Init+0x44>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <MX_I2C1_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b8:	f640 6214 	movw	r2, #3604	; 0xe14
 80019bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019ea:	f001 f8c7 	bl	8002b7c <HAL_I2C_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f4:	f000 f962 	bl	8001cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f8:	2100      	movs	r1, #0
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019fc:	f001 fd18 	bl	8003430 <HAL_I2CEx_ConfigAnalogFilter>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a06:	f000 f959 	bl	8001cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C1_Init+0x74>)
 8001a0e:	f001 fd5a 	bl	80034c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a18:	f000 f950 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000250 	.word	0x20000250
 8001a24:	40005400 	.word	0x40005400

08001a28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0ac      	sub	sp, #176	; 0xb0
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2288      	movs	r2, #136	; 0x88
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 f9d1 	bl	8005df0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_I2C_MspInit+0xb0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d13b      	bne.n	8001ad0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fbcb 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a70:	f000 f924 	bl	8001cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_I2C_MspInit+0xb8>)
 8001ab4:	f000 feb8 	bl	8002828 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	37b0      	adds	r7, #176	; 0xb0
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000400 	.word	0x48000400

08001ae4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ae8:	f000 fb9d 	bl	8002226 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001aec:	f000 f87a 	bl	8001be4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001af0:	f7ff ff38 	bl	8001964 <MX_GPIO_Init>
	MX_CAN1_Init();
 8001af4:	f7ff fa24 	bl	8000f40 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001af8:	f7ff ff58 	bl	80019ac <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001afc:	f000 fa8a 	bl	8002014 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001b00:	f000 fa58 	bl	8001fb4 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n========== TP2 : Bus et Réseaux ==========\r\n");
 8001b04:	4830      	ldr	r0, [pc, #192]	; (8001bc8 <main+0xe4>)
 8001b06:	f004 ff15 	bl	8006934 <puts>
	Set_config();
 8001b0a:	f7ff fbdb 	bl	80012c4 <Set_config>
	Get_calib();
 8001b0e:	f7ff fbfb 	bl	8001308 <Get_calib>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001b12:	2201      	movs	r2, #1
 8001b14:	492d      	ldr	r1, [pc, #180]	; (8001bcc <main+0xe8>)
 8001b16:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <main+0xec>)
 8001b18:	f003 f910 	bl	8004d3c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t *) echo, 1);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	492b      	ldr	r1, [pc, #172]	; (8001bcc <main+0xe8>)
 8001b20:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <main+0xf0>)
 8001b22:	f003 f90b 	bl	8004d3c <HAL_UART_Receive_IT>
	Ligne_Init(&huart2);
 8001b26:	482a      	ldr	r0, [pc, #168]	; (8001bd0 <main+0xec>)
 8001b28:	f7ff fa82 	bl	8001030 <Ligne_Init>
	Ligne_Init(&huart4);
 8001b2c:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <main+0xf0>)
 8001b2e:	f7ff fa7f 	bl	8001030 <Ligne_Init>
	while (1)
	{
		if (uart_it==1)
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <main+0xf4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d1fb      	bne.n	8001b32 <main+0x4e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *) echo, 1, 0xFFFF);
 8001b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4922      	ldr	r1, [pc, #136]	; (8001bcc <main+0xe8>)
 8001b42:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <main+0xec>)
 8001b44:	f003 f866 	bl	8004c14 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart4, (uint8_t *) echo, 1, 0xFFFF);
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	491f      	ldr	r1, [pc, #124]	; (8001bcc <main+0xe8>)
 8001b50:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <main+0xf0>)
 8001b52:	f003 f85f 	bl	8004c14 <HAL_UART_Transmit>
			//Exécution de la commande après appui sur la touche entrer
			if (echo[0]==ENTER){
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <main+0xe8>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	220d      	movs	r2, #13
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d10e      	bne.n	8001b7e <main+0x9a>
				Commande_exec(i);
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <main+0xf8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa75 	bl	8001054 <Commande_exec>
				i=0;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <main+0xf8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
				Ligne_Init(&huart2);
 8001b70:	4817      	ldr	r0, [pc, #92]	; (8001bd0 <main+0xec>)
 8001b72:	f7ff fa5d 	bl	8001030 <Ligne_Init>
				Ligne_Init(&huart4);
 8001b76:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <main+0xf0>)
 8001b78:	f7ff fa5a 	bl	8001030 <Ligne_Init>
 8001b7c:	e01f      	b.n	8001bbe <main+0xda>
			}else{
				//Suppression d'un caractère après appui sur la touche delete
				if((echo[0]==DEL)&&(i>0)){
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <main+0xe8>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	227f      	movs	r2, #127	; 0x7f
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10f      	bne.n	8001ba8 <main+0xc4>
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <main+0xf8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dd0b      	ble.n	8001ba8 <main+0xc4>
					Commande[i-1]=0;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <main+0xf8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <main+0xfc>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	54d1      	strb	r1, [r2, r3]
					i=i-1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <main+0xf8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <main+0xf8>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00a      	b.n	8001bbe <main+0xda>
				}else{
					//Ecriture de la commande dans un buffer
					Commande[i]= echo[0];
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <main+0xf8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <main+0xe8>)
 8001bae:	7811      	ldrb	r1, [r2, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <main+0xfc>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
					i=i+1;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <main+0xf8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <main+0xf8>)
 8001bbc:	6013      	str	r3, [r2, #0]
				}
			}
			uart_it=0;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <main+0xf4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
		if (uart_it==1)
 8001bc4:	e7b5      	b.n	8001b32 <main+0x4e>
 8001bc6:	bf00      	nop
 8001bc8:	080089d8 	.word	0x080089d8
 8001bcc:	2000029c 	.word	0x2000029c
 8001bd0:	20000388 	.word	0x20000388
 8001bd4:	20000304 	.word	0x20000304
 8001bd8:	200001f8 	.word	0x200001f8
 8001bdc:	200001fc 	.word	0x200001fc
 8001be0:	200002a0 	.word	0x200002a0

08001be4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b096      	sub	sp, #88	; 0x58
 8001be8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	2244      	movs	r2, #68	; 0x44
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 f8fc 	bl	8005df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c0a:	f001 fcb7 	bl	800357c <HAL_PWREx_ControlVoltageScaling>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001c14:	f000 f852 	bl	8001cbc <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c18:	2310      	movs	r3, #16
 8001c1a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c24:	2360      	movs	r3, #96	; 0x60
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 fcf9 	bl	8003628 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 8001c3c:	f000 f83e 	bl	8001cbc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f8cb 	bl	8003df4 <HAL_RCC_ClockConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001c64:	f000 f82a 	bl	8001cbc <Error_Handler>
	}
}
 8001c68:	bf00      	nop
 8001c6a:	3758      	adds	r7, #88	; 0x58
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	uart_it=1;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_UART_RxCpltCallback+0x38>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
	if(huart->Instance==UART4){
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_UART_RxCpltCallback+0x3c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d105      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart4, (uint8_t *) echo, 1);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <HAL_UART_RxCpltCallback+0x40>)
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_UART_RxCpltCallback+0x44>)
 8001c8e:	f003 f855 	bl	8004d3c <HAL_UART_Receive_IT>
	}else{
		HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
	}
}
 8001c92:	e004      	b.n	8001c9e <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <HAL_UART_RxCpltCallback+0x40>)
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <HAL_UART_RxCpltCallback+0x48>)
 8001c9a:	f003 f84f 	bl	8004d3c <HAL_UART_Receive_IT>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200001f8 	.word	0x200001f8
 8001cac:	40004c00 	.word	0x40004c00
 8001cb0:	2000029c 	.word	0x2000029c
 8001cb4:	20000304 	.word	0x20000304
 8001cb8:	20000388 	.word	0x20000388

08001cbc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <Error_Handler+0x8>
	...

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_MspInit+0x44>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_MspInit+0x44>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_MspInit+0x44>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_MspInit+0x44>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8001d18:	1d39      	adds	r1, r7, #4
 8001d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <__io_putchar+0x30>)
 8001d22:	f002 ff77 	bl	8004c14 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d26:	1d39      	adds	r1, r7, #4
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <__io_putchar+0x34>)
 8001d30:	f002 ff70 	bl	8004c14 <HAL_UART_Transmit>

  return ch;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000304 	.word	0x20000304
 8001d44:	20000388 	.word	0x20000388

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d94:	f000 fa9c 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USART2_IRQHandler+0x10>)
 8001da2:	f003 f80f 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000388 	.word	0x20000388

08001db0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <UART4_IRQHandler+0x10>)
 8001db6:	f003 f805 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000304 	.word	0x20000304

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dde:	f003 ffcd 	bl	8005d7c <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2216      	movs	r2, #22
 8001de6:	601a      	str	r2, [r3, #0]
	return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe7 	bl	8001dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e06:	e7fe      	b.n	8001e06 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
	}

return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff57 	bl	8001d10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf1      	blt.n	8001e54 <_write+0x12>
	}
	return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_close>:

int _close(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_isatty>:

int _isatty(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f003 ff32 	bl	8005d7c <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20018000 	.word	0x20018000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20000200 	.word	0x20000200
 8001f4c:	20000420 	.word	0x20000420

08001f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <SystemInit+0x5c>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <SystemInit+0x5c>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <SystemInit+0x60>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <SystemInit+0x60>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <SystemInit+0x60>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <SystemInit+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <SystemInit+0x60>)
 8001f7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <SystemInit+0x60>)
 8001f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <SystemInit+0x60>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <SystemInit+0x60>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SystemInit+0x60>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_UART4_Init+0x58>)
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <MX_UART4_Init+0x5c>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <MX_UART4_Init+0x58>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_UART4_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_UART4_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_UART4_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_UART4_Init+0x58>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_UART4_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_UART4_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_UART4_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_UART4_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_UART4_Init+0x58>)
 8001ff8:	f002 fdbe 	bl	8004b78 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002002:	f7ff fe5b 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000304 	.word	0x20000304
 8002010:	40004c00 	.word	0x40004c00

08002014 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_USART2_UART_Init+0x58>)
 800201a:	4a15      	ldr	r2, [pc, #84]	; (8002070 <MX_USART2_UART_Init+0x5c>)
 800201c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_USART2_UART_Init+0x58>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART2_UART_Init+0x58>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USART2_UART_Init+0x58>)
 8002058:	f002 fd8e 	bl	8004b78 <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002062:	f7ff fe2b 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000388 	.word	0x20000388
 8002070:	40004400 	.word	0x40004400

08002074 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0ae      	sub	sp, #184	; 0xb8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2288      	movs	r2, #136	; 0x88
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f003 feab 	bl	8005df0 <memset>
  if(uartHandle->Instance==UART4)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4a      	ldr	r2, [pc, #296]	; (80021c8 <HAL_UART_MspInit+0x154>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d144      	bne.n	800212e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020a4:	2308      	movs	r3, #8
 80020a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 f8a5 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020bc:	f7ff fdfe 	bl	8001cbc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020c0:	4b42      	ldr	r3, [pc, #264]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a41      	ldr	r2, [pc, #260]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e4:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_UART_MspInit+0x158>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020f0:	2303      	movs	r3, #3
 80020f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002108:	2308      	movs	r3, #8
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f000 fb86 	bl	8002828 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2034      	movs	r0, #52	; 0x34
 8002122:	f000 facc 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002126:	2034      	movs	r0, #52	; 0x34
 8002128:	f000 fae5 	bl	80026f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800212c:	e048      	b.n	80021c0 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_UART_MspInit+0x15c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d143      	bne.n	80021c0 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800213c:	2300      	movs	r3, #0
 800213e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4618      	mov	r0, r3
 8002146:	f002 f85b 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002150:	f7ff fdb4 	bl	8001cbc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_UART_MspInit+0x158>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_UART_MspInit+0x158>)
 800215a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215e:	6593      	str	r3, [r2, #88]	; 0x58
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_UART_MspInit+0x158>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_UART_MspInit+0x158>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_UART_MspInit+0x158>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_UART_MspInit+0x158>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002184:	230c      	movs	r3, #12
 8002186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219c:	2307      	movs	r3, #7
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f000 fb3c 	bl	8002828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2026      	movs	r0, #38	; 0x26
 80021b6:	f000 fa82 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ba:	2026      	movs	r0, #38	; 0x26
 80021bc:	f000 fa9b 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 80021c0:	bf00      	nop
 80021c2:	37b8      	adds	r7, #184	; 0xb8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40004c00 	.word	0x40004c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40004400 	.word	0x40004400

080021d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d8:	f7ff feba 	bl	8001f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021de:	e003      	b.n	80021e8 <LoopCopyDataInit>

080021e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021e6:	3104      	adds	r1, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021f0:	d3f6      	bcc.n	80021e0 <CopyDataInit>
	ldr	r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopForever+0x12>)
	b	LoopFillZerobss
 80021f4:	e002      	b.n	80021fc <LoopFillZerobss>

080021f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021f8:	f842 3b04 	str.w	r3, [r2], #4

080021fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LoopForever+0x16>)
	cmp	r2, r3
 80021fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002200:	d3f9      	bcc.n	80021f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002202:	f003 fdc1 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002206:	f7ff fc6d 	bl	8001ae4 <main>

0800220a <LoopForever>:

LoopForever:
    b LoopForever
 800220a:	e7fe      	b.n	800220a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002210:	08008e74 	.word	0x08008e74
	ldr	r0, =_sdata
 8002214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002218:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800221c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002220:	20000420 	.word	0x20000420

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>

08002226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 fa39 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	200f      	movs	r0, #15
 8002238:	f000 f80e 	bl	8002258 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	e001      	b.n	800224c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002248:	f7ff fd3e 	bl	8001cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224c:	79fb      	ldrb	r3, [r7, #7]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_InitTick+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d023      	beq.n	80022b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_InitTick+0x70>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_InitTick+0x6c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fa45 	bl	8002712 <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d809      	bhi.n	80022a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f000 fa0f 	bl	80026be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_InitTick+0x74>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e004      	b.n	80022b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e001      	b.n	80022b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000008 	.word	0x20000008
 80022f4:	2000040c 	.word	0x2000040c

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000040c 	.word	0x2000040c

08002310 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0ed      	b.n	80024fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fe3a 	bl	8000fa8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0202 	bic.w	r2, r2, #2
 8002342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002344:	f7ff ffd8 	bl	80022f8 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234a:	e012      	b.n	8002372 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800234c:	f7ff ffd4 	bl	80022f8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b0a      	cmp	r3, #10
 8002358:	d90b      	bls.n	8002372 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0c5      	b.n	80024fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e5      	bne.n	800234c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7ff ffb2 	bl	80022f8 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002396:	e012      	b.n	80023be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002398:	f7ff ffae 	bl	80022f8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b0a      	cmp	r3, #10
 80023a4:	d90b      	bls.n	80023be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2205      	movs	r2, #5
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e09f      	b.n	80024fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0e5      	beq.n	8002398 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e007      	b.n	80023f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7e5b      	ldrb	r3, [r3, #25]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e007      	b.n	8002420 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7e9b      	ldrb	r3, [r3, #26]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0220 	bic.w	r2, r2, #32
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7edb      	ldrb	r3, [r3, #27]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0210 	bic.w	r2, r2, #16
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e007      	b.n	8002474 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0210 	orr.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f1b      	ldrb	r3, [r3, #28]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f5b      	ldrb	r3, [r3, #29]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0204 	orr.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d008      	beq.n	8002754 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e022      	b.n	800279a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f003 021c 	and.w	r2, r3, #28
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d005      	beq.n	80027ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2204      	movs	r2, #4
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e029      	b.n	800281e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 020e 	bic.w	r2, r2, #14
 80027d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 021c 	and.w	r2, r3, #28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    }
  }
  return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	e17f      	b.n	8002b38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8171 	beq.w	8002b32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d00b      	beq.n	8002870 <HAL_GPIO_Init+0x48>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002864:	2b11      	cmp	r3, #17
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0201 	and.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d118      	bne.n	8002910 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028e4:	2201      	movs	r2, #1
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0201 	and.w	r2, r3, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x128>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b12      	cmp	r3, #18
 800294e:	d123      	bne.n	8002998 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	08da      	lsrs	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3208      	adds	r2, #8
 8002992:	6939      	ldr	r1, [r7, #16]
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80ac 	beq.w	8002b32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6613      	str	r3, [r2, #96]	; 0x60
 80029e6:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_GPIO_Init+0x330>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f2:	4a5a      	ldr	r2, [pc, #360]	; (8002b5c <HAL_GPIO_Init+0x334>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x242>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x338>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x23e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4e      	ldr	r2, [pc, #312]	; (8002b64 <HAL_GPIO_Init+0x33c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x23a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4d      	ldr	r2, [pc, #308]	; (8002b68 <HAL_GPIO_Init+0x340>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x236>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x344>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x232>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <HAL_GPIO_Init+0x348>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x22e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_GPIO_Init+0x34c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x22a>
 8002a4e:	2306      	movs	r3, #6
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x244>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a7c:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_GPIO_Init+0x350>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f ae78 	bne.w	8002838 <HAL_GPIO_Init+0x10>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48000800 	.word	0x48000800
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48001000 	.word	0x48001000
 8002b70:	48001400 	.word	0x48001400
 8002b74:	48001800 	.word	0x48001800
 8002b78:	40010400 	.word	0x40010400

08002b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e081      	b.n	8002c92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe ff40 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e006      	b.n	8002c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d104      	bne.n	8002c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	ea42 0103 	orr.w	r1, r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	460b      	mov	r3, r1
 8002caa:	817b      	strh	r3, [r7, #10]
 8002cac:	4613      	mov	r3, r2
 8002cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	f040 80da 	bne.w	8002e72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0x30>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0d3      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cd4:	f7ff fb10 	bl	80022f8 <HAL_GetTick>
 8002cd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2319      	movs	r3, #25
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f9e6 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0be      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2210      	movs	r2, #16
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2bff      	cmp	r3, #255	; 0xff
 8002d26:	d90e      	bls.n	8002d46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	22ff      	movs	r2, #255	; 0xff
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fb48 	bl	80033d4 <I2C_TransferConfig>
 8002d44:	e06c      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	8979      	ldrh	r1, [r7, #10]
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb37 	bl	80033d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d66:	e05b      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f9e3 	bl	8003138 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e07b      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d034      	beq.n	8002e20 <HAL_I2C_Master_Transmit+0x184>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d130      	bne.n	8002e20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f975 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e04d      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d90e      	bls.n	8002e00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 faeb 	bl	80033d4 <I2C_TransferConfig>
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fada 	bl	80033d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d19e      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f9c2 	bl	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01a      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e52:	400b      	ands	r3, r1
 8002e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	80002000 	.word	0x80002000
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 80db 	bne.w	800305c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_Master_Receive+0x30>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0d4      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ebc:	f7ff fa1c 	bl	80022f8 <HAL_GetTick>
 8002ec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2319      	movs	r3, #25
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8f2 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0bf      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2222      	movs	r2, #34	; 0x22
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	893a      	ldrh	r2, [r7, #8]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2bff      	cmp	r3, #255	; 0xff
 8002f0e:	d90e      	bls.n	8002f2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	22ff      	movs	r2, #255	; 0xff
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	4b52      	ldr	r3, [pc, #328]	; (8003068 <HAL_I2C_Master_Receive+0x1e4>)
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa54 	bl	80033d4 <I2C_TransferConfig>
 8002f2c:	e06d      	b.n	800300a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_I2C_Master_Receive+0x1e4>)
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa43 	bl	80033d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f4e:	e05c      	b.n	800300a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f96b 	bl	8003230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e07c      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d034      	beq.n	800300a <HAL_I2C_Master_Receive+0x186>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d130      	bne.n	800300a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f880 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e04d      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2bff      	cmp	r3, #255	; 0xff
 8002fca:	d90e      	bls.n	8002fea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f9f6 	bl	80033d4 <I2C_TransferConfig>
 8002fe8:	e00f      	b.n	800300a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9e5 	bl	80033d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d19d      	bne.n	8002f50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	6a39      	ldr	r1, [r7, #32]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f8cd 	bl	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e01a      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_I2C_Master_Receive+0x1e8>)
 800303c:	400b      	ands	r3, r1
 800303e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	80002400 	.word	0x80002400
 800306c:	fe00e800 	.word	0xfe00e800

08003070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d103      	bne.n	800308e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d007      	beq.n	80030ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	619a      	str	r2, [r3, #24]
  }
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c8:	e022      	b.n	8003110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d01e      	beq.n	8003110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7ff f911 	bl	80022f8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d113      	bne.n	8003110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00f      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	429a      	cmp	r2, r3
 800312c:	d0cd      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003144:	e02c      	b.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f8dc 	bl	8003308 <I2C_IsAcknowledgeFailed>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e02a      	b.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d01e      	beq.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7ff f8c9 	bl	80022f8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d113      	bne.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d1cb      	bne.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c4:	e028      	b.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f89c 	bl	8003308 <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e026      	b.n	8003228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f88d 	bl	80022f8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e007      	b.n	8003228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b20      	cmp	r3, #32
 8003224:	d1cf      	bne.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800323c:	e055      	b.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f860 	bl	8003308 <I2C_IsAcknowledgeFailed>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e053      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d129      	bne.n	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d105      	bne.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e03f      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2220      	movs	r2, #32
 8003280:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800328e:	400b      	ands	r3, r1
 8003290:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e022      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7ff f820 	bl	80022f8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d1a2      	bne.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	fe00e800 	.word	0xfe00e800

08003308 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	d151      	bne.n	80033c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003322:	e022      	b.n	800336a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d01e      	beq.n	800336a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe ffe4 	bl	80022f8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <I2C_IsAcknowledgeFailed+0x3a>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02e      	b.n	80033c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	d1d5      	bne.n	8003324 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2220      	movs	r2, #32
 8003386:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff fe71 	bl	8003070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800339a:	400b      	ands	r3, r1
 800339c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fe00e800 	.word	0xfe00e800

080033d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	4613      	mov	r3, r2
 80033e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	0d5b      	lsrs	r3, r3, #21
 80033f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <I2C_TransferConfig+0x58>)
 80033f6:	430b      	orrs	r3, r1
 80033f8:	43db      	mvns	r3, r3
 80033fa:	ea02 0103 	and.w	r1, r2, r3
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003404:	7a7b      	ldrb	r3, [r7, #9]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	431a      	orrs	r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	03ff63ff 	.word	0x03ff63ff

08003430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b20      	cmp	r3, #32
 8003444:	d138      	bne.n	80034b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003450:	2302      	movs	r3, #2
 8003452:	e032      	b.n	80034ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d139      	bne.n	8003550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e033      	b.n	8003552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2224      	movs	r2, #36	; 0x24
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_PWREx_GetVoltageRange+0x18>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40007000 	.word	0x40007000

0800357c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	d130      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003598:	d038      	beq.n	800360c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2232      	movs	r2, #50	; 0x32
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0c9b      	lsrs	r3, r3, #18
 80035bc:	3301      	adds	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c0:	e002      	b.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d102      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f2      	bne.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d110      	bne.n	800360c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d007      	beq.n	800360c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003604:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40007000 	.word	0x40007000
 8003620:	20000000 	.word	0x20000000
 8003624:	431bde83 	.word	0x431bde83

08003628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e3d4      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363a:	4ba1      	ldr	r3, [pc, #644]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003644:	4b9e      	ldr	r3, [pc, #632]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80e4 	beq.w	8003824 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_RCC_OscConfig+0x4a>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	f040 808b 	bne.w	8003780 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b01      	cmp	r3, #1
 800366e:	f040 8087 	bne.w	8003780 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003672:	4b93      	ldr	r3, [pc, #588]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e3ac      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_RCC_OscConfig+0x7c>
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_OscConfig+0x88>
 80036a4:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d223      	bcs.n	80036fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fd41 	bl	8004140 <RCC_SetFlashLatencyFromMSIRange>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e38d      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c8:	4b7d      	ldr	r3, [pc, #500]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7c      	ldr	r2, [pc, #496]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4977      	ldr	r1, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e6:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	4972      	ldr	r1, [pc, #456]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
 80036fa:	e025      	b.n	8003748 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6f      	ldr	r2, [pc, #444]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b6d      	ldr	r3, [pc, #436]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	496a      	ldr	r1, [pc, #424]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b69      	ldr	r3, [pc, #420]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	4965      	ldr	r1, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fd01 	bl	8004140 <RCC_SetFlashLatencyFromMSIRange>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e34d      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003748:	f000 fc36 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	495a      	ldr	r1, [pc, #360]	; (80038c4 <HAL_RCC_OscConfig+0x29c>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_RCC_OscConfig+0x2a0>)
 8003766:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003768:	4b58      	ldr	r3, [pc, #352]	; (80038cc <HAL_RCC_OscConfig+0x2a4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fd73 	bl	8002258 <HAL_InitTick>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d052      	beq.n	8003822 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	e331      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d032      	beq.n	80037ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003794:	f7fe fdb0 	bl	80022f8 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379c:	f7fe fdac 	bl	80022f8 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e31a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	493b      	ldr	r1, [pc, #236]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
 80037ec:	e01a      	b.n	8003824 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037fa:	f7fe fd7d 	bl	80022f8 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003802:	f7fe fd79 	bl	80022f8 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e2e7      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x1da>
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003822:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d074      	beq.n	800391a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x21a>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d10e      	bne.n	800385a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d064      	beq.n	8003918 <HAL_RCC_OscConfig+0x2f0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d160      	bne.n	8003918 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e2c4      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x24a>
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e01d      	b.n	80038ae <HAL_RCC_OscConfig+0x286>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x26e>
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x286>
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <HAL_RCC_OscConfig+0x298>)
 80038a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd1f 	bl	80022f8 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038bc:	e011      	b.n	80038e2 <HAL_RCC_OscConfig+0x2ba>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08008a38 	.word	0x08008a38
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe fd12 	bl	80022f8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e280      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	4baf      	ldr	r3, [pc, #700]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2a8>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe fd02 	bl	80022f8 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fcfe 	bl	80022f8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e26c      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800390a:	4ba5      	ldr	r3, [pc, #660]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d0>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d060      	beq.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d005      	beq.n	8003938 <HAL_RCC_OscConfig+0x310>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d119      	bne.n	8003966 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d116      	bne.n	8003966 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003938:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_OscConfig+0x328>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e249      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b93      	ldr	r3, [pc, #588]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	4990      	ldr	r1, [pc, #576]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003964:	e040      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d023      	beq.n	80039b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396e:	4b8c      	ldr	r3, [pc, #560]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a8b      	ldr	r2, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fe fcbd 	bl	80022f8 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003982:	f7fe fcb9 	bl	80022f8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e227      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003994:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	497c      	ldr	r1, [pc, #496]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	e018      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a79      	ldr	r2, [pc, #484]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fc99 	bl	80022f8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe fc95 	bl	80022f8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e203      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a02:	4a67      	ldr	r2, [pc, #412]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fc74 	bl	80022f8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe fc70 	bl	80022f8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1de      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ef      	beq.n	8003a14 <HAL_RCC_OscConfig+0x3ec>
 8003a34:	e01b      	b.n	8003a6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a36:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fe fc57 	bl	80022f8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fe fc53 	bl	80022f8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1c1      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a60:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ef      	bne.n	8003a4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80a6 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	4a43      	ldr	r2, [pc, #268]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	; 0x58
 8003a98:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCC_OscConfig+0x57c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d118      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_OscConfig+0x57c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCC_OscConfig+0x57c>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac0:	f7fe fc1a 	bl	80022f8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fe fc16 	bl	80022f8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e184      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ada:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCC_OscConfig+0x57c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4d8>
 8003aee:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afe:	e024      	b.n	8003b4a <HAL_RCC_OscConfig+0x522>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d110      	bne.n	8003b2a <HAL_RCC_OscConfig+0x502>
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b28:	e00f      	b.n	8003b4a <HAL_RCC_OscConfig+0x522>
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fe fbd1 	bl	80022f8 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe fbcd 	bl	80022f8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e139      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x578>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ed      	beq.n	8003b5a <HAL_RCC_OscConfig+0x532>
 8003b7e:	e01a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe fbba 	bl	80022f8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe fbb6 	bl	80022f8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d906      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e122      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba8:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e8      	bne.n	8003b88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8108 	beq.w	8003de2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	f040 80d0 	bne.w	8003d7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bdc:	4b83      	ldr	r3, [pc, #524]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0203 	and.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d130      	bne.n	8003c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d127      	bne.n	8003c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d11f      	bne.n	8003c52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c1c:	2a07      	cmp	r2, #7
 8003c1e:	bf14      	ite	ne
 8003c20:	2201      	movne	r2, #1
 8003c22:	2200      	moveq	r2, #0
 8003c24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d113      	bne.n	8003c52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d06e      	beq.n	8003d30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d069      	beq.n	8003d2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c58:	4b64      	ldr	r3, [pc, #400]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b7      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c74:	4b5d      	ldr	r3, [pc, #372]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c80:	f7fe fb3a 	bl	80022f8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fb36 	bl	80022f8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0a4      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <HAL_RCC_OscConfig+0x7c8>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cc0:	0212      	lsls	r2, r2, #8
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc8:	0852      	lsrs	r2, r2, #1
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0552      	lsls	r2, r2, #21
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cd4:	0852      	lsrs	r2, r2, #1
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	0652      	lsls	r2, r2, #25
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce0:	0912      	lsrs	r2, r2, #4
 8003ce2:	0452      	lsls	r2, r2, #17
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	4941      	ldr	r1, [pc, #260]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cec:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf8:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d04:	f7fe faf8 	bl	80022f8 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe faf4 	bl	80022f8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e062      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d2a:	e05a      	b.n	8003de2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e059      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d30:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d152      	bne.n	8003de2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d48:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d54:	f7fe fad0 	bl	80022f8 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe facc 	bl	80022f8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e03a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x734>
 8003d7a:	e032      	b.n	8003de2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d02d      	beq.n	8003dde <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a19      	ldr	r2, [pc, #100]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003dac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fe fa9f 	bl	80022f8 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fa9b 	bl	80022f8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e009      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_OscConfig+0x7c4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x796>
 8003ddc:	e001      	b.n	8003de2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	f99d808c 	.word	0xf99d808c

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0c8      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4961      	ldr	r1, [pc, #388]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b0      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04c      	beq.n	8003ede <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4c:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d121      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e09e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e64:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e092      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7c:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e086      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e07e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 0203 	bic.w	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	493f      	ldr	r1, [pc, #252]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eae:	f7fe fa23 	bl	80022f8 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb6:	f7fe fa1f 	bl	80022f8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e066      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 020c 	and.w	r2, r3, #12
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d1eb      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	492c      	ldr	r1, [pc, #176]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d210      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	4924      	ldr	r1, [pc, #144]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e036      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4918      	ldr	r1, [pc, #96]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4910      	ldr	r1, [pc, #64]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6a:	f000 f825 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490c      	ldr	r1, [pc, #48]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe f962 	bl	8002258 <HAL_InitTick>
 8003f94:	4603      	mov	r3, r0
 8003f96:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f98:	7afb      	ldrb	r3, [r7, #11]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	08008a38 	.word	0x08008a38
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	20000004 	.word	0x20000004

08003fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x34>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d121      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d11e      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fec:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e005      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004008:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d102      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004030:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e004      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d101      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800403c:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_RCC_GetSysClockFreq+0x114>)
 800403e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d134      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0xa6>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d003      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0xac>
 800405c:	e005      	b.n	800406a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800405e:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004060:	617b      	str	r3, [r7, #20]
      break;
 8004062:	e005      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004066:	617b      	str	r3, [r7, #20]
      break;
 8004068:	e002      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	617b      	str	r3, [r7, #20]
      break;
 800406e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	3301      	adds	r3, #1
 800407c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	fb02 f203 	mul.w	r2, r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	0e5b      	lsrs	r3, r3, #25
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	3301      	adds	r3, #1
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040b0:	69bb      	ldr	r3, [r7, #24]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08008a50 	.word	0x08008a50
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	08008a48 	.word	0x08008a48

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004118:	f7ff ffda 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0adb      	lsrs	r3, r3, #11
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCC_GetPCLK2Freq+0x28>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000
 800413c:	08008a48 	.word	0x08008a48

08004140 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004158:	f7ff fa02 	bl	8003560 <HAL_PWREx_GetVoltageRange>
 800415c:	6178      	str	r0, [r7, #20]
 800415e:	e014      	b.n	800418a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6593      	str	r3, [r2, #88]	; 0x58
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004178:	f7ff f9f2 	bl	8003560 <HAL_PWREx_GetVoltageRange>
 800417c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d10b      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d919      	bls.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2ba0      	cmp	r3, #160	; 0xa0
 800419c:	d902      	bls.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800419e:	2302      	movs	r3, #2
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e013      	b.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041a4:	2301      	movs	r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e010      	b.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d902      	bls.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041b0:	2303      	movs	r3, #3
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e00a      	b.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d102      	bne.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041bc:	2302      	movs	r3, #2
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e004      	b.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d101      	bne.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c8:	2301      	movs	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 0207 	bic.w	r2, r3, #7
 80041d4:	4909      	ldr	r1, [pc, #36]	; (80041fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d001      	beq.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40022000 	.word	0x40022000

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004208:	2300      	movs	r3, #0
 800420a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800420c:	2300      	movs	r3, #0
 800420e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d041      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004220:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004224:	d02a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004226:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800422a:	d824      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800422c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004236:	d81e      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004240:	d010      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004242:	e018      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004244:	4b86      	ldr	r3, [pc, #536]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a85      	ldr	r2, [pc, #532]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004250:	e015      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fabb 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004262:	e00c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3320      	adds	r3, #32
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fba6 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	74fb      	strb	r3, [r7, #19]
      break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800427c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004284:	4b76      	ldr	r3, [pc, #472]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004292:	4973      	ldr	r1, [pc, #460]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d041      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042b4:	d02a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ba:	d824      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c6:	d81e      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d0:	d010      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042d2:	e018      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042d4:	4b62      	ldr	r3, [pc, #392]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a61      	ldr	r2, [pc, #388]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042e0:	e015      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fa73 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042f2:	e00c      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3320      	adds	r3, #32
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fb5e 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004304:	e003      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	74fb      	strb	r3, [r7, #19]
      break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800430c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004314:	4b52      	ldr	r3, [pc, #328]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004322:	494f      	ldr	r1, [pc, #316]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a0 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	4a40      	ldr	r2, [pc, #256]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004362:	6593      	str	r3, [r2, #88]	; 0x58
 8004364:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004370:	2301      	movs	r3, #1
 8004372:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004374:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800437a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004380:	f7fd ffba 	bl	80022f8 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004386:	e009      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fd ffb6 	bl	80022f8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d902      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	74fb      	strb	r3, [r7, #19]
        break;
 800439a:	e005      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800439c:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ef      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d15c      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ae:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d019      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043cc:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d8:	4b21      	ldr	r3, [pc, #132]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a20      	ldr	r2, [pc, #128]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd ff75 	bl	80022f8 <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004410:	e00b      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd ff71 	bl	80022f8 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d902      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	74fb      	strb	r3, [r7, #19]
            break;
 8004428:	e006      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ec      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444e:	4904      	ldr	r1, [pc, #16]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004456:	e009      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
 800445c:	e006      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800446c:	7c7b      	ldrb	r3, [r7, #17]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b9e      	ldr	r3, [pc, #632]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4a9d      	ldr	r2, [pc, #628]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448a:	4b98      	ldr	r3, [pc, #608]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f023 0203 	bic.w	r2, r3, #3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	4994      	ldr	r1, [pc, #592]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ac:	4b8f      	ldr	r3, [pc, #572]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 020c 	bic.w	r2, r3, #12
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	498c      	ldr	r1, [pc, #560]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ce:	4b87      	ldr	r3, [pc, #540]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	4983      	ldr	r1, [pc, #524]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044f0:	4b7e      	ldr	r3, [pc, #504]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	497b      	ldr	r1, [pc, #492]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004512:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004520:	4972      	ldr	r1, [pc, #456]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004534:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	496a      	ldr	r1, [pc, #424]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	4961      	ldr	r1, [pc, #388]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004578:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004586:	4959      	ldr	r1, [pc, #356]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800459a:	4b54      	ldr	r3, [pc, #336]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a8:	4950      	ldr	r1, [pc, #320]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045bc:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	4948      	ldr	r1, [pc, #288]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045de:	4b43      	ldr	r3, [pc, #268]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	493f      	ldr	r1, [pc, #252]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d028      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004600:	4b3a      	ldr	r3, [pc, #232]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460e:	4937      	ldr	r1, [pc, #220]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461e:	d106      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004620:	4b32      	ldr	r3, [pc, #200]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a31      	ldr	r2, [pc, #196]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462a:	60d3      	str	r3, [r2, #12]
 800462c:	e011      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004636:	d10c      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f8c8 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d028      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	491f      	ldr	r1, [pc, #124]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467c:	d106      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004688:	60d3      	str	r3, [r2, #12]
 800468a:	e011      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004694:	d10c      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f899 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02b      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ca:	4908      	ldr	r1, [pc, #32]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046da:	d109      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a02      	ldr	r2, [pc, #8]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e6:	60d3      	str	r3, [r2, #12]
 80046e8:	e014      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2101      	movs	r1, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f867 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02f      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	4928      	ldr	r1, [pc, #160]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473e:	d10d      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f844 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d014      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	74bb      	strb	r3, [r7, #18]
 800475a:	e011      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3320      	adds	r3, #32
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f925 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800478c:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047be:	4904      	ldr	r1, [pc, #16]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000

080047d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047e2:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ee:	4b72      	ldr	r3, [pc, #456]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d10d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
       ||
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004806:	4b6c      	ldr	r3, [pc, #432]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
       ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d047      	beq.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
 800481e:	e044      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d018      	beq.n	800485a <RCCEx_PLLSAI1_Config+0x86>
 8004828:	2b03      	cmp	r3, #3
 800482a:	d825      	bhi.n	8004878 <RCCEx_PLLSAI1_Config+0xa4>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <RCCEx_PLLSAI1_Config+0x62>
 8004830:	2b02      	cmp	r3, #2
 8004832:	d009      	beq.n	8004848 <RCCEx_PLLSAI1_Config+0x74>
 8004834:	e020      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004836:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11d      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004846:	e01a      	b.n	800487e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004848:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d116      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004858:	e013      	b.n	8004882 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800485a:	4b57      	ldr	r3, [pc, #348]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004866:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004876:	e006      	b.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	e004      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
 8004880:	e002      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004886:	bf00      	nop
    }

    if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800488e:	4b4a      	ldr	r3, [pc, #296]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	3b01      	subs	r3, #1
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	430b      	orrs	r3, r1
 80048a4:	4944      	ldr	r1, [pc, #272]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d17d      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048b0:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fd1c 	bl	80022f8 <HAL_GetTick>
 80048c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c2:	e009      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c4:	f7fd fd18 	bl	80022f8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d902      	bls.n	80048d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	73fb      	strb	r3, [r7, #15]
        break;
 80048d6:	e005      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d8:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ef      	bne.n	80048c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d160      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d111      	bne.n	8004914 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f0:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	0211      	lsls	r1, r2, #8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68d2      	ldr	r2, [r2, #12]
 8004906:	0912      	lsrs	r2, r2, #4
 8004908:	0452      	lsls	r2, r2, #17
 800490a:	430a      	orrs	r2, r1
 800490c:	492a      	ldr	r1, [pc, #168]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	610b      	str	r3, [r1, #16]
 8004912:	e027      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d112      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800491a:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004922:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	0211      	lsls	r1, r2, #8
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6912      	ldr	r2, [r2, #16]
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0552      	lsls	r2, r2, #21
 8004936:	430a      	orrs	r2, r1
 8004938:	491f      	ldr	r1, [pc, #124]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
 800493e:	e011      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6892      	ldr	r2, [r2, #8]
 8004950:	0211      	lsls	r1, r2, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6952      	ldr	r2, [r2, #20]
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0652      	lsls	r2, r2, #25
 800495c:	430a      	orrs	r2, r1
 800495e:	4916      	ldr	r1, [pc, #88]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004964:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800496e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fd fcc2 	bl	80022f8 <HAL_GetTick>
 8004974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004976:	e009      	b.n	800498c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004978:	f7fd fcbe 	bl	80022f8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d902      	bls.n	800498c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	73fb      	strb	r3, [r7, #15]
          break;
 800498a:	e005      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ef      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	4904      	ldr	r1, [pc, #16]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000

080049bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049ee:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
       ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d047      	beq.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e044      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d018      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x86>
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d825      	bhi.n	8004a60 <RCCEx_PLLSAI2_Config+0xa4>
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <RCCEx_PLLSAI2_Config+0x62>
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d009      	beq.n	8004a30 <RCCEx_PLLSAI2_Config+0x74>
 8004a1c:	e020      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a1e:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11d      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2e:	e01a      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a40:	e013      	b.n	8004a6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a42:	4b4c      	ldr	r3, [pc, #304]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a5e:	e006      	b.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e004      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	4939      	ldr	r1, [pc, #228]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d167      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fd fc28 	bl	80022f8 <HAL_GetTick>
 8004aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aaa:	e009      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aac:	f7fd fc24 	bl	80022f8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d902      	bls.n	8004ac0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	73fb      	strb	r3, [r7, #15]
        break;
 8004abe:	e005      	b.n	8004acc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ef      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d14a      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d111      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6892      	ldr	r2, [r2, #8]
 8004ae8:	0211      	lsls	r1, r2, #8
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	0912      	lsrs	r2, r2, #4
 8004af0:	0452      	lsls	r2, r2, #17
 8004af2:	430a      	orrs	r2, r1
 8004af4:	491f      	ldr	r1, [pc, #124]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	614b      	str	r3, [r1, #20]
 8004afa:	e011      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	0211      	lsls	r1, r2, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	0852      	lsrs	r2, r2, #1
 8004b14:	3a01      	subs	r2, #1
 8004b16:	0652      	lsls	r2, r2, #25
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	4916      	ldr	r1, [pc, #88]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd fbe4 	bl	80022f8 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b32:	e009      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b34:	f7fd fbe0 	bl	80022f8 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d902      	bls.n	8004b48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	73fb      	strb	r3, [r7, #15]
          break;
 8004b46:	e005      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0ef      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4904      	ldr	r1, [pc, #16]	; (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000

08004b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e040      	b.n	8004c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd fa6a 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2224      	movs	r2, #36	; 0x24
 8004ba4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fb26 	bl	8005208 <UART_SetConfig>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e022      	b.n	8004c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fda4 	bl	800571c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fe2b 	bl	8005860 <UART_CheckIdleState>
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f040 8082 	bne.w	8004d32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_Transmit+0x26>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07a      	b.n	8004d34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Transmit+0x38>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e073      	b.n	8004d34 <HAL_UART_Transmit+0x120>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2221      	movs	r2, #33	; 0x21
 8004c60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fd fb49 	bl	80022f8 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c80:	d108      	bne.n	8004c94 <HAL_UART_Transmit+0x80>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e003      	b.n	8004c9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ca4:	e02d      	b.n	8004d02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fe1e 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e039      	b.n	8004d34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3302      	adds	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	e008      	b.n	8004cf0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1cb      	bne.n	8004ca6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fdea 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e005      	b.n	8004d34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d131      	bne.n	8004db6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_UART_Receive_IT+0x22>
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e02a      	b.n	8004db8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Receive_IT+0x34>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e023      	b.n	8004db8 <HAL_UART_Receive_IT+0x7c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <HAL_UART_Receive_IT+0x84>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004da4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fe1d 	bl	80059ec <UART_Start_Receive_IT>
 8004db2:	4603      	mov	r3, r0
 8004db4:	e000      	b.n	8004db8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40008000 	.word	0x40008000

08004dc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d113      	bne.n	8004e1c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00e      	beq.n	8004e1c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 81ce 	beq.w	80051ae <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
      }
      return;
 8004e1a:	e1c8      	b.n	80051ae <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80e3 	beq.w	8004fea <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4ba6      	ldr	r3, [pc, #664]	; (80050cc <HAL_UART_IRQHandler+0x308>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80d8 	beq.w	8004fea <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_UART_IRQHandler+0xa2>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_UART_IRQHandler+0xce>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e88:	f043 0204 	orr.w	r2, r3, #4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <HAL_UART_IRQHandler+0xfa>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb4:	f043 0202 	orr.w	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d104      	bne.n	8004edc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eea:	f043 0208 	orr.w	r2, r3, #8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_UART_IRQHandler+0x15e>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00c      	beq.n	8004f22 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8142 	beq.w	80051b2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f58:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d004      	beq.n	8004f72 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d031      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fdc2 	bl	8005afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d123      	bne.n	8004fce <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f94:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	4a4b      	ldr	r2, [pc, #300]	; (80050d0 <HAL_UART_IRQHandler+0x30c>)
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fbfb 	bl	80027a6 <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e00f      	b.n	8004fe6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f908 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	e00b      	b.n	8004fe6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f904 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e007      	b.n	8004fe6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f900 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004fe4:	e0e5      	b.n	80051b2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	bf00      	nop
    return;
 8004fe8:	e0e3      	b.n	80051b2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	f040 80a9 	bne.w	8005146 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a3 	beq.w	8005146 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 809d 	beq.w	8005146 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2210      	movs	r2, #16
 8005012:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d158      	bne.n	80050d4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80c1 	beq.w	80051b6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800503a:	893a      	ldrh	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	f080 80ba 	bcs.w	80051b6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	893a      	ldrh	r2, [r7, #8]
 8005046:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d12a      	bne.n	80050b0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005068:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0210 	bic.w	r2, r2, #16
 80050a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd fb3d 	bl	800272a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f893 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ca:	e074      	b.n	80051b6 <HAL_UART_IRQHandler+0x3f2>
 80050cc:	04000120 	.word	0x04000120
 80050d0:	08005b5b 	.word	0x08005b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d063      	beq.n	80051ba <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d060      	beq.n	80051ba <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005106:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0210 	bic.w	r2, r2, #16
 8005138:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f856 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005144:	e039      	b.n	80051ba <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_UART_IRQHandler+0x3a8>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fdff 	bl	8005d68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800516a:	e029      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
    }
    return;
 8005190:	e015      	b.n	80051be <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d011      	beq.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fced 	bl	8005b86 <UART_EndTransmit_IT>
    return;
 80051ac:	e008      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80051ae:	bf00      	nop
 80051b0:	e006      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80051b2:	bf00      	nop
 80051b4:	e004      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80051be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop

080051c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4bad      	ldr	r3, [pc, #692]	; (80054e8 <UART_SetConfig+0x2e0>)
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	69f9      	ldr	r1, [r7, #28]
 800523c:	430b      	orrs	r3, r1
 800523e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4aa2      	ldr	r2, [pc, #648]	; (80054ec <UART_SetConfig+0x2e4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	4313      	orrs	r3, r2
 800526e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a99      	ldr	r2, [pc, #612]	; (80054f0 <UART_SetConfig+0x2e8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d121      	bne.n	80052d2 <UART_SetConfig+0xca>
 800528e:	4b99      	ldr	r3, [pc, #612]	; (80054f4 <UART_SetConfig+0x2ec>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d817      	bhi.n	80052cc <UART_SetConfig+0xc4>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x9c>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c1 	.word	0x080052c1
 80052ac:	080052bb 	.word	0x080052bb
 80052b0:	080052c7 	.word	0x080052c7
 80052b4:	2301      	movs	r3, #1
 80052b6:	76fb      	strb	r3, [r7, #27]
 80052b8:	e0e7      	b.n	800548a <UART_SetConfig+0x282>
 80052ba:	2302      	movs	r3, #2
 80052bc:	76fb      	strb	r3, [r7, #27]
 80052be:	e0e4      	b.n	800548a <UART_SetConfig+0x282>
 80052c0:	2304      	movs	r3, #4
 80052c2:	76fb      	strb	r3, [r7, #27]
 80052c4:	e0e1      	b.n	800548a <UART_SetConfig+0x282>
 80052c6:	2308      	movs	r3, #8
 80052c8:	76fb      	strb	r3, [r7, #27]
 80052ca:	e0de      	b.n	800548a <UART_SetConfig+0x282>
 80052cc:	2310      	movs	r3, #16
 80052ce:	76fb      	strb	r3, [r7, #27]
 80052d0:	e0db      	b.n	800548a <UART_SetConfig+0x282>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a88      	ldr	r2, [pc, #544]	; (80054f8 <UART_SetConfig+0x2f0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d132      	bne.n	8005342 <UART_SetConfig+0x13a>
 80052dc:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <UART_SetConfig+0x2ec>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d828      	bhi.n	800533c <UART_SetConfig+0x134>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0xe8>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005325 	.word	0x08005325
 80052f4:	0800533d 	.word	0x0800533d
 80052f8:	0800533d 	.word	0x0800533d
 80052fc:	0800533d 	.word	0x0800533d
 8005300:	08005331 	.word	0x08005331
 8005304:	0800533d 	.word	0x0800533d
 8005308:	0800533d 	.word	0x0800533d
 800530c:	0800533d 	.word	0x0800533d
 8005310:	0800532b 	.word	0x0800532b
 8005314:	0800533d 	.word	0x0800533d
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005337 	.word	0x08005337
 8005324:	2300      	movs	r3, #0
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e0af      	b.n	800548a <UART_SetConfig+0x282>
 800532a:	2302      	movs	r3, #2
 800532c:	76fb      	strb	r3, [r7, #27]
 800532e:	e0ac      	b.n	800548a <UART_SetConfig+0x282>
 8005330:	2304      	movs	r3, #4
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	e0a9      	b.n	800548a <UART_SetConfig+0x282>
 8005336:	2308      	movs	r3, #8
 8005338:	76fb      	strb	r3, [r7, #27]
 800533a:	e0a6      	b.n	800548a <UART_SetConfig+0x282>
 800533c:	2310      	movs	r3, #16
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e0a3      	b.n	800548a <UART_SetConfig+0x282>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6d      	ldr	r2, [pc, #436]	; (80054fc <UART_SetConfig+0x2f4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d120      	bne.n	800538e <UART_SetConfig+0x186>
 800534c:	4b69      	ldr	r3, [pc, #420]	; (80054f4 <UART_SetConfig+0x2ec>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005356:	2b30      	cmp	r3, #48	; 0x30
 8005358:	d013      	beq.n	8005382 <UART_SetConfig+0x17a>
 800535a:	2b30      	cmp	r3, #48	; 0x30
 800535c:	d814      	bhi.n	8005388 <UART_SetConfig+0x180>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d009      	beq.n	8005376 <UART_SetConfig+0x16e>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d810      	bhi.n	8005388 <UART_SetConfig+0x180>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0x168>
 800536a:	2b10      	cmp	r3, #16
 800536c:	d006      	beq.n	800537c <UART_SetConfig+0x174>
 800536e:	e00b      	b.n	8005388 <UART_SetConfig+0x180>
 8005370:	2300      	movs	r3, #0
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e089      	b.n	800548a <UART_SetConfig+0x282>
 8005376:	2302      	movs	r3, #2
 8005378:	76fb      	strb	r3, [r7, #27]
 800537a:	e086      	b.n	800548a <UART_SetConfig+0x282>
 800537c:	2304      	movs	r3, #4
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	e083      	b.n	800548a <UART_SetConfig+0x282>
 8005382:	2308      	movs	r3, #8
 8005384:	76fb      	strb	r3, [r7, #27]
 8005386:	e080      	b.n	800548a <UART_SetConfig+0x282>
 8005388:	2310      	movs	r3, #16
 800538a:	76fb      	strb	r3, [r7, #27]
 800538c:	e07d      	b.n	800548a <UART_SetConfig+0x282>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a5b      	ldr	r2, [pc, #364]	; (8005500 <UART_SetConfig+0x2f8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d120      	bne.n	80053da <UART_SetConfig+0x1d2>
 8005398:	4b56      	ldr	r3, [pc, #344]	; (80054f4 <UART_SetConfig+0x2ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053a2:	2bc0      	cmp	r3, #192	; 0xc0
 80053a4:	d013      	beq.n	80053ce <UART_SetConfig+0x1c6>
 80053a6:	2bc0      	cmp	r3, #192	; 0xc0
 80053a8:	d814      	bhi.n	80053d4 <UART_SetConfig+0x1cc>
 80053aa:	2b80      	cmp	r3, #128	; 0x80
 80053ac:	d009      	beq.n	80053c2 <UART_SetConfig+0x1ba>
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d810      	bhi.n	80053d4 <UART_SetConfig+0x1cc>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <UART_SetConfig+0x1b4>
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d006      	beq.n	80053c8 <UART_SetConfig+0x1c0>
 80053ba:	e00b      	b.n	80053d4 <UART_SetConfig+0x1cc>
 80053bc:	2300      	movs	r3, #0
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e063      	b.n	800548a <UART_SetConfig+0x282>
 80053c2:	2302      	movs	r3, #2
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e060      	b.n	800548a <UART_SetConfig+0x282>
 80053c8:	2304      	movs	r3, #4
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e05d      	b.n	800548a <UART_SetConfig+0x282>
 80053ce:	2308      	movs	r3, #8
 80053d0:	76fb      	strb	r3, [r7, #27]
 80053d2:	e05a      	b.n	800548a <UART_SetConfig+0x282>
 80053d4:	2310      	movs	r3, #16
 80053d6:	76fb      	strb	r3, [r7, #27]
 80053d8:	e057      	b.n	800548a <UART_SetConfig+0x282>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a49      	ldr	r2, [pc, #292]	; (8005504 <UART_SetConfig+0x2fc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d125      	bne.n	8005430 <UART_SetConfig+0x228>
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <UART_SetConfig+0x2ec>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f2:	d017      	beq.n	8005424 <UART_SetConfig+0x21c>
 80053f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f8:	d817      	bhi.n	800542a <UART_SetConfig+0x222>
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fe:	d00b      	beq.n	8005418 <UART_SetConfig+0x210>
 8005400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005404:	d811      	bhi.n	800542a <UART_SetConfig+0x222>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <UART_SetConfig+0x20a>
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d006      	beq.n	800541e <UART_SetConfig+0x216>
 8005410:	e00b      	b.n	800542a <UART_SetConfig+0x222>
 8005412:	2300      	movs	r3, #0
 8005414:	76fb      	strb	r3, [r7, #27]
 8005416:	e038      	b.n	800548a <UART_SetConfig+0x282>
 8005418:	2302      	movs	r3, #2
 800541a:	76fb      	strb	r3, [r7, #27]
 800541c:	e035      	b.n	800548a <UART_SetConfig+0x282>
 800541e:	2304      	movs	r3, #4
 8005420:	76fb      	strb	r3, [r7, #27]
 8005422:	e032      	b.n	800548a <UART_SetConfig+0x282>
 8005424:	2308      	movs	r3, #8
 8005426:	76fb      	strb	r3, [r7, #27]
 8005428:	e02f      	b.n	800548a <UART_SetConfig+0x282>
 800542a:	2310      	movs	r3, #16
 800542c:	76fb      	strb	r3, [r7, #27]
 800542e:	e02c      	b.n	800548a <UART_SetConfig+0x282>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <UART_SetConfig+0x2e4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d125      	bne.n	8005486 <UART_SetConfig+0x27e>
 800543a:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <UART_SetConfig+0x2ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005448:	d017      	beq.n	800547a <UART_SetConfig+0x272>
 800544a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800544e:	d817      	bhi.n	8005480 <UART_SetConfig+0x278>
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005454:	d00b      	beq.n	800546e <UART_SetConfig+0x266>
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d811      	bhi.n	8005480 <UART_SetConfig+0x278>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <UART_SetConfig+0x260>
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d006      	beq.n	8005474 <UART_SetConfig+0x26c>
 8005466:	e00b      	b.n	8005480 <UART_SetConfig+0x278>
 8005468:	2300      	movs	r3, #0
 800546a:	76fb      	strb	r3, [r7, #27]
 800546c:	e00d      	b.n	800548a <UART_SetConfig+0x282>
 800546e:	2302      	movs	r3, #2
 8005470:	76fb      	strb	r3, [r7, #27]
 8005472:	e00a      	b.n	800548a <UART_SetConfig+0x282>
 8005474:	2304      	movs	r3, #4
 8005476:	76fb      	strb	r3, [r7, #27]
 8005478:	e007      	b.n	800548a <UART_SetConfig+0x282>
 800547a:	2308      	movs	r3, #8
 800547c:	76fb      	strb	r3, [r7, #27]
 800547e:	e004      	b.n	800548a <UART_SetConfig+0x282>
 8005480:	2310      	movs	r3, #16
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e001      	b.n	800548a <UART_SetConfig+0x282>
 8005486:	2310      	movs	r3, #16
 8005488:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a17      	ldr	r2, [pc, #92]	; (80054ec <UART_SetConfig+0x2e4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	f040 8087 	bne.w	80055a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005496:	7efb      	ldrb	r3, [r7, #27]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d837      	bhi.n	800550c <UART_SetConfig+0x304>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x29c>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	0800550d 	.word	0x0800550d
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	0800550d 	.word	0x0800550d
 80054b4:	080054d7 	.word	0x080054d7
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	0800550d 	.word	0x0800550d
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	080054df 	.word	0x080054df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fe fe0e 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80054cc:	6178      	str	r0, [r7, #20]
        break;
 80054ce:	e022      	b.n	8005516 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <UART_SetConfig+0x300>)
 80054d2:	617b      	str	r3, [r7, #20]
        break;
 80054d4:	e01f      	b.n	8005516 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fe fd6f 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 80054da:	6178      	str	r0, [r7, #20]
        break;
 80054dc:	e01b      	b.n	8005516 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e017      	b.n	8005516 <UART_SetConfig+0x30e>
 80054e6:	bf00      	nop
 80054e8:	efff69f3 	.word	0xefff69f3
 80054ec:	40008000 	.word	0x40008000
 80054f0:	40013800 	.word	0x40013800
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40004400 	.word	0x40004400
 80054fc:	40004800 	.word	0x40004800
 8005500:	40004c00 	.word	0x40004c00
 8005504:	40005000 	.word	0x40005000
 8005508:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	76bb      	strb	r3, [r7, #26]
        break;
 8005514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80f1 	beq.w	8005700 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	429a      	cmp	r2, r3
 800552c:	d305      	bcc.n	800553a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	429a      	cmp	r2, r3
 8005538:	d902      	bls.n	8005540 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	76bb      	strb	r3, [r7, #26]
 800553e:	e0df      	b.n	8005700 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4618      	mov	r0, r3
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	020b      	lsls	r3, r1, #8
 8005552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005556:	0202      	lsls	r2, r0, #8
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	6849      	ldr	r1, [r1, #4]
 800555c:	0849      	lsrs	r1, r1, #1
 800555e:	4608      	mov	r0, r1
 8005560:	f04f 0100 	mov.w	r1, #0
 8005564:	1814      	adds	r4, r2, r0
 8005566:	eb43 0501 	adc.w	r5, r3, r1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	461a      	mov	r2, r3
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	f7fb fb66 	bl	8000c48 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d308      	bcc.n	800559e <UART_SetConfig+0x396>
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d204      	bcs.n	800559e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e0b0      	b.n	8005700 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	76bb      	strb	r3, [r7, #26]
 80055a2:	e0ad      	b.n	8005700 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ac:	d15c      	bne.n	8005668 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80055ae:	7efb      	ldrb	r3, [r7, #27]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d828      	bhi.n	8005606 <UART_SetConfig+0x3fe>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x3b4>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fd82 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80055e4:	6178      	str	r0, [r7, #20]
        break;
 80055e6:	e013      	b.n	8005610 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fd94 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80055ec:	6178      	str	r0, [r7, #20]
        break;
 80055ee:	e00f      	b.n	8005610 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <UART_SetConfig+0x510>)
 80055f2:	617b      	str	r3, [r7, #20]
        break;
 80055f4:	e00c      	b.n	8005610 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fe fcdf 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 80055fa:	6178      	str	r0, [r7, #20]
        break;
 80055fc:	e008      	b.n	8005610 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	617b      	str	r3, [r7, #20]
        break;
 8005604:	e004      	b.n	8005610 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	76bb      	strb	r3, [r7, #26]
        break;
 800560e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d074      	beq.n	8005700 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	005a      	lsls	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d916      	bls.n	8005662 <UART_SetConfig+0x45a>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563a:	d212      	bcs.n	8005662 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f023 030f 	bic.w	r3, r3, #15
 8005644:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	b29a      	uxth	r2, r3
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	4313      	orrs	r3, r2
 8005656:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	89fa      	ldrh	r2, [r7, #14]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e04e      	b.n	8005700 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	76bb      	strb	r3, [r7, #26]
 8005666:	e04b      	b.n	8005700 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005668:	7efb      	ldrb	r3, [r7, #27]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d827      	bhi.n	80056be <UART_SetConfig+0x4b6>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x46c>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005699 	.word	0x08005699
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056bf 	.word	0x080056bf
 8005684:	080056af 	.word	0x080056af
 8005688:	080056bf 	.word	0x080056bf
 800568c:	080056bf 	.word	0x080056bf
 8005690:	080056bf 	.word	0x080056bf
 8005694:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fd26 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800569c:	6178      	str	r0, [r7, #20]
        break;
 800569e:	e013      	b.n	80056c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fd38 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80056a4:	6178      	str	r0, [r7, #20]
        break;
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <UART_SetConfig+0x510>)
 80056aa:	617b      	str	r3, [r7, #20]
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fc83 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 80056b2:	6178      	str	r0, [r7, #20]
        break;
 80056b4:	e008      	b.n	80056c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ba:	617b      	str	r3, [r7, #20]
        break;
 80056bc:	e004      	b.n	80056c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	76bb      	strb	r3, [r7, #26]
        break;
 80056c6:	bf00      	nop
    }

    if (pclk != 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d018      	beq.n	8005700 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	085a      	lsrs	r2, r3, #1
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	441a      	add	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b0f      	cmp	r3, #15
 80056e8:	d908      	bls.n	80056fc <UART_SetConfig+0x4f4>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f0:	d204      	bcs.n	80056fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e001      	b.n	8005700 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800570c:	7ebb      	ldrb	r3, [r7, #26]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bdb0      	pop	{r4, r5, r7, pc}
 8005716:	bf00      	nop
 8005718:	00f42400 	.word	0x00f42400

0800571c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d10a      	bne.n	8005832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af02      	add	r7, sp, #8
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005870:	f7fc fd42 	bl	80022f8 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d10e      	bne.n	80058a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f82d 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e023      	b.n	80058ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d10e      	bne.n	80058ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f817 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00d      	b.n	80058ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005902:	e05e      	b.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d05a      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fc fcf4 	bl	80022f8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <UART_WaitOnFlagUntilTimeout+0x30>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11b      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005930:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e043      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02c      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d124      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005980:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005990:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e00f      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d091      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d10e      	bne.n	8005a3e <UART_Start_Receive_IT+0x52>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <UART_Start_Receive_IT+0x48>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a32:	e02d      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a3c:	e028      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <UART_Start_Receive_IT+0x76>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <UART_Start_Receive_IT+0x6c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a56:	e01b      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	227f      	movs	r2, #127	; 0x7f
 8005a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a60:	e016      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d10d      	bne.n	8005a88 <UART_Start_Receive_IT+0x9c>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <UART_Start_Receive_IT+0x92>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	227f      	movs	r2, #127	; 0x7f
 8005a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7c:	e008      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	223f      	movs	r2, #63	; 0x3f
 8005a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a86:	e003      	b.n	8005a90 <UART_Start_Receive_IT+0xa4>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2222      	movs	r2, #34	; 0x22
 8005a9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d107      	bne.n	8005ac8 <UART_Start_Receive_IT+0xdc>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <UART_Start_Receive_IT+0x108>)
 8005ac4:	665a      	str	r2, [r3, #100]	; 0x64
 8005ac6:	e002      	b.n	8005ace <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a0b      	ldr	r2, [pc, #44]	; (8005af8 <UART_Start_Receive_IT+0x10c>)
 8005acc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005ae4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	08005c91 	.word	0x08005c91
 8005af8:	08005bb9 	.word	0x08005bb9

08005afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0210 	bic.w	r2, r2, #16
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fb2f 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fb0c 	bl	80051c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bc6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bcc:	2b22      	cmp	r3, #34	; 0x22
 8005bce:	d151      	bne.n	8005c74 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bd6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bd8:	89bb      	ldrh	r3, [r7, #12]
 8005bda:	b2d9      	uxtb	r1, r3
 8005bdc:	89fb      	ldrh	r3, [r7, #14]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	400a      	ands	r2, r1
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d13a      	bne.n	8005c88 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10f      	bne.n	8005c66 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0210 	bic.w	r2, r2, #16
 8005c54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fac6 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
 8005c64:	e002      	b.n	8005c6c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f802 	bl	8001c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c72:	e009      	b.n	8005c88 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	8b1b      	ldrh	r3, [r3, #24]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0208 	orr.w	r2, r2, #8
 8005c84:	b292      	uxth	r2, r2
 8005c86:	831a      	strh	r2, [r3, #24]
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c9e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca4:	2b22      	cmp	r3, #34	; 0x22
 8005ca6:	d151      	bne.n	8005d4c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cb6:	89ba      	ldrh	r2, [r7, #12]
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d13a      	bne.n	8005d60 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cf8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d10f      	bne.n	8005d3e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0210 	bic.w	r2, r2, #16
 8005d2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fa5a 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
 8005d3c:	e002      	b.n	8005d44 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fb ff96 	bl	8001c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d4a:	e009      	b.n	8005d60 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	8b1b      	ldrh	r3, [r3, #24]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	831a      	strh	r2, [r3, #24]
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <__errno>:
 8005d7c:	4b01      	ldr	r3, [pc, #4]	; (8005d84 <__errno+0x8>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2000000c 	.word	0x2000000c

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	; (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	; (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f002 fd96 	bl	80088cc <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	08008e6c 	.word	0x08008e6c
 8005dc4:	08008e6c 	.word	0x08008e6c
 8005dc8:	08008e6c 	.word	0x08008e6c
 8005dcc:	08008e70 	.word	0x08008e70

08005dd0 <malloc>:
 8005dd0:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <malloc+0xc>)
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f000 b863 	b.w	8005ea0 <_malloc_r>
 8005dda:	bf00      	nop
 8005ddc:	2000000c 	.word	0x2000000c

08005de0 <free>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <free+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f000 b80b 	b.w	8005e00 <_free_r>
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <memset>:
 8005df0:	4402      	add	r2, r0
 8005df2:	4603      	mov	r3, r0
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d100      	bne.n	8005dfa <memset+0xa>
 8005df8:	4770      	bx	lr
 8005dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfe:	e7f9      	b.n	8005df4 <memset+0x4>

08005e00 <_free_r>:
 8005e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d048      	beq.n	8005e98 <_free_r+0x98>
 8005e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0a:	9001      	str	r0, [sp, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e12:	bfb8      	it	lt
 8005e14:	18e4      	addlt	r4, r4, r3
 8005e16:	f001 ff21 	bl	8007c5c <__malloc_lock>
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <_free_r+0x9c>)
 8005e1c:	9801      	ldr	r0, [sp, #4]
 8005e1e:	6813      	ldr	r3, [r2, #0]
 8005e20:	4615      	mov	r5, r2
 8005e22:	b933      	cbnz	r3, 8005e32 <_free_r+0x32>
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	6014      	str	r4, [r2, #0]
 8005e28:	b003      	add	sp, #12
 8005e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e2e:	f001 bf1b 	b.w	8007c68 <__malloc_unlock>
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	d90b      	bls.n	8005e4e <_free_r+0x4e>
 8005e36:	6821      	ldr	r1, [r4, #0]
 8005e38:	1862      	adds	r2, r4, r1
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bf04      	itt	eq
 8005e3e:	681a      	ldreq	r2, [r3, #0]
 8005e40:	685b      	ldreq	r3, [r3, #4]
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	bf04      	itt	eq
 8005e46:	1852      	addeq	r2, r2, r1
 8005e48:	6022      	streq	r2, [r4, #0]
 8005e4a:	602c      	str	r4, [r5, #0]
 8005e4c:	e7ec      	b.n	8005e28 <_free_r+0x28>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x58>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x4e>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x78>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1dd      	bne.n	8005e28 <_free_r+0x28>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7d7      	b.n	8005e28 <_free_r+0x28>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x80>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d3      	b.n	8005e28 <_free_r+0x28>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7c7      	b.n	8005e28 <_free_r+0x28>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	20000204 	.word	0x20000204

08005ea0 <_malloc_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	1ccd      	adds	r5, r1, #3
 8005ea4:	f025 0503 	bic.w	r5, r5, #3
 8005ea8:	3508      	adds	r5, #8
 8005eaa:	2d0c      	cmp	r5, #12
 8005eac:	bf38      	it	cc
 8005eae:	250c      	movcc	r5, #12
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	db01      	blt.n	8005eba <_malloc_r+0x1a>
 8005eb6:	42a9      	cmp	r1, r5
 8005eb8:	d903      	bls.n	8005ec2 <_malloc_r+0x22>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec2:	f001 fecb 	bl	8007c5c <__malloc_lock>
 8005ec6:	4921      	ldr	r1, [pc, #132]	; (8005f4c <_malloc_r+0xac>)
 8005ec8:	680a      	ldr	r2, [r1, #0]
 8005eca:	4614      	mov	r4, r2
 8005ecc:	b99c      	cbnz	r4, 8005ef6 <_malloc_r+0x56>
 8005ece:	4f20      	ldr	r7, [pc, #128]	; (8005f50 <_malloc_r+0xb0>)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	b923      	cbnz	r3, 8005ede <_malloc_r+0x3e>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 fd34 	bl	8006944 <_sbrk_r>
 8005edc:	6038      	str	r0, [r7, #0]
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 fd2f 	bl	8006944 <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d123      	bne.n	8005f32 <_malloc_r+0x92>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f001 feba 	bl	8007c68 <__malloc_unlock>
 8005ef4:	e7e3      	b.n	8005ebe <_malloc_r+0x1e>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	1b5b      	subs	r3, r3, r5
 8005efa:	d417      	bmi.n	8005f2c <_malloc_r+0x8c>
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d903      	bls.n	8005f08 <_malloc_r+0x68>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	441c      	add	r4, r3
 8005f04:	6025      	str	r5, [r4, #0]
 8005f06:	e004      	b.n	8005f12 <_malloc_r+0x72>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	42a2      	cmp	r2, r4
 8005f0c:	bf0c      	ite	eq
 8005f0e:	600b      	streq	r3, [r1, #0]
 8005f10:	6053      	strne	r3, [r2, #4]
 8005f12:	4630      	mov	r0, r6
 8005f14:	f001 fea8 	bl	8007c68 <__malloc_unlock>
 8005f18:	f104 000b 	add.w	r0, r4, #11
 8005f1c:	1d23      	adds	r3, r4, #4
 8005f1e:	f020 0007 	bic.w	r0, r0, #7
 8005f22:	1ac2      	subs	r2, r0, r3
 8005f24:	d0cc      	beq.n	8005ec0 <_malloc_r+0x20>
 8005f26:	1a1b      	subs	r3, r3, r0
 8005f28:	50a3      	str	r3, [r4, r2]
 8005f2a:	e7c9      	b.n	8005ec0 <_malloc_r+0x20>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	6864      	ldr	r4, [r4, #4]
 8005f30:	e7cc      	b.n	8005ecc <_malloc_r+0x2c>
 8005f32:	1cc4      	adds	r4, r0, #3
 8005f34:	f024 0403 	bic.w	r4, r4, #3
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d0e3      	beq.n	8005f04 <_malloc_r+0x64>
 8005f3c:	1a21      	subs	r1, r4, r0
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 fd00 	bl	8006944 <_sbrk_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1dd      	bne.n	8005f04 <_malloc_r+0x64>
 8005f48:	e7cf      	b.n	8005eea <_malloc_r+0x4a>
 8005f4a:	bf00      	nop
 8005f4c:	20000204 	.word	0x20000204
 8005f50:	20000208 	.word	0x20000208

08005f54 <__cvt>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	ec55 4b10 	vmov	r4, r5, d0
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	460e      	mov	r6, r1
 8005f60:	4619      	mov	r1, r3
 8005f62:	462b      	mov	r3, r5
 8005f64:	bfbb      	ittet	lt
 8005f66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f6a:	461d      	movlt	r5, r3
 8005f6c:	2300      	movge	r3, #0
 8005f6e:	232d      	movlt	r3, #45	; 0x2d
 8005f70:	700b      	strb	r3, [r1, #0]
 8005f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f78:	4691      	mov	r9, r2
 8005f7a:	f023 0820 	bic.w	r8, r3, #32
 8005f7e:	bfbc      	itt	lt
 8005f80:	4622      	movlt	r2, r4
 8005f82:	4614      	movlt	r4, r2
 8005f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f88:	d005      	beq.n	8005f96 <__cvt+0x42>
 8005f8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f8e:	d100      	bne.n	8005f92 <__cvt+0x3e>
 8005f90:	3601      	adds	r6, #1
 8005f92:	2102      	movs	r1, #2
 8005f94:	e000      	b.n	8005f98 <__cvt+0x44>
 8005f96:	2103      	movs	r1, #3
 8005f98:	ab03      	add	r3, sp, #12
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	ab02      	add	r3, sp, #8
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	ec45 4b10 	vmov	d0, r4, r5
 8005fa4:	4653      	mov	r3, sl
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	f000 fe3a 	bl	8006c20 <_dtoa_r>
 8005fac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	d102      	bne.n	8005fba <__cvt+0x66>
 8005fb4:	f019 0f01 	tst.w	r9, #1
 8005fb8:	d022      	beq.n	8006000 <__cvt+0xac>
 8005fba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fbe:	eb07 0906 	add.w	r9, r7, r6
 8005fc2:	d110      	bne.n	8005fe6 <__cvt+0x92>
 8005fc4:	783b      	ldrb	r3, [r7, #0]
 8005fc6:	2b30      	cmp	r3, #48	; 0x30
 8005fc8:	d10a      	bne.n	8005fe0 <__cvt+0x8c>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd6:	b918      	cbnz	r0, 8005fe0 <__cvt+0x8c>
 8005fd8:	f1c6 0601 	rsb	r6, r6, #1
 8005fdc:	f8ca 6000 	str.w	r6, [sl]
 8005fe0:	f8da 3000 	ldr.w	r3, [sl]
 8005fe4:	4499      	add	r9, r3
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4620      	mov	r0, r4
 8005fec:	4629      	mov	r1, r5
 8005fee:	f7fa fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff2:	b108      	cbz	r0, 8005ff8 <__cvt+0xa4>
 8005ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ff8:	2230      	movs	r2, #48	; 0x30
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	454b      	cmp	r3, r9
 8005ffe:	d307      	bcc.n	8006010 <__cvt+0xbc>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006004:	1bdb      	subs	r3, r3, r7
 8006006:	4638      	mov	r0, r7
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	b004      	add	sp, #16
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	9103      	str	r1, [sp, #12]
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e7f0      	b.n	8005ffa <__cvt+0xa6>

08006018 <__exponent>:
 8006018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800601a:	4603      	mov	r3, r0
 800601c:	2900      	cmp	r1, #0
 800601e:	bfb8      	it	lt
 8006020:	4249      	neglt	r1, r1
 8006022:	f803 2b02 	strb.w	r2, [r3], #2
 8006026:	bfb4      	ite	lt
 8006028:	222d      	movlt	r2, #45	; 0x2d
 800602a:	222b      	movge	r2, #43	; 0x2b
 800602c:	2909      	cmp	r1, #9
 800602e:	7042      	strb	r2, [r0, #1]
 8006030:	dd2a      	ble.n	8006088 <__exponent+0x70>
 8006032:	f10d 0407 	add.w	r4, sp, #7
 8006036:	46a4      	mov	ip, r4
 8006038:	270a      	movs	r7, #10
 800603a:	46a6      	mov	lr, r4
 800603c:	460a      	mov	r2, r1
 800603e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006042:	fb07 1516 	mls	r5, r7, r6, r1
 8006046:	3530      	adds	r5, #48	; 0x30
 8006048:	2a63      	cmp	r2, #99	; 0x63
 800604a:	f104 34ff 	add.w	r4, r4, #4294967295
 800604e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006052:	4631      	mov	r1, r6
 8006054:	dcf1      	bgt.n	800603a <__exponent+0x22>
 8006056:	3130      	adds	r1, #48	; 0x30
 8006058:	f1ae 0502 	sub.w	r5, lr, #2
 800605c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006060:	1c44      	adds	r4, r0, #1
 8006062:	4629      	mov	r1, r5
 8006064:	4561      	cmp	r1, ip
 8006066:	d30a      	bcc.n	800607e <__exponent+0x66>
 8006068:	f10d 0209 	add.w	r2, sp, #9
 800606c:	eba2 020e 	sub.w	r2, r2, lr
 8006070:	4565      	cmp	r5, ip
 8006072:	bf88      	it	hi
 8006074:	2200      	movhi	r2, #0
 8006076:	4413      	add	r3, r2
 8006078:	1a18      	subs	r0, r3, r0
 800607a:	b003      	add	sp, #12
 800607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006082:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006086:	e7ed      	b.n	8006064 <__exponent+0x4c>
 8006088:	2330      	movs	r3, #48	; 0x30
 800608a:	3130      	adds	r1, #48	; 0x30
 800608c:	7083      	strb	r3, [r0, #2]
 800608e:	70c1      	strb	r1, [r0, #3]
 8006090:	1d03      	adds	r3, r0, #4
 8006092:	e7f1      	b.n	8006078 <__exponent+0x60>

08006094 <_printf_float>:
 8006094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	ed2d 8b02 	vpush	{d8}
 800609c:	b08d      	sub	sp, #52	; 0x34
 800609e:	460c      	mov	r4, r1
 80060a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060a4:	4616      	mov	r6, r2
 80060a6:	461f      	mov	r7, r3
 80060a8:	4605      	mov	r5, r0
 80060aa:	f001 fd5d 	bl	8007b68 <_localeconv_r>
 80060ae:	f8d0 a000 	ldr.w	sl, [r0]
 80060b2:	4650      	mov	r0, sl
 80060b4:	f7fa f88c 	bl	80001d0 <strlen>
 80060b8:	2300      	movs	r3, #0
 80060ba:	930a      	str	r3, [sp, #40]	; 0x28
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	f8d8 3000 	ldr.w	r3, [r8]
 80060c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060c8:	3307      	adds	r3, #7
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	f103 0208 	add.w	r2, r3, #8
 80060d2:	f8c8 2000 	str.w	r2, [r8]
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060e6:	9307      	str	r3, [sp, #28]
 80060e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ec:	ee08 0a10 	vmov	s16, r0
 80060f0:	4b9f      	ldr	r3, [pc, #636]	; (8006370 <_printf_float+0x2dc>)
 80060f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	f7fa fd17 	bl	8000b2c <__aeabi_dcmpun>
 80060fe:	bb88      	cbnz	r0, 8006164 <_printf_float+0xd0>
 8006100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006104:	4b9a      	ldr	r3, [pc, #616]	; (8006370 <_printf_float+0x2dc>)
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	f7fa fcf1 	bl	8000af0 <__aeabi_dcmple>
 800610e:	bb48      	cbnz	r0, 8006164 <_printf_float+0xd0>
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	4640      	mov	r0, r8
 8006116:	4649      	mov	r1, r9
 8006118:	f7fa fce0 	bl	8000adc <__aeabi_dcmplt>
 800611c:	b110      	cbz	r0, 8006124 <_printf_float+0x90>
 800611e:	232d      	movs	r3, #45	; 0x2d
 8006120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006124:	4b93      	ldr	r3, [pc, #588]	; (8006374 <_printf_float+0x2e0>)
 8006126:	4894      	ldr	r0, [pc, #592]	; (8006378 <_printf_float+0x2e4>)
 8006128:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800612c:	bf94      	ite	ls
 800612e:	4698      	movls	r8, r3
 8006130:	4680      	movhi	r8, r0
 8006132:	2303      	movs	r3, #3
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	9b05      	ldr	r3, [sp, #20]
 8006138:	f023 0204 	bic.w	r2, r3, #4
 800613c:	6022      	str	r2, [r4, #0]
 800613e:	f04f 0900 	mov.w	r9, #0
 8006142:	9700      	str	r7, [sp, #0]
 8006144:	4633      	mov	r3, r6
 8006146:	aa0b      	add	r2, sp, #44	; 0x2c
 8006148:	4621      	mov	r1, r4
 800614a:	4628      	mov	r0, r5
 800614c:	f000 f9d8 	bl	8006500 <_printf_common>
 8006150:	3001      	adds	r0, #1
 8006152:	f040 8090 	bne.w	8006276 <_printf_float+0x1e2>
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	b00d      	add	sp, #52	; 0x34
 800615c:	ecbd 8b02 	vpop	{d8}
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	4640      	mov	r0, r8
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa fcde 	bl	8000b2c <__aeabi_dcmpun>
 8006170:	b140      	cbz	r0, 8006184 <_printf_float+0xf0>
 8006172:	464b      	mov	r3, r9
 8006174:	2b00      	cmp	r3, #0
 8006176:	bfbc      	itt	lt
 8006178:	232d      	movlt	r3, #45	; 0x2d
 800617a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800617e:	487f      	ldr	r0, [pc, #508]	; (800637c <_printf_float+0x2e8>)
 8006180:	4b7f      	ldr	r3, [pc, #508]	; (8006380 <_printf_float+0x2ec>)
 8006182:	e7d1      	b.n	8006128 <_printf_float+0x94>
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800618a:	9206      	str	r2, [sp, #24]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	d13f      	bne.n	8006210 <_printf_float+0x17c>
 8006190:	2306      	movs	r3, #6
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	9b05      	ldr	r3, [sp, #20]
 8006196:	6861      	ldr	r1, [r4, #4]
 8006198:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800619c:	2300      	movs	r3, #0
 800619e:	9303      	str	r3, [sp, #12]
 80061a0:	ab0a      	add	r3, sp, #40	; 0x28
 80061a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061a6:	ab09      	add	r3, sp, #36	; 0x24
 80061a8:	ec49 8b10 	vmov	d0, r8, r9
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff fecd 	bl	8005f54 <__cvt>
 80061ba:	9b06      	ldr	r3, [sp, #24]
 80061bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061be:	2b47      	cmp	r3, #71	; 0x47
 80061c0:	4680      	mov	r8, r0
 80061c2:	d108      	bne.n	80061d6 <_printf_float+0x142>
 80061c4:	1cc8      	adds	r0, r1, #3
 80061c6:	db02      	blt.n	80061ce <_printf_float+0x13a>
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	dd41      	ble.n	8006252 <_printf_float+0x1be>
 80061ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80061d2:	fa5f fb8b 	uxtb.w	fp, fp
 80061d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061da:	d820      	bhi.n	800621e <_printf_float+0x18a>
 80061dc:	3901      	subs	r1, #1
 80061de:	465a      	mov	r2, fp
 80061e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061e4:	9109      	str	r1, [sp, #36]	; 0x24
 80061e6:	f7ff ff17 	bl	8006018 <__exponent>
 80061ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ec:	1813      	adds	r3, r2, r0
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	4681      	mov	r9, r0
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	dc02      	bgt.n	80061fc <_printf_float+0x168>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	07d2      	lsls	r2, r2, #31
 80061fa:	d501      	bpl.n	8006200 <_printf_float+0x16c>
 80061fc:	3301      	adds	r3, #1
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006204:	2b00      	cmp	r3, #0
 8006206:	d09c      	beq.n	8006142 <_printf_float+0xae>
 8006208:	232d      	movs	r3, #45	; 0x2d
 800620a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620e:	e798      	b.n	8006142 <_printf_float+0xae>
 8006210:	9a06      	ldr	r2, [sp, #24]
 8006212:	2a47      	cmp	r2, #71	; 0x47
 8006214:	d1be      	bne.n	8006194 <_printf_float+0x100>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1bc      	bne.n	8006194 <_printf_float+0x100>
 800621a:	2301      	movs	r3, #1
 800621c:	e7b9      	b.n	8006192 <_printf_float+0xfe>
 800621e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006222:	d118      	bne.n	8006256 <_printf_float+0x1c2>
 8006224:	2900      	cmp	r1, #0
 8006226:	6863      	ldr	r3, [r4, #4]
 8006228:	dd0b      	ble.n	8006242 <_printf_float+0x1ae>
 800622a:	6121      	str	r1, [r4, #16]
 800622c:	b913      	cbnz	r3, 8006234 <_printf_float+0x1a0>
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	07d0      	lsls	r0, r2, #31
 8006232:	d502      	bpl.n	800623a <_printf_float+0x1a6>
 8006234:	3301      	adds	r3, #1
 8006236:	440b      	add	r3, r1
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	65a1      	str	r1, [r4, #88]	; 0x58
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	e7de      	b.n	8006200 <_printf_float+0x16c>
 8006242:	b913      	cbnz	r3, 800624a <_printf_float+0x1b6>
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	07d2      	lsls	r2, r2, #31
 8006248:	d501      	bpl.n	800624e <_printf_float+0x1ba>
 800624a:	3302      	adds	r3, #2
 800624c:	e7f4      	b.n	8006238 <_printf_float+0x1a4>
 800624e:	2301      	movs	r3, #1
 8006250:	e7f2      	b.n	8006238 <_printf_float+0x1a4>
 8006252:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006258:	4299      	cmp	r1, r3
 800625a:	db05      	blt.n	8006268 <_printf_float+0x1d4>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	6121      	str	r1, [r4, #16]
 8006260:	07d8      	lsls	r0, r3, #31
 8006262:	d5ea      	bpl.n	800623a <_printf_float+0x1a6>
 8006264:	1c4b      	adds	r3, r1, #1
 8006266:	e7e7      	b.n	8006238 <_printf_float+0x1a4>
 8006268:	2900      	cmp	r1, #0
 800626a:	bfd4      	ite	le
 800626c:	f1c1 0202 	rsble	r2, r1, #2
 8006270:	2201      	movgt	r2, #1
 8006272:	4413      	add	r3, r2
 8006274:	e7e0      	b.n	8006238 <_printf_float+0x1a4>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	055a      	lsls	r2, r3, #21
 800627a:	d407      	bmi.n	800628c <_printf_float+0x1f8>
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	4642      	mov	r2, r8
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	d12c      	bne.n	80062e4 <_printf_float+0x250>
 800628a:	e764      	b.n	8006156 <_printf_float+0xc2>
 800628c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006290:	f240 80e0 	bls.w	8006454 <_printf_float+0x3c0>
 8006294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006298:	2200      	movs	r2, #0
 800629a:	2300      	movs	r3, #0
 800629c:	f7fa fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d034      	beq.n	800630e <_printf_float+0x27a>
 80062a4:	4a37      	ldr	r2, [pc, #220]	; (8006384 <_printf_float+0x2f0>)
 80062a6:	2301      	movs	r3, #1
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af51 	beq.w	8006156 <_printf_float+0xc2>
 80062b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	db02      	blt.n	80062c2 <_printf_float+0x22e>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	07d8      	lsls	r0, r3, #31
 80062c0:	d510      	bpl.n	80062e4 <_printf_float+0x250>
 80062c2:	ee18 3a10 	vmov	r3, s16
 80062c6:	4652      	mov	r2, sl
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f af41 	beq.w	8006156 <_printf_float+0xc2>
 80062d4:	f04f 0800 	mov.w	r8, #0
 80062d8:	f104 091a 	add.w	r9, r4, #26
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	3b01      	subs	r3, #1
 80062e0:	4543      	cmp	r3, r8
 80062e2:	dc09      	bgt.n	80062f8 <_printf_float+0x264>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	f100 8105 	bmi.w	80064f6 <_printf_float+0x462>
 80062ec:	68e0      	ldr	r0, [r4, #12]
 80062ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f0:	4298      	cmp	r0, r3
 80062f2:	bfb8      	it	lt
 80062f4:	4618      	movlt	r0, r3
 80062f6:	e730      	b.n	800615a <_printf_float+0xc6>
 80062f8:	2301      	movs	r3, #1
 80062fa:	464a      	mov	r2, r9
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f af27 	beq.w	8006156 <_printf_float+0xc2>
 8006308:	f108 0801 	add.w	r8, r8, #1
 800630c:	e7e6      	b.n	80062dc <_printf_float+0x248>
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	dc39      	bgt.n	8006388 <_printf_float+0x2f4>
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <_printf_float+0x2f0>)
 8006316:	2301      	movs	r3, #1
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f af19 	beq.w	8006156 <_printf_float+0xc2>
 8006324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006328:	4313      	orrs	r3, r2
 800632a:	d102      	bne.n	8006332 <_printf_float+0x29e>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	07d9      	lsls	r1, r3, #31
 8006330:	d5d8      	bpl.n	80062e4 <_printf_float+0x250>
 8006332:	ee18 3a10 	vmov	r3, s16
 8006336:	4652      	mov	r2, sl
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af09 	beq.w	8006156 <_printf_float+0xc2>
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	f104 0a1a 	add.w	sl, r4, #26
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	425b      	negs	r3, r3
 8006350:	454b      	cmp	r3, r9
 8006352:	dc01      	bgt.n	8006358 <_printf_float+0x2c4>
 8006354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006356:	e792      	b.n	800627e <_printf_float+0x1ea>
 8006358:	2301      	movs	r3, #1
 800635a:	4652      	mov	r2, sl
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f aef7 	beq.w	8006156 <_printf_float+0xc2>
 8006368:	f109 0901 	add.w	r9, r9, #1
 800636c:	e7ee      	b.n	800634c <_printf_float+0x2b8>
 800636e:	bf00      	nop
 8006370:	7fefffff 	.word	0x7fefffff
 8006374:	08008a84 	.word	0x08008a84
 8006378:	08008a88 	.word	0x08008a88
 800637c:	08008a90 	.word	0x08008a90
 8006380:	08008a8c 	.word	0x08008a8c
 8006384:	08008a94 	.word	0x08008a94
 8006388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800638a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800638c:	429a      	cmp	r2, r3
 800638e:	bfa8      	it	ge
 8006390:	461a      	movge	r2, r3
 8006392:	2a00      	cmp	r2, #0
 8006394:	4691      	mov	r9, r2
 8006396:	dc37      	bgt.n	8006408 <_printf_float+0x374>
 8006398:	f04f 0b00 	mov.w	fp, #0
 800639c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a0:	f104 021a 	add.w	r2, r4, #26
 80063a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	eba3 0309 	sub.w	r3, r3, r9
 80063ac:	455b      	cmp	r3, fp
 80063ae:	dc33      	bgt.n	8006418 <_printf_float+0x384>
 80063b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063b4:	429a      	cmp	r2, r3
 80063b6:	db3b      	blt.n	8006430 <_printf_float+0x39c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07da      	lsls	r2, r3, #31
 80063bc:	d438      	bmi.n	8006430 <_printf_float+0x39c>
 80063be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c0:	9b05      	ldr	r3, [sp, #20]
 80063c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	eba2 0901 	sub.w	r9, r2, r1
 80063ca:	4599      	cmp	r9, r3
 80063cc:	bfa8      	it	ge
 80063ce:	4699      	movge	r9, r3
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	dc35      	bgt.n	8006442 <_printf_float+0x3ae>
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063de:	f104 0a1a 	add.w	sl, r4, #26
 80063e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	eba3 0309 	sub.w	r3, r3, r9
 80063ec:	4543      	cmp	r3, r8
 80063ee:	f77f af79 	ble.w	80062e4 <_printf_float+0x250>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f aeaa 	beq.w	8006156 <_printf_float+0xc2>
 8006402:	f108 0801 	add.w	r8, r8, #1
 8006406:	e7ec      	b.n	80063e2 <_printf_float+0x34e>
 8006408:	4613      	mov	r3, r2
 800640a:	4631      	mov	r1, r6
 800640c:	4642      	mov	r2, r8
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	d1c0      	bne.n	8006398 <_printf_float+0x304>
 8006416:	e69e      	b.n	8006156 <_printf_float+0xc2>
 8006418:	2301      	movs	r3, #1
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	9205      	str	r2, [sp, #20]
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f ae97 	beq.w	8006156 <_printf_float+0xc2>
 8006428:	9a05      	ldr	r2, [sp, #20]
 800642a:	f10b 0b01 	add.w	fp, fp, #1
 800642e:	e7b9      	b.n	80063a4 <_printf_float+0x310>
 8006430:	ee18 3a10 	vmov	r3, s16
 8006434:	4652      	mov	r2, sl
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	d1be      	bne.n	80063be <_printf_float+0x32a>
 8006440:	e689      	b.n	8006156 <_printf_float+0xc2>
 8006442:	9a05      	ldr	r2, [sp, #20]
 8006444:	464b      	mov	r3, r9
 8006446:	4442      	add	r2, r8
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	d1c1      	bne.n	80063d6 <_printf_float+0x342>
 8006452:	e680      	b.n	8006156 <_printf_float+0xc2>
 8006454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006456:	2a01      	cmp	r2, #1
 8006458:	dc01      	bgt.n	800645e <_printf_float+0x3ca>
 800645a:	07db      	lsls	r3, r3, #31
 800645c:	d538      	bpl.n	80064d0 <_printf_float+0x43c>
 800645e:	2301      	movs	r3, #1
 8006460:	4642      	mov	r2, r8
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae74 	beq.w	8006156 <_printf_float+0xc2>
 800646e:	ee18 3a10 	vmov	r3, s16
 8006472:	4652      	mov	r2, sl
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f ae6b 	beq.w	8006156 <_printf_float+0xc2>
 8006480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	f7fa fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800648c:	b9d8      	cbnz	r0, 80064c6 <_printf_float+0x432>
 800648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006490:	f108 0201 	add.w	r2, r8, #1
 8006494:	3b01      	subs	r3, #1
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d10e      	bne.n	80064be <_printf_float+0x42a>
 80064a0:	e659      	b.n	8006156 <_printf_float+0xc2>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4652      	mov	r2, sl
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae52 	beq.w	8006156 <_printf_float+0xc2>
 80064b2:	f108 0801 	add.w	r8, r8, #1
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	3b01      	subs	r3, #1
 80064ba:	4543      	cmp	r3, r8
 80064bc:	dcf1      	bgt.n	80064a2 <_printf_float+0x40e>
 80064be:	464b      	mov	r3, r9
 80064c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064c4:	e6dc      	b.n	8006280 <_printf_float+0x1ec>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 0a1a 	add.w	sl, r4, #26
 80064ce:	e7f2      	b.n	80064b6 <_printf_float+0x422>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4642      	mov	r2, r8
 80064d4:	e7df      	b.n	8006496 <_printf_float+0x402>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae38 	beq.w	8006156 <_printf_float+0xc2>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ee:	1a5b      	subs	r3, r3, r1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_float+0x442>
 80064f4:	e6fa      	b.n	80062ec <_printf_float+0x258>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0919 	add.w	r9, r4, #25
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x456>

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4699      	mov	r9, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800654c:	1e13      	subs	r3, r2, #0
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800655c:	4649      	mov	r1, r9
 800655e:	4638      	mov	r0, r7
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	68e5      	ldr	r5, [r4, #12]
 800656a:	6832      	ldr	r2, [r6, #0]
 800656c:	f003 0306 	and.w	r3, r3, #6
 8006570:	2b04      	cmp	r3, #4
 8006572:	bf08      	it	eq
 8006574:	1aad      	subeq	r5, r5, r2
 8006576:	68a3      	ldr	r3, [r4, #8]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4649      	mov	r1, r9
 800659c:	4638      	mov	r0, r7
 800659e:	47c0      	blx	r8
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	; 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4649      	mov	r1, r9
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	4691      	mov	r9, r2
 80065e4:	7e27      	ldrb	r7, [r4, #24]
 80065e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065e8:	2f78      	cmp	r7, #120	; 0x78
 80065ea:	4680      	mov	r8, r0
 80065ec:	469a      	mov	sl, r3
 80065ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	; 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d8 	beq.w	80067ae <_printf_i+0x1d2>
 80065fe:	2f58      	cmp	r7, #88	; 0x58
 8006600:	f000 80a3 	beq.w	800674a <_printf_i+0x16e>
 8006604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a001      	add	r0, pc, #4	; (adr r0, 800661c <_printf_i+0x40>)
 8006618:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006795 	.word	0x08006795
 800664c:	080066b9 	.word	0x080066b9
 8006650:	08006777 	.word	0x08006777
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067b7 	.word	0x080067b7
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800677f 	.word	0x0800677f
 8006674:	680b      	ldr	r3, [r1, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	600a      	str	r2, [r1, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e0a3      	b.n	80067d0 <_printf_i+0x1f4>
 8006688:	6825      	ldr	r5, [r4, #0]
 800668a:	6808      	ldr	r0, [r1, #0]
 800668c:	062e      	lsls	r6, r5, #24
 800668e:	f100 0304 	add.w	r3, r0, #4
 8006692:	d50a      	bpl.n	80066aa <_printf_i+0xce>
 8006694:	6805      	ldr	r5, [r0, #0]
 8006696:	600b      	str	r3, [r1, #0]
 8006698:	2d00      	cmp	r5, #0
 800669a:	da03      	bge.n	80066a4 <_printf_i+0xc8>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	426d      	negs	r5, r5
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a4:	485e      	ldr	r0, [pc, #376]	; (8006820 <_printf_i+0x244>)
 80066a6:	230a      	movs	r3, #10
 80066a8:	e019      	b.n	80066de <_printf_i+0x102>
 80066aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066ae:	6805      	ldr	r5, [r0, #0]
 80066b0:	600b      	str	r3, [r1, #0]
 80066b2:	bf18      	it	ne
 80066b4:	b22d      	sxthne	r5, r5
 80066b6:	e7ef      	b.n	8006698 <_printf_i+0xbc>
 80066b8:	680b      	ldr	r3, [r1, #0]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	1d18      	adds	r0, r3, #4
 80066be:	6008      	str	r0, [r1, #0]
 80066c0:	0628      	lsls	r0, r5, #24
 80066c2:	d501      	bpl.n	80066c8 <_printf_i+0xec>
 80066c4:	681d      	ldr	r5, [r3, #0]
 80066c6:	e002      	b.n	80066ce <_printf_i+0xf2>
 80066c8:	0669      	lsls	r1, r5, #25
 80066ca:	d5fb      	bpl.n	80066c4 <_printf_i+0xe8>
 80066cc:	881d      	ldrh	r5, [r3, #0]
 80066ce:	4854      	ldr	r0, [pc, #336]	; (8006820 <_printf_i+0x244>)
 80066d0:	2f6f      	cmp	r7, #111	; 0x6f
 80066d2:	bf0c      	ite	eq
 80066d4:	2308      	moveq	r3, #8
 80066d6:	230a      	movne	r3, #10
 80066d8:	2100      	movs	r1, #0
 80066da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066de:	6866      	ldr	r6, [r4, #4]
 80066e0:	60a6      	str	r6, [r4, #8]
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	bfa2      	ittt	ge
 80066e6:	6821      	ldrge	r1, [r4, #0]
 80066e8:	f021 0104 	bicge.w	r1, r1, #4
 80066ec:	6021      	strge	r1, [r4, #0]
 80066ee:	b90d      	cbnz	r5, 80066f4 <_printf_i+0x118>
 80066f0:	2e00      	cmp	r6, #0
 80066f2:	d04d      	beq.n	8006790 <_printf_i+0x1b4>
 80066f4:	4616      	mov	r6, r2
 80066f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80066fa:	fb03 5711 	mls	r7, r3, r1, r5
 80066fe:	5dc7      	ldrb	r7, [r0, r7]
 8006700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006704:	462f      	mov	r7, r5
 8006706:	42bb      	cmp	r3, r7
 8006708:	460d      	mov	r5, r1
 800670a:	d9f4      	bls.n	80066f6 <_printf_i+0x11a>
 800670c:	2b08      	cmp	r3, #8
 800670e:	d10b      	bne.n	8006728 <_printf_i+0x14c>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	07df      	lsls	r7, r3, #31
 8006714:	d508      	bpl.n	8006728 <_printf_i+0x14c>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	4299      	cmp	r1, r3
 800671c:	bfde      	ittt	le
 800671e:	2330      	movle	r3, #48	; 0x30
 8006720:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006724:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006728:	1b92      	subs	r2, r2, r6
 800672a:	6122      	str	r2, [r4, #16]
 800672c:	f8cd a000 	str.w	sl, [sp]
 8006730:	464b      	mov	r3, r9
 8006732:	aa03      	add	r2, sp, #12
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff fee2 	bl	8006500 <_printf_common>
 800673c:	3001      	adds	r0, #1
 800673e:	d14c      	bne.n	80067da <_printf_i+0x1fe>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	b004      	add	sp, #16
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	4835      	ldr	r0, [pc, #212]	; (8006820 <_printf_i+0x244>)
 800674c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	680e      	ldr	r6, [r1, #0]
 8006754:	061f      	lsls	r7, r3, #24
 8006756:	f856 5b04 	ldr.w	r5, [r6], #4
 800675a:	600e      	str	r6, [r1, #0]
 800675c:	d514      	bpl.n	8006788 <_printf_i+0x1ac>
 800675e:	07d9      	lsls	r1, r3, #31
 8006760:	bf44      	itt	mi
 8006762:	f043 0320 	orrmi.w	r3, r3, #32
 8006766:	6023      	strmi	r3, [r4, #0]
 8006768:	b91d      	cbnz	r5, 8006772 <_printf_i+0x196>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f023 0320 	bic.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	2310      	movs	r3, #16
 8006774:	e7b0      	b.n	80066d8 <_printf_i+0xfc>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	2378      	movs	r3, #120	; 0x78
 8006780:	4828      	ldr	r0, [pc, #160]	; (8006824 <_printf_i+0x248>)
 8006782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006786:	e7e3      	b.n	8006750 <_printf_i+0x174>
 8006788:	065e      	lsls	r6, r3, #25
 800678a:	bf48      	it	mi
 800678c:	b2ad      	uxthmi	r5, r5
 800678e:	e7e6      	b.n	800675e <_printf_i+0x182>
 8006790:	4616      	mov	r6, r2
 8006792:	e7bb      	b.n	800670c <_printf_i+0x130>
 8006794:	680b      	ldr	r3, [r1, #0]
 8006796:	6826      	ldr	r6, [r4, #0]
 8006798:	6960      	ldr	r0, [r4, #20]
 800679a:	1d1d      	adds	r5, r3, #4
 800679c:	600d      	str	r5, [r1, #0]
 800679e:	0635      	lsls	r5, r6, #24
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0x1cc>
 80067a4:	6018      	str	r0, [r3, #0]
 80067a6:	e002      	b.n	80067ae <_printf_i+0x1d2>
 80067a8:	0671      	lsls	r1, r6, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0x1c8>
 80067ac:	8018      	strh	r0, [r3, #0]
 80067ae:	2300      	movs	r3, #0
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	4616      	mov	r6, r2
 80067b4:	e7ba      	b.n	800672c <_printf_i+0x150>
 80067b6:	680b      	ldr	r3, [r1, #0]
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	600a      	str	r2, [r1, #0]
 80067bc:	681e      	ldr	r6, [r3, #0]
 80067be:	6862      	ldr	r2, [r4, #4]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7f9 fd0c 	bl	80001e0 <memchr>
 80067c8:	b108      	cbz	r0, 80067ce <_printf_i+0x1f2>
 80067ca:	1b80      	subs	r0, r0, r6
 80067cc:	6060      	str	r0, [r4, #4]
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	2300      	movs	r3, #0
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e7a8      	b.n	800672c <_printf_i+0x150>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	4632      	mov	r2, r6
 80067de:	4649      	mov	r1, r9
 80067e0:	4640      	mov	r0, r8
 80067e2:	47d0      	blx	sl
 80067e4:	3001      	adds	r0, #1
 80067e6:	d0ab      	beq.n	8006740 <_printf_i+0x164>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	079b      	lsls	r3, r3, #30
 80067ec:	d413      	bmi.n	8006816 <_printf_i+0x23a>
 80067ee:	68e0      	ldr	r0, [r4, #12]
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	4298      	cmp	r0, r3
 80067f4:	bfb8      	it	lt
 80067f6:	4618      	movlt	r0, r3
 80067f8:	e7a4      	b.n	8006744 <_printf_i+0x168>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4632      	mov	r2, r6
 80067fe:	4649      	mov	r1, r9
 8006800:	4640      	mov	r0, r8
 8006802:	47d0      	blx	sl
 8006804:	3001      	adds	r0, #1
 8006806:	d09b      	beq.n	8006740 <_printf_i+0x164>
 8006808:	3501      	adds	r5, #1
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	9903      	ldr	r1, [sp, #12]
 800680e:	1a5b      	subs	r3, r3, r1
 8006810:	42ab      	cmp	r3, r5
 8006812:	dcf2      	bgt.n	80067fa <_printf_i+0x21e>
 8006814:	e7eb      	b.n	80067ee <_printf_i+0x212>
 8006816:	2500      	movs	r5, #0
 8006818:	f104 0619 	add.w	r6, r4, #25
 800681c:	e7f5      	b.n	800680a <_printf_i+0x22e>
 800681e:	bf00      	nop
 8006820:	08008a96 	.word	0x08008a96
 8006824:	08008aa7 	.word	0x08008aa7

08006828 <iprintf>:
 8006828:	b40f      	push	{r0, r1, r2, r3}
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <iprintf+0x2c>)
 800682c:	b513      	push	{r0, r1, r4, lr}
 800682e:	681c      	ldr	r4, [r3, #0]
 8006830:	b124      	cbz	r4, 800683c <iprintf+0x14>
 8006832:	69a3      	ldr	r3, [r4, #24]
 8006834:	b913      	cbnz	r3, 800683c <iprintf+0x14>
 8006836:	4620      	mov	r0, r4
 8006838:	f001 f8f8 	bl	8007a2c <__sinit>
 800683c:	ab05      	add	r3, sp, #20
 800683e:	9a04      	ldr	r2, [sp, #16]
 8006840:	68a1      	ldr	r1, [r4, #8]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	4620      	mov	r0, r4
 8006846:	f001 fdcb 	bl	80083e0 <_vfiprintf_r>
 800684a:	b002      	add	sp, #8
 800684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006850:	b004      	add	sp, #16
 8006852:	4770      	bx	lr
 8006854:	2000000c 	.word	0x2000000c

08006858 <_puts_r>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	460e      	mov	r6, r1
 800685c:	4605      	mov	r5, r0
 800685e:	b118      	cbz	r0, 8006868 <_puts_r+0x10>
 8006860:	6983      	ldr	r3, [r0, #24]
 8006862:	b90b      	cbnz	r3, 8006868 <_puts_r+0x10>
 8006864:	f001 f8e2 	bl	8007a2c <__sinit>
 8006868:	69ab      	ldr	r3, [r5, #24]
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	b913      	cbnz	r3, 8006874 <_puts_r+0x1c>
 800686e:	4628      	mov	r0, r5
 8006870:	f001 f8dc 	bl	8007a2c <__sinit>
 8006874:	4b2c      	ldr	r3, [pc, #176]	; (8006928 <_puts_r+0xd0>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d120      	bne.n	80068bc <_puts_r+0x64>
 800687a:	686c      	ldr	r4, [r5, #4]
 800687c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800687e:	07db      	lsls	r3, r3, #31
 8006880:	d405      	bmi.n	800688e <_puts_r+0x36>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	0598      	lsls	r0, r3, #22
 8006886:	d402      	bmi.n	800688e <_puts_r+0x36>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f001 f972 	bl	8007b72 <__retarget_lock_acquire_recursive>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	0719      	lsls	r1, r3, #28
 8006892:	d51d      	bpl.n	80068d0 <_puts_r+0x78>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	b1db      	cbz	r3, 80068d0 <_puts_r+0x78>
 8006898:	3e01      	subs	r6, #1
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068a0:	3b01      	subs	r3, #1
 80068a2:	60a3      	str	r3, [r4, #8]
 80068a4:	bb39      	cbnz	r1, 80068f6 <_puts_r+0x9e>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da38      	bge.n	800691c <_puts_r+0xc4>
 80068aa:	4622      	mov	r2, r4
 80068ac:	210a      	movs	r1, #10
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 f86a 	bl	8006988 <__swbuf_r>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d011      	beq.n	80068dc <_puts_r+0x84>
 80068b8:	250a      	movs	r5, #10
 80068ba:	e011      	b.n	80068e0 <_puts_r+0x88>
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <_puts_r+0xd4>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	d101      	bne.n	80068c6 <_puts_r+0x6e>
 80068c2:	68ac      	ldr	r4, [r5, #8]
 80068c4:	e7da      	b.n	800687c <_puts_r+0x24>
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <_puts_r+0xd8>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	bf08      	it	eq
 80068cc:	68ec      	ldreq	r4, [r5, #12]
 80068ce:	e7d5      	b.n	800687c <_puts_r+0x24>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f8aa 	bl	8006a2c <__swsetup_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0dd      	beq.n	8006898 <_puts_r+0x40>
 80068dc:	f04f 35ff 	mov.w	r5, #4294967295
 80068e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e2:	07da      	lsls	r2, r3, #31
 80068e4:	d405      	bmi.n	80068f2 <_puts_r+0x9a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	059b      	lsls	r3, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_puts_r+0x9a>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f001 f941 	bl	8007b74 <__retarget_lock_release_recursive>
 80068f2:	4628      	mov	r0, r5
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da04      	bge.n	8006904 <_puts_r+0xac>
 80068fa:	69a2      	ldr	r2, [r4, #24]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	dc06      	bgt.n	800690e <_puts_r+0xb6>
 8006900:	290a      	cmp	r1, #10
 8006902:	d004      	beq.n	800690e <_puts_r+0xb6>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	6022      	str	r2, [r4, #0]
 800690a:	7019      	strb	r1, [r3, #0]
 800690c:	e7c5      	b.n	800689a <_puts_r+0x42>
 800690e:	4622      	mov	r2, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f839 	bl	8006988 <__swbuf_r>
 8006916:	3001      	adds	r0, #1
 8006918:	d1bf      	bne.n	800689a <_puts_r+0x42>
 800691a:	e7df      	b.n	80068dc <_puts_r+0x84>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	250a      	movs	r5, #10
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	701d      	strb	r5, [r3, #0]
 8006926:	e7db      	b.n	80068e0 <_puts_r+0x88>
 8006928:	08008b6c 	.word	0x08008b6c
 800692c:	08008b8c 	.word	0x08008b8c
 8006930:	08008b4c 	.word	0x08008b4c

08006934 <puts>:
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <puts+0xc>)
 8006936:	4601      	mov	r1, r0
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f7ff bf8d 	b.w	8006858 <_puts_r>
 800693e:	bf00      	nop
 8006940:	2000000c 	.word	0x2000000c

08006944 <_sbrk_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d06      	ldr	r5, [pc, #24]	; (8006960 <_sbrk_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	4608      	mov	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fb fac8 	bl	8001ee4 <_sbrk>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_sbrk_r+0x1a>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_sbrk_r+0x1a>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	2000041c 	.word	0x2000041c

08006964 <strncmp>:
 8006964:	b510      	push	{r4, lr}
 8006966:	b16a      	cbz	r2, 8006984 <strncmp+0x20>
 8006968:	3901      	subs	r1, #1
 800696a:	1884      	adds	r4, r0, r2
 800696c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006970:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006974:	4293      	cmp	r3, r2
 8006976:	d103      	bne.n	8006980 <strncmp+0x1c>
 8006978:	42a0      	cmp	r0, r4
 800697a:	d001      	beq.n	8006980 <strncmp+0x1c>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f5      	bne.n	800696c <strncmp+0x8>
 8006980:	1a98      	subs	r0, r3, r2
 8006982:	bd10      	pop	{r4, pc}
 8006984:	4610      	mov	r0, r2
 8006986:	e7fc      	b.n	8006982 <strncmp+0x1e>

08006988 <__swbuf_r>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	460e      	mov	r6, r1
 800698c:	4614      	mov	r4, r2
 800698e:	4605      	mov	r5, r0
 8006990:	b118      	cbz	r0, 800699a <__swbuf_r+0x12>
 8006992:	6983      	ldr	r3, [r0, #24]
 8006994:	b90b      	cbnz	r3, 800699a <__swbuf_r+0x12>
 8006996:	f001 f849 	bl	8007a2c <__sinit>
 800699a:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <__swbuf_r+0x98>)
 800699c:	429c      	cmp	r4, r3
 800699e:	d12b      	bne.n	80069f8 <__swbuf_r+0x70>
 80069a0:	686c      	ldr	r4, [r5, #4]
 80069a2:	69a3      	ldr	r3, [r4, #24]
 80069a4:	60a3      	str	r3, [r4, #8]
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	071a      	lsls	r2, r3, #28
 80069aa:	d52f      	bpl.n	8006a0c <__swbuf_r+0x84>
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	b36b      	cbz	r3, 8006a0c <__swbuf_r+0x84>
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	6820      	ldr	r0, [r4, #0]
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	b2f6      	uxtb	r6, r6
 80069ba:	4283      	cmp	r3, r0
 80069bc:	4637      	mov	r7, r6
 80069be:	dc04      	bgt.n	80069ca <__swbuf_r+0x42>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 ff9e 	bl	8007904 <_fflush_r>
 80069c8:	bb30      	cbnz	r0, 8006a18 <__swbuf_r+0x90>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	701e      	strb	r6, [r3, #0]
 80069d8:	6963      	ldr	r3, [r4, #20]
 80069da:	3001      	adds	r0, #1
 80069dc:	4283      	cmp	r3, r0
 80069de:	d004      	beq.n	80069ea <__swbuf_r+0x62>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d506      	bpl.n	80069f4 <__swbuf_r+0x6c>
 80069e6:	2e0a      	cmp	r6, #10
 80069e8:	d104      	bne.n	80069f4 <__swbuf_r+0x6c>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 ff89 	bl	8007904 <_fflush_r>
 80069f2:	b988      	cbnz	r0, 8006a18 <__swbuf_r+0x90>
 80069f4:	4638      	mov	r0, r7
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <__swbuf_r+0x9c>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d101      	bne.n	8006a02 <__swbuf_r+0x7a>
 80069fe:	68ac      	ldr	r4, [r5, #8]
 8006a00:	e7cf      	b.n	80069a2 <__swbuf_r+0x1a>
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <__swbuf_r+0xa0>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	bf08      	it	eq
 8006a08:	68ec      	ldreq	r4, [r5, #12]
 8006a0a:	e7ca      	b.n	80069a2 <__swbuf_r+0x1a>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f80c 	bl	8006a2c <__swsetup_r>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d0cb      	beq.n	80069b0 <__swbuf_r+0x28>
 8006a18:	f04f 37ff 	mov.w	r7, #4294967295
 8006a1c:	e7ea      	b.n	80069f4 <__swbuf_r+0x6c>
 8006a1e:	bf00      	nop
 8006a20:	08008b6c 	.word	0x08008b6c
 8006a24:	08008b8c 	.word	0x08008b8c
 8006a28:	08008b4c 	.word	0x08008b4c

08006a2c <__swsetup_r>:
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <__swsetup_r+0xcc>)
 8006a2e:	b570      	push	{r4, r5, r6, lr}
 8006a30:	681d      	ldr	r5, [r3, #0]
 8006a32:	4606      	mov	r6, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	b125      	cbz	r5, 8006a42 <__swsetup_r+0x16>
 8006a38:	69ab      	ldr	r3, [r5, #24]
 8006a3a:	b913      	cbnz	r3, 8006a42 <__swsetup_r+0x16>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 fff5 	bl	8007a2c <__sinit>
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <__swsetup_r+0xd0>)
 8006a44:	429c      	cmp	r4, r3
 8006a46:	d10f      	bne.n	8006a68 <__swsetup_r+0x3c>
 8006a48:	686c      	ldr	r4, [r5, #4]
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a50:	0719      	lsls	r1, r3, #28
 8006a52:	d42c      	bmi.n	8006aae <__swsetup_r+0x82>
 8006a54:	06dd      	lsls	r5, r3, #27
 8006a56:	d411      	bmi.n	8006a7c <__swsetup_r+0x50>
 8006a58:	2309      	movs	r3, #9
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e03e      	b.n	8006ae6 <__swsetup_r+0xba>
 8006a68:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <__swsetup_r+0xd4>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <__swsetup_r+0x46>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7eb      	b.n	8006a4a <__swsetup_r+0x1e>
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <__swsetup_r+0xd8>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7e6      	b.n	8006a4a <__swsetup_r+0x1e>
 8006a7c:	0758      	lsls	r0, r3, #29
 8006a7e:	d512      	bpl.n	8006aa6 <__swsetup_r+0x7a>
 8006a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a82:	b141      	cbz	r1, 8006a96 <__swsetup_r+0x6a>
 8006a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	d002      	beq.n	8006a92 <__swsetup_r+0x66>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff f9b7 	bl	8005e00 <_free_r>
 8006a92:	2300      	movs	r3, #0
 8006a94:	6363      	str	r3, [r4, #52]	; 0x34
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	b94b      	cbnz	r3, 8006ac6 <__swsetup_r+0x9a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abc:	d003      	beq.n	8006ac6 <__swsetup_r+0x9a>
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f001 f87d 	bl	8007bc0 <__smakebuf_r>
 8006ac6:	89a0      	ldrh	r0, [r4, #12]
 8006ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006acc:	f010 0301 	ands.w	r3, r0, #1
 8006ad0:	d00a      	beq.n	8006ae8 <__swsetup_r+0xbc>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60a3      	str	r3, [r4, #8]
 8006ad6:	6963      	ldr	r3, [r4, #20]
 8006ad8:	425b      	negs	r3, r3
 8006ada:	61a3      	str	r3, [r4, #24]
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	b943      	cbnz	r3, 8006af2 <__swsetup_r+0xc6>
 8006ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ae4:	d1ba      	bne.n	8006a5c <__swsetup_r+0x30>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	0781      	lsls	r1, r0, #30
 8006aea:	bf58      	it	pl
 8006aec:	6963      	ldrpl	r3, [r4, #20]
 8006aee:	60a3      	str	r3, [r4, #8]
 8006af0:	e7f4      	b.n	8006adc <__swsetup_r+0xb0>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e7f7      	b.n	8006ae6 <__swsetup_r+0xba>
 8006af6:	bf00      	nop
 8006af8:	2000000c 	.word	0x2000000c
 8006afc:	08008b6c 	.word	0x08008b6c
 8006b00:	08008b8c 	.word	0x08008b8c
 8006b04:	08008b4c 	.word	0x08008b4c

08006b08 <quorem>:
 8006b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	6903      	ldr	r3, [r0, #16]
 8006b0e:	690c      	ldr	r4, [r1, #16]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	4607      	mov	r7, r0
 8006b14:	f2c0 8081 	blt.w	8006c1a <quorem+0x112>
 8006b18:	3c01      	subs	r4, #1
 8006b1a:	f101 0814 	add.w	r8, r1, #20
 8006b1e:	f100 0514 	add.w	r5, r0, #20
 8006b22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b30:	3301      	adds	r3, #1
 8006b32:	429a      	cmp	r2, r3
 8006b34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b40:	d331      	bcc.n	8006ba6 <quorem+0x9e>
 8006b42:	f04f 0e00 	mov.w	lr, #0
 8006b46:	4640      	mov	r0, r8
 8006b48:	46ac      	mov	ip, r5
 8006b4a:	46f2      	mov	sl, lr
 8006b4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b50:	b293      	uxth	r3, r2
 8006b52:	fb06 e303 	mla	r3, r6, r3, lr
 8006b56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b60:	0c12      	lsrs	r2, r2, #16
 8006b62:	f8dc a000 	ldr.w	sl, [ip]
 8006b66:	fb06 e202 	mla	r2, r6, r2, lr
 8006b6a:	fa13 f38a 	uxtah	r3, r3, sl
 8006b6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b72:	fa1f fa82 	uxth.w	sl, r2
 8006b76:	f8dc 2000 	ldr.w	r2, [ip]
 8006b7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b88:	4581      	cmp	r9, r0
 8006b8a:	f84c 3b04 	str.w	r3, [ip], #4
 8006b8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b92:	d2db      	bcs.n	8006b4c <quorem+0x44>
 8006b94:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b98:	b92b      	cbnz	r3, 8006ba6 <quorem+0x9e>
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	d32e      	bcc.n	8006c02 <quorem+0xfa>
 8006ba4:	613c      	str	r4, [r7, #16]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f001 fae2 	bl	8008170 <__mcmp>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	db24      	blt.n	8006bfa <quorem+0xf2>
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f04f 0c00 	mov.w	ip, #0
 8006bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bbc:	f8d0 e000 	ldr.w	lr, [r0]
 8006bc0:	b293      	uxth	r3, r2
 8006bc2:	ebac 0303 	sub.w	r3, ip, r3
 8006bc6:	0c12      	lsrs	r2, r2, #16
 8006bc8:	fa13 f38e 	uxtah	r3, r3, lr
 8006bcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bda:	45c1      	cmp	r9, r8
 8006bdc:	f840 3b04 	str.w	r3, [r0], #4
 8006be0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006be4:	d2e8      	bcs.n	8006bb8 <quorem+0xb0>
 8006be6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bee:	b922      	cbnz	r2, 8006bfa <quorem+0xf2>
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	429d      	cmp	r5, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	d30a      	bcc.n	8006c0e <quorem+0x106>
 8006bf8:	613c      	str	r4, [r7, #16]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	b003      	add	sp, #12
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d1cc      	bne.n	8006ba4 <quorem+0x9c>
 8006c0a:	3c01      	subs	r4, #1
 8006c0c:	e7c7      	b.n	8006b9e <quorem+0x96>
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	3b04      	subs	r3, #4
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d1f0      	bne.n	8006bf8 <quorem+0xf0>
 8006c16:	3c01      	subs	r4, #1
 8006c18:	e7eb      	b.n	8006bf2 <quorem+0xea>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	e7ee      	b.n	8006bfc <quorem+0xf4>
	...

08006c20 <_dtoa_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	ed2d 8b02 	vpush	{d8}
 8006c28:	ec57 6b10 	vmov	r6, r7, d0
 8006c2c:	b095      	sub	sp, #84	; 0x54
 8006c2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c34:	9105      	str	r1, [sp, #20]
 8006c36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c40:	b975      	cbnz	r5, 8006c60 <_dtoa_r+0x40>
 8006c42:	2010      	movs	r0, #16
 8006c44:	f7ff f8c4 	bl	8005dd0 <malloc>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c4c:	b920      	cbnz	r0, 8006c58 <_dtoa_r+0x38>
 8006c4e:	4bb2      	ldr	r3, [pc, #712]	; (8006f18 <_dtoa_r+0x2f8>)
 8006c50:	21ea      	movs	r1, #234	; 0xea
 8006c52:	48b2      	ldr	r0, [pc, #712]	; (8006f1c <_dtoa_r+0x2fc>)
 8006c54:	f001 fd4a 	bl	80086ec <__assert_func>
 8006c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c5c:	6005      	str	r5, [r0, #0]
 8006c5e:	60c5      	str	r5, [r0, #12]
 8006c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	b151      	cbz	r1, 8006c7c <_dtoa_r+0x5c>
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	604a      	str	r2, [r1, #4]
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4093      	lsls	r3, r2
 8006c6e:	608b      	str	r3, [r1, #8]
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f83f 	bl	8007cf4 <_Bfree>
 8006c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	1e3b      	subs	r3, r7, #0
 8006c7e:	bfb9      	ittee	lt
 8006c80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	9303      	strlt	r3, [sp, #12]
 8006c86:	2300      	movge	r3, #0
 8006c88:	f8c8 3000 	strge.w	r3, [r8]
 8006c8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c90:	4ba3      	ldr	r3, [pc, #652]	; (8006f20 <_dtoa_r+0x300>)
 8006c92:	bfbc      	itt	lt
 8006c94:	2201      	movlt	r2, #1
 8006c96:	f8c8 2000 	strlt.w	r2, [r8]
 8006c9a:	ea33 0309 	bics.w	r3, r3, r9
 8006c9e:	d11b      	bne.n	8006cd8 <_dtoa_r+0xb8>
 8006ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ca2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cac:	4333      	orrs	r3, r6
 8006cae:	f000 857a 	beq.w	80077a6 <_dtoa_r+0xb86>
 8006cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb4:	b963      	cbnz	r3, 8006cd0 <_dtoa_r+0xb0>
 8006cb6:	4b9b      	ldr	r3, [pc, #620]	; (8006f24 <_dtoa_r+0x304>)
 8006cb8:	e024      	b.n	8006d04 <_dtoa_r+0xe4>
 8006cba:	4b9b      	ldr	r3, [pc, #620]	; (8006f28 <_dtoa_r+0x308>)
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	9800      	ldr	r0, [sp, #0]
 8006cc6:	b015      	add	sp, #84	; 0x54
 8006cc8:	ecbd 8b02 	vpop	{d8}
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd0:	4b94      	ldr	r3, [pc, #592]	; (8006f24 <_dtoa_r+0x304>)
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	e7f3      	b.n	8006cc0 <_dtoa_r+0xa0>
 8006cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	ec51 0b17 	vmov	r0, r1, d7
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006ce8:	f7f9 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cec:	4680      	mov	r8, r0
 8006cee:	b158      	cbz	r0, 8006d08 <_dtoa_r+0xe8>
 8006cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8551 	beq.w	80077a0 <_dtoa_r+0xb80>
 8006cfe:	488b      	ldr	r0, [pc, #556]	; (8006f2c <_dtoa_r+0x30c>)
 8006d00:	6018      	str	r0, [r3, #0]
 8006d02:	1e43      	subs	r3, r0, #1
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	e7dd      	b.n	8006cc4 <_dtoa_r+0xa4>
 8006d08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006d0c:	aa12      	add	r2, sp, #72	; 0x48
 8006d0e:	a913      	add	r1, sp, #76	; 0x4c
 8006d10:	4620      	mov	r0, r4
 8006d12:	f001 fad1 	bl	80082b8 <__d2b>
 8006d16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	2d00      	cmp	r5, #0
 8006d1e:	d07c      	beq.n	8006e1a <_dtoa_r+0x1fa>
 8006d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006d2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006d32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006d36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d3a:	4b7d      	ldr	r3, [pc, #500]	; (8006f30 <_dtoa_r+0x310>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 faa1 	bl	8000288 <__aeabi_dsub>
 8006d46:	a36e      	add	r3, pc, #440	; (adr r3, 8006f00 <_dtoa_r+0x2e0>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	a36d      	add	r3, pc, #436	; (adr r3, 8006f08 <_dtoa_r+0x2e8>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fa99 	bl	800028c <__adddf3>
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	460f      	mov	r7, r1
 8006d60:	f7f9 fbe0 	bl	8000524 <__aeabi_i2d>
 8006d64:	a36a      	add	r3, pc, #424	; (adr r3, 8006f10 <_dtoa_r+0x2f0>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f7f9 fc45 	bl	80005f8 <__aeabi_dmul>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fa89 	bl	800028c <__adddf3>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	f7f9 feeb 	bl	8000b58 <__aeabi_d2iz>
 8006d82:	2200      	movs	r2, #0
 8006d84:	4682      	mov	sl, r0
 8006d86:	2300      	movs	r3, #0
 8006d88:	4630      	mov	r0, r6
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	f7f9 fea6 	bl	8000adc <__aeabi_dcmplt>
 8006d90:	b148      	cbz	r0, 8006da6 <_dtoa_r+0x186>
 8006d92:	4650      	mov	r0, sl
 8006d94:	f7f9 fbc6 	bl	8000524 <__aeabi_i2d>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	f7f9 fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da0:	b908      	cbnz	r0, 8006da6 <_dtoa_r+0x186>
 8006da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006da6:	f1ba 0f16 	cmp.w	sl, #22
 8006daa:	d854      	bhi.n	8006e56 <_dtoa_r+0x236>
 8006dac:	4b61      	ldr	r3, [pc, #388]	; (8006f34 <_dtoa_r+0x314>)
 8006dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dba:	f7f9 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d04b      	beq.n	8006e5a <_dtoa_r+0x23a>
 8006dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	930e      	str	r3, [sp, #56]	; 0x38
 8006dca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dcc:	1b5d      	subs	r5, r3, r5
 8006dce:	1e6b      	subs	r3, r5, #1
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	bf43      	ittte	mi
 8006dd4:	2300      	movmi	r3, #0
 8006dd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006dda:	9304      	strmi	r3, [sp, #16]
 8006ddc:	f04f 0800 	movpl.w	r8, #0
 8006de0:	f1ba 0f00 	cmp.w	sl, #0
 8006de4:	db3b      	blt.n	8006e5e <_dtoa_r+0x23e>
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006dec:	4453      	add	r3, sl
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9306      	str	r3, [sp, #24]
 8006df4:	9b05      	ldr	r3, [sp, #20]
 8006df6:	2b09      	cmp	r3, #9
 8006df8:	d869      	bhi.n	8006ece <_dtoa_r+0x2ae>
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	bfc4      	itt	gt
 8006dfe:	3b04      	subgt	r3, #4
 8006e00:	9305      	strgt	r3, [sp, #20]
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	f1a3 0302 	sub.w	r3, r3, #2
 8006e08:	bfcc      	ite	gt
 8006e0a:	2500      	movgt	r5, #0
 8006e0c:	2501      	movle	r5, #1
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d869      	bhi.n	8006ee6 <_dtoa_r+0x2c6>
 8006e12:	e8df f003 	tbb	[pc, r3]
 8006e16:	4e2c      	.short	0x4e2c
 8006e18:	5a4c      	.short	0x5a4c
 8006e1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006e1e:	441d      	add	r5, r3
 8006e20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	bfc1      	itttt	gt
 8006e28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006e30:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e38:	bfda      	itte	le
 8006e3a:	f1c3 0320 	rsble	r3, r3, #32
 8006e3e:	fa06 f003 	lslle.w	r0, r6, r3
 8006e42:	4318      	orrgt	r0, r3
 8006e44:	f7f9 fb5e 	bl	8000504 <__aeabi_ui2d>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006e50:	3d01      	subs	r5, #1
 8006e52:	9310      	str	r3, [sp, #64]	; 0x40
 8006e54:	e771      	b.n	8006d3a <_dtoa_r+0x11a>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7b6      	b.n	8006dc8 <_dtoa_r+0x1a8>
 8006e5a:	900e      	str	r0, [sp, #56]	; 0x38
 8006e5c:	e7b5      	b.n	8006dca <_dtoa_r+0x1aa>
 8006e5e:	f1ca 0300 	rsb	r3, sl, #0
 8006e62:	9306      	str	r3, [sp, #24]
 8006e64:	2300      	movs	r3, #0
 8006e66:	eba8 080a 	sub.w	r8, r8, sl
 8006e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e6c:	e7c2      	b.n	8006df4 <_dtoa_r+0x1d4>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9308      	str	r3, [sp, #32]
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc39      	bgt.n	8006eec <_dtoa_r+0x2cc>
 8006e78:	f04f 0901 	mov.w	r9, #1
 8006e7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e80:	464b      	mov	r3, r9
 8006e82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6042      	str	r2, [r0, #4]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	f102 0614 	add.w	r6, r2, #20
 8006e92:	429e      	cmp	r6, r3
 8006e94:	6841      	ldr	r1, [r0, #4]
 8006e96:	d92f      	bls.n	8006ef8 <_dtoa_r+0x2d8>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 feeb 	bl	8007c74 <_Balloc>
 8006e9e:	9000      	str	r0, [sp, #0]
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d14b      	bne.n	8006f3c <_dtoa_r+0x31c>
 8006ea4:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <_dtoa_r+0x318>)
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006eac:	e6d1      	b.n	8006c52 <_dtoa_r+0x32>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7de      	b.n	8006e70 <_dtoa_r+0x250>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	eb0a 0903 	add.w	r9, sl, r3
 8006ebc:	f109 0301 	add.w	r3, r9, #1
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	bfb8      	it	lt
 8006ec6:	2301      	movlt	r3, #1
 8006ec8:	e7dd      	b.n	8006e86 <_dtoa_r+0x266>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e7f2      	b.n	8006eb4 <_dtoa_r+0x294>
 8006ece:	2501      	movs	r5, #1
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	9508      	str	r5, [sp, #32]
 8006ed6:	f04f 39ff 	mov.w	r9, #4294967295
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ee0:	2312      	movs	r3, #18
 8006ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee4:	e7cf      	b.n	8006e86 <_dtoa_r+0x266>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9308      	str	r3, [sp, #32]
 8006eea:	e7f4      	b.n	8006ed6 <_dtoa_r+0x2b6>
 8006eec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	e7c6      	b.n	8006e86 <_dtoa_r+0x266>
 8006ef8:	3101      	adds	r1, #1
 8006efa:	6041      	str	r1, [r0, #4]
 8006efc:	0052      	lsls	r2, r2, #1
 8006efe:	e7c6      	b.n	8006e8e <_dtoa_r+0x26e>
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	08008ac5 	.word	0x08008ac5
 8006f1c:	08008adc 	.word	0x08008adc
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	08008ac1 	.word	0x08008ac1
 8006f28:	08008ab8 	.word	0x08008ab8
 8006f2c:	08008a95 	.word	0x08008a95
 8006f30:	3ff80000 	.word	0x3ff80000
 8006f34:	08008c38 	.word	0x08008c38
 8006f38:	08008b3b 	.word	0x08008b3b
 8006f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f3e:	9a00      	ldr	r2, [sp, #0]
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	9b01      	ldr	r3, [sp, #4]
 8006f44:	2b0e      	cmp	r3, #14
 8006f46:	f200 80ad 	bhi.w	80070a4 <_dtoa_r+0x484>
 8006f4a:	2d00      	cmp	r5, #0
 8006f4c:	f000 80aa 	beq.w	80070a4 <_dtoa_r+0x484>
 8006f50:	f1ba 0f00 	cmp.w	sl, #0
 8006f54:	dd36      	ble.n	8006fc4 <_dtoa_r+0x3a4>
 8006f56:	4ac3      	ldr	r2, [pc, #780]	; (8007264 <_dtoa_r+0x644>)
 8006f58:	f00a 030f 	and.w	r3, sl, #15
 8006f5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f60:	ed93 7b00 	vldr	d7, [r3]
 8006f64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006f6c:	eeb0 8a47 	vmov.f32	s16, s14
 8006f70:	eef0 8a67 	vmov.f32	s17, s15
 8006f74:	d016      	beq.n	8006fa4 <_dtoa_r+0x384>
 8006f76:	4bbc      	ldr	r3, [pc, #752]	; (8007268 <_dtoa_r+0x648>)
 8006f78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f80:	f7f9 fc64 	bl	800084c <__aeabi_ddiv>
 8006f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f88:	f007 070f 	and.w	r7, r7, #15
 8006f8c:	2503      	movs	r5, #3
 8006f8e:	4eb6      	ldr	r6, [pc, #728]	; (8007268 <_dtoa_r+0x648>)
 8006f90:	b957      	cbnz	r7, 8006fa8 <_dtoa_r+0x388>
 8006f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f96:	ec53 2b18 	vmov	r2, r3, d8
 8006f9a:	f7f9 fc57 	bl	800084c <__aeabi_ddiv>
 8006f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa2:	e029      	b.n	8006ff8 <_dtoa_r+0x3d8>
 8006fa4:	2502      	movs	r5, #2
 8006fa6:	e7f2      	b.n	8006f8e <_dtoa_r+0x36e>
 8006fa8:	07f9      	lsls	r1, r7, #31
 8006faa:	d508      	bpl.n	8006fbe <_dtoa_r+0x39e>
 8006fac:	ec51 0b18 	vmov	r0, r1, d8
 8006fb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fb4:	f7f9 fb20 	bl	80005f8 <__aeabi_dmul>
 8006fb8:	ec41 0b18 	vmov	d8, r0, r1
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	107f      	asrs	r7, r7, #1
 8006fc0:	3608      	adds	r6, #8
 8006fc2:	e7e5      	b.n	8006f90 <_dtoa_r+0x370>
 8006fc4:	f000 80a6 	beq.w	8007114 <_dtoa_r+0x4f4>
 8006fc8:	f1ca 0600 	rsb	r6, sl, #0
 8006fcc:	4ba5      	ldr	r3, [pc, #660]	; (8007264 <_dtoa_r+0x644>)
 8006fce:	4fa6      	ldr	r7, [pc, #664]	; (8007268 <_dtoa_r+0x648>)
 8006fd0:	f006 020f 	and.w	r2, r6, #15
 8006fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe8:	1136      	asrs	r6, r6, #4
 8006fea:	2300      	movs	r3, #0
 8006fec:	2502      	movs	r5, #2
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	f040 8085 	bne.w	80070fe <_dtoa_r+0x4de>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1d2      	bne.n	8006f9e <_dtoa_r+0x37e>
 8006ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 808c 	beq.w	8007118 <_dtoa_r+0x4f8>
 8007000:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007004:	4b99      	ldr	r3, [pc, #612]	; (800726c <_dtoa_r+0x64c>)
 8007006:	2200      	movs	r2, #0
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 fd66 	bl	8000adc <__aeabi_dcmplt>
 8007010:	2800      	cmp	r0, #0
 8007012:	f000 8081 	beq.w	8007118 <_dtoa_r+0x4f8>
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d07d      	beq.n	8007118 <_dtoa_r+0x4f8>
 800701c:	f1b9 0f00 	cmp.w	r9, #0
 8007020:	dd3c      	ble.n	800709c <_dtoa_r+0x47c>
 8007022:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	2200      	movs	r2, #0
 800702a:	4b91      	ldr	r3, [pc, #580]	; (8007270 <_dtoa_r+0x650>)
 800702c:	4630      	mov	r0, r6
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 fae2 	bl	80005f8 <__aeabi_dmul>
 8007034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007038:	3501      	adds	r5, #1
 800703a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800703e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007042:	4628      	mov	r0, r5
 8007044:	f7f9 fa6e 	bl	8000524 <__aeabi_i2d>
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	f7f9 fad4 	bl	80005f8 <__aeabi_dmul>
 8007050:	4b88      	ldr	r3, [pc, #544]	; (8007274 <_dtoa_r+0x654>)
 8007052:	2200      	movs	r2, #0
 8007054:	f7f9 f91a 	bl	800028c <__adddf3>
 8007058:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800705c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	d15c      	bne.n	8007122 <_dtoa_r+0x502>
 8007068:	4b83      	ldr	r3, [pc, #524]	; (8007278 <_dtoa_r+0x658>)
 800706a:	2200      	movs	r2, #0
 800706c:	4630      	mov	r0, r6
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
 800707c:	f7f9 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 8296 	bne.w	80075b2 <_dtoa_r+0x992>
 8007086:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800708a:	4630      	mov	r0, r6
 800708c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fd23 	bl	8000adc <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	f040 8288 	bne.w	80075ac <_dtoa_r+0x98c>
 800709c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f2c0 8158 	blt.w	800735c <_dtoa_r+0x73c>
 80070ac:	f1ba 0f0e 	cmp.w	sl, #14
 80070b0:	f300 8154 	bgt.w	800735c <_dtoa_r+0x73c>
 80070b4:	4b6b      	ldr	r3, [pc, #428]	; (8007264 <_dtoa_r+0x644>)
 80070b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f280 80e3 	bge.w	800728c <_dtoa_r+0x66c>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f300 80df 	bgt.w	800728c <_dtoa_r+0x66c>
 80070ce:	f040 826d 	bne.w	80075ac <_dtoa_r+0x98c>
 80070d2:	4b69      	ldr	r3, [pc, #420]	; (8007278 <_dtoa_r+0x658>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	4640      	mov	r0, r8
 80070d8:	4649      	mov	r1, r9
 80070da:	f7f9 fa8d 	bl	80005f8 <__aeabi_dmul>
 80070de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e2:	f7f9 fd0f 	bl	8000b04 <__aeabi_dcmpge>
 80070e6:	9e01      	ldr	r6, [sp, #4]
 80070e8:	4637      	mov	r7, r6
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f040 8243 	bne.w	8007576 <_dtoa_r+0x956>
 80070f0:	9d00      	ldr	r5, [sp, #0]
 80070f2:	2331      	movs	r3, #49	; 0x31
 80070f4:	f805 3b01 	strb.w	r3, [r5], #1
 80070f8:	f10a 0a01 	add.w	sl, sl, #1
 80070fc:	e23f      	b.n	800757e <_dtoa_r+0x95e>
 80070fe:	07f2      	lsls	r2, r6, #31
 8007100:	d505      	bpl.n	800710e <_dtoa_r+0x4ee>
 8007102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007106:	f7f9 fa77 	bl	80005f8 <__aeabi_dmul>
 800710a:	3501      	adds	r5, #1
 800710c:	2301      	movs	r3, #1
 800710e:	1076      	asrs	r6, r6, #1
 8007110:	3708      	adds	r7, #8
 8007112:	e76c      	b.n	8006fee <_dtoa_r+0x3ce>
 8007114:	2502      	movs	r5, #2
 8007116:	e76f      	b.n	8006ff8 <_dtoa_r+0x3d8>
 8007118:	9b01      	ldr	r3, [sp, #4]
 800711a:	f8cd a01c 	str.w	sl, [sp, #28]
 800711e:	930c      	str	r3, [sp, #48]	; 0x30
 8007120:	e78d      	b.n	800703e <_dtoa_r+0x41e>
 8007122:	9900      	ldr	r1, [sp, #0]
 8007124:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007128:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <_dtoa_r+0x644>)
 800712a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800712e:	4401      	add	r1, r0
 8007130:	9102      	str	r1, [sp, #8]
 8007132:	9908      	ldr	r1, [sp, #32]
 8007134:	eeb0 8a47 	vmov.f32	s16, s14
 8007138:	eef0 8a67 	vmov.f32	s17, s15
 800713c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007140:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007144:	2900      	cmp	r1, #0
 8007146:	d045      	beq.n	80071d4 <_dtoa_r+0x5b4>
 8007148:	494c      	ldr	r1, [pc, #304]	; (800727c <_dtoa_r+0x65c>)
 800714a:	2000      	movs	r0, #0
 800714c:	f7f9 fb7e 	bl	800084c <__aeabi_ddiv>
 8007150:	ec53 2b18 	vmov	r2, r3, d8
 8007154:	f7f9 f898 	bl	8000288 <__aeabi_dsub>
 8007158:	9d00      	ldr	r5, [sp, #0]
 800715a:	ec41 0b18 	vmov	d8, r0, r1
 800715e:	4639      	mov	r1, r7
 8007160:	4630      	mov	r0, r6
 8007162:	f7f9 fcf9 	bl	8000b58 <__aeabi_d2iz>
 8007166:	900c      	str	r0, [sp, #48]	; 0x30
 8007168:	f7f9 f9dc 	bl	8000524 <__aeabi_i2d>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 f888 	bl	8000288 <__aeabi_dsub>
 8007178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800717a:	3330      	adds	r3, #48	; 0x30
 800717c:	f805 3b01 	strb.w	r3, [r5], #1
 8007180:	ec53 2b18 	vmov	r2, r3, d8
 8007184:	4606      	mov	r6, r0
 8007186:	460f      	mov	r7, r1
 8007188:	f7f9 fca8 	bl	8000adc <__aeabi_dcmplt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d165      	bne.n	800725c <_dtoa_r+0x63c>
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	4935      	ldr	r1, [pc, #212]	; (800726c <_dtoa_r+0x64c>)
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 f876 	bl	8000288 <__aeabi_dsub>
 800719c:	ec53 2b18 	vmov	r2, r3, d8
 80071a0:	f7f9 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 80b9 	bne.w	800731c <_dtoa_r+0x6fc>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	429d      	cmp	r5, r3
 80071ae:	f43f af75 	beq.w	800709c <_dtoa_r+0x47c>
 80071b2:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <_dtoa_r+0x650>)
 80071b4:	ec51 0b18 	vmov	r0, r1, d8
 80071b8:	2200      	movs	r2, #0
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <_dtoa_r+0x650>)
 80071c0:	ec41 0b18 	vmov	d8, r0, r1
 80071c4:	2200      	movs	r2, #0
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	e7c4      	b.n	800715e <_dtoa_r+0x53e>
 80071d4:	ec51 0b17 	vmov	r0, r1, d7
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	9d00      	ldr	r5, [sp, #0]
 80071e0:	930c      	str	r3, [sp, #48]	; 0x30
 80071e2:	ec41 0b18 	vmov	d8, r0, r1
 80071e6:	4639      	mov	r1, r7
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7f9 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80071ee:	9011      	str	r0, [sp, #68]	; 0x44
 80071f0:	f7f9 f998 	bl	8000524 <__aeabi_i2d>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 f844 	bl	8000288 <__aeabi_dsub>
 8007200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007202:	3330      	adds	r3, #48	; 0x30
 8007204:	f805 3b01 	strb.w	r3, [r5], #1
 8007208:	9b02      	ldr	r3, [sp, #8]
 800720a:	429d      	cmp	r5, r3
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	d134      	bne.n	8007280 <_dtoa_r+0x660>
 8007216:	4b19      	ldr	r3, [pc, #100]	; (800727c <_dtoa_r+0x65c>)
 8007218:	ec51 0b18 	vmov	r0, r1, d8
 800721c:	f7f9 f836 	bl	800028c <__adddf3>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f9 fc76 	bl	8000b18 <__aeabi_dcmpgt>
 800722c:	2800      	cmp	r0, #0
 800722e:	d175      	bne.n	800731c <_dtoa_r+0x6fc>
 8007230:	ec53 2b18 	vmov	r2, r3, d8
 8007234:	4911      	ldr	r1, [pc, #68]	; (800727c <_dtoa_r+0x65c>)
 8007236:	2000      	movs	r0, #0
 8007238:	f7f9 f826 	bl	8000288 <__aeabi_dsub>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8007248:	2800      	cmp	r0, #0
 800724a:	f43f af27 	beq.w	800709c <_dtoa_r+0x47c>
 800724e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007250:	1e6b      	subs	r3, r5, #1
 8007252:	930c      	str	r3, [sp, #48]	; 0x30
 8007254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007258:	2b30      	cmp	r3, #48	; 0x30
 800725a:	d0f8      	beq.n	800724e <_dtoa_r+0x62e>
 800725c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007260:	e04a      	b.n	80072f8 <_dtoa_r+0x6d8>
 8007262:	bf00      	nop
 8007264:	08008c38 	.word	0x08008c38
 8007268:	08008c10 	.word	0x08008c10
 800726c:	3ff00000 	.word	0x3ff00000
 8007270:	40240000 	.word	0x40240000
 8007274:	401c0000 	.word	0x401c0000
 8007278:	40140000 	.word	0x40140000
 800727c:	3fe00000 	.word	0x3fe00000
 8007280:	4baf      	ldr	r3, [pc, #700]	; (8007540 <_dtoa_r+0x920>)
 8007282:	f7f9 f9b9 	bl	80005f8 <__aeabi_dmul>
 8007286:	4606      	mov	r6, r0
 8007288:	460f      	mov	r7, r1
 800728a:	e7ac      	b.n	80071e6 <_dtoa_r+0x5c6>
 800728c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007290:	9d00      	ldr	r5, [sp, #0]
 8007292:	4642      	mov	r2, r8
 8007294:	464b      	mov	r3, r9
 8007296:	4630      	mov	r0, r6
 8007298:	4639      	mov	r1, r7
 800729a:	f7f9 fad7 	bl	800084c <__aeabi_ddiv>
 800729e:	f7f9 fc5b 	bl	8000b58 <__aeabi_d2iz>
 80072a2:	9002      	str	r0, [sp, #8]
 80072a4:	f7f9 f93e 	bl	8000524 <__aeabi_i2d>
 80072a8:	4642      	mov	r2, r8
 80072aa:	464b      	mov	r3, r9
 80072ac:	f7f9 f9a4 	bl	80005f8 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f8 ffe6 	bl	8000288 <__aeabi_dsub>
 80072bc:	9e02      	ldr	r6, [sp, #8]
 80072be:	9f01      	ldr	r7, [sp, #4]
 80072c0:	3630      	adds	r6, #48	; 0x30
 80072c2:	f805 6b01 	strb.w	r6, [r5], #1
 80072c6:	9e00      	ldr	r6, [sp, #0]
 80072c8:	1bae      	subs	r6, r5, r6
 80072ca:	42b7      	cmp	r7, r6
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	d137      	bne.n	8007342 <_dtoa_r+0x722>
 80072d2:	f7f8 ffdb 	bl	800028c <__adddf3>
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	f7f9 fc1b 	bl	8000b18 <__aeabi_dcmpgt>
 80072e2:	b9c8      	cbnz	r0, 8007318 <_dtoa_r+0x6f8>
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f9 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f0:	b110      	cbz	r0, 80072f8 <_dtoa_r+0x6d8>
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	07d9      	lsls	r1, r3, #31
 80072f6:	d40f      	bmi.n	8007318 <_dtoa_r+0x6f8>
 80072f8:	4620      	mov	r0, r4
 80072fa:	4659      	mov	r1, fp
 80072fc:	f000 fcfa 	bl	8007cf4 <_Bfree>
 8007300:	2300      	movs	r3, #0
 8007302:	702b      	strb	r3, [r5, #0]
 8007304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007306:	f10a 0001 	add.w	r0, sl, #1
 800730a:	6018      	str	r0, [r3, #0]
 800730c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730e:	2b00      	cmp	r3, #0
 8007310:	f43f acd8 	beq.w	8006cc4 <_dtoa_r+0xa4>
 8007314:	601d      	str	r5, [r3, #0]
 8007316:	e4d5      	b.n	8006cc4 <_dtoa_r+0xa4>
 8007318:	f8cd a01c 	str.w	sl, [sp, #28]
 800731c:	462b      	mov	r3, r5
 800731e:	461d      	mov	r5, r3
 8007320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007324:	2a39      	cmp	r2, #57	; 0x39
 8007326:	d108      	bne.n	800733a <_dtoa_r+0x71a>
 8007328:	9a00      	ldr	r2, [sp, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d1f7      	bne.n	800731e <_dtoa_r+0x6fe>
 800732e:	9a07      	ldr	r2, [sp, #28]
 8007330:	9900      	ldr	r1, [sp, #0]
 8007332:	3201      	adds	r2, #1
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	2230      	movs	r2, #48	; 0x30
 8007338:	700a      	strb	r2, [r1, #0]
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	3201      	adds	r2, #1
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	e78c      	b.n	800725c <_dtoa_r+0x63c>
 8007342:	4b7f      	ldr	r3, [pc, #508]	; (8007540 <_dtoa_r+0x920>)
 8007344:	2200      	movs	r2, #0
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	2200      	movs	r2, #0
 800734c:	2300      	movs	r3, #0
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	f7f9 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007356:	2800      	cmp	r0, #0
 8007358:	d09b      	beq.n	8007292 <_dtoa_r+0x672>
 800735a:	e7cd      	b.n	80072f8 <_dtoa_r+0x6d8>
 800735c:	9a08      	ldr	r2, [sp, #32]
 800735e:	2a00      	cmp	r2, #0
 8007360:	f000 80c4 	beq.w	80074ec <_dtoa_r+0x8cc>
 8007364:	9a05      	ldr	r2, [sp, #20]
 8007366:	2a01      	cmp	r2, #1
 8007368:	f300 80a8 	bgt.w	80074bc <_dtoa_r+0x89c>
 800736c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800736e:	2a00      	cmp	r2, #0
 8007370:	f000 80a0 	beq.w	80074b4 <_dtoa_r+0x894>
 8007374:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007378:	9e06      	ldr	r6, [sp, #24]
 800737a:	4645      	mov	r5, r8
 800737c:	9a04      	ldr	r2, [sp, #16]
 800737e:	2101      	movs	r1, #1
 8007380:	441a      	add	r2, r3
 8007382:	4620      	mov	r0, r4
 8007384:	4498      	add	r8, r3
 8007386:	9204      	str	r2, [sp, #16]
 8007388:	f000 fd70 	bl	8007e6c <__i2b>
 800738c:	4607      	mov	r7, r0
 800738e:	2d00      	cmp	r5, #0
 8007390:	dd0b      	ble.n	80073aa <_dtoa_r+0x78a>
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dd08      	ble.n	80073aa <_dtoa_r+0x78a>
 8007398:	42ab      	cmp	r3, r5
 800739a:	9a04      	ldr	r2, [sp, #16]
 800739c:	bfa8      	it	ge
 800739e:	462b      	movge	r3, r5
 80073a0:	eba8 0803 	sub.w	r8, r8, r3
 80073a4:	1aed      	subs	r5, r5, r3
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	b1fb      	cbz	r3, 80073ee <_dtoa_r+0x7ce>
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 809f 	beq.w	80074f4 <_dtoa_r+0x8d4>
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	dd11      	ble.n	80073de <_dtoa_r+0x7be>
 80073ba:	4639      	mov	r1, r7
 80073bc:	4632      	mov	r2, r6
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 fe10 	bl	8007fe4 <__pow5mult>
 80073c4:	465a      	mov	r2, fp
 80073c6:	4601      	mov	r1, r0
 80073c8:	4607      	mov	r7, r0
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fd64 	bl	8007e98 <__multiply>
 80073d0:	4659      	mov	r1, fp
 80073d2:	9007      	str	r0, [sp, #28]
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fc8d 	bl	8007cf4 <_Bfree>
 80073da:	9b07      	ldr	r3, [sp, #28]
 80073dc:	469b      	mov	fp, r3
 80073de:	9b06      	ldr	r3, [sp, #24]
 80073e0:	1b9a      	subs	r2, r3, r6
 80073e2:	d004      	beq.n	80073ee <_dtoa_r+0x7ce>
 80073e4:	4659      	mov	r1, fp
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 fdfc 	bl	8007fe4 <__pow5mult>
 80073ec:	4683      	mov	fp, r0
 80073ee:	2101      	movs	r1, #1
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 fd3b 	bl	8007e6c <__i2b>
 80073f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	4606      	mov	r6, r0
 80073fc:	dd7c      	ble.n	80074f8 <_dtoa_r+0x8d8>
 80073fe:	461a      	mov	r2, r3
 8007400:	4601      	mov	r1, r0
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fdee 	bl	8007fe4 <__pow5mult>
 8007408:	9b05      	ldr	r3, [sp, #20]
 800740a:	2b01      	cmp	r3, #1
 800740c:	4606      	mov	r6, r0
 800740e:	dd76      	ble.n	80074fe <_dtoa_r+0x8de>
 8007410:	2300      	movs	r3, #0
 8007412:	9306      	str	r3, [sp, #24]
 8007414:	6933      	ldr	r3, [r6, #16]
 8007416:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800741a:	6918      	ldr	r0, [r3, #16]
 800741c:	f000 fcd6 	bl	8007dcc <__hi0bits>
 8007420:	f1c0 0020 	rsb	r0, r0, #32
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	4418      	add	r0, r3
 8007428:	f010 001f 	ands.w	r0, r0, #31
 800742c:	f000 8086 	beq.w	800753c <_dtoa_r+0x91c>
 8007430:	f1c0 0320 	rsb	r3, r0, #32
 8007434:	2b04      	cmp	r3, #4
 8007436:	dd7f      	ble.n	8007538 <_dtoa_r+0x918>
 8007438:	f1c0 001c 	rsb	r0, r0, #28
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	4403      	add	r3, r0
 8007440:	4480      	add	r8, r0
 8007442:	4405      	add	r5, r0
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	f1b8 0f00 	cmp.w	r8, #0
 800744a:	dd05      	ble.n	8007458 <_dtoa_r+0x838>
 800744c:	4659      	mov	r1, fp
 800744e:	4642      	mov	r2, r8
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fe21 	bl	8008098 <__lshift>
 8007456:	4683      	mov	fp, r0
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dd05      	ble.n	800746a <_dtoa_r+0x84a>
 800745e:	4631      	mov	r1, r6
 8007460:	461a      	mov	r2, r3
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fe18 	bl	8008098 <__lshift>
 8007468:	4606      	mov	r6, r0
 800746a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	d069      	beq.n	8007544 <_dtoa_r+0x924>
 8007470:	4631      	mov	r1, r6
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fe7c 	bl	8008170 <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	da63      	bge.n	8007544 <_dtoa_r+0x924>
 800747c:	2300      	movs	r3, #0
 800747e:	4659      	mov	r1, fp
 8007480:	220a      	movs	r2, #10
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fc58 	bl	8007d38 <__multadd>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800748e:	4683      	mov	fp, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 818f 	beq.w	80077b4 <_dtoa_r+0xb94>
 8007496:	4639      	mov	r1, r7
 8007498:	2300      	movs	r3, #0
 800749a:	220a      	movs	r2, #10
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fc4b 	bl	8007d38 <__multadd>
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	4607      	mov	r7, r0
 80074a8:	f300 808e 	bgt.w	80075c8 <_dtoa_r+0x9a8>
 80074ac:	9b05      	ldr	r3, [sp, #20]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	dc50      	bgt.n	8007554 <_dtoa_r+0x934>
 80074b2:	e089      	b.n	80075c8 <_dtoa_r+0x9a8>
 80074b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074ba:	e75d      	b.n	8007378 <_dtoa_r+0x758>
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	1e5e      	subs	r6, r3, #1
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	bfbf      	itttt	lt
 80074c6:	9b06      	ldrlt	r3, [sp, #24]
 80074c8:	9606      	strlt	r6, [sp, #24]
 80074ca:	1af2      	sublt	r2, r6, r3
 80074cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80074ce:	bfb6      	itet	lt
 80074d0:	189b      	addlt	r3, r3, r2
 80074d2:	1b9e      	subge	r6, r3, r6
 80074d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	bfb8      	it	lt
 80074da:	2600      	movlt	r6, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bfb5      	itete	lt
 80074e0:	eba8 0503 	sublt.w	r5, r8, r3
 80074e4:	9b01      	ldrge	r3, [sp, #4]
 80074e6:	2300      	movlt	r3, #0
 80074e8:	4645      	movge	r5, r8
 80074ea:	e747      	b.n	800737c <_dtoa_r+0x75c>
 80074ec:	9e06      	ldr	r6, [sp, #24]
 80074ee:	9f08      	ldr	r7, [sp, #32]
 80074f0:	4645      	mov	r5, r8
 80074f2:	e74c      	b.n	800738e <_dtoa_r+0x76e>
 80074f4:	9a06      	ldr	r2, [sp, #24]
 80074f6:	e775      	b.n	80073e4 <_dtoa_r+0x7c4>
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	dc18      	bgt.n	8007530 <_dtoa_r+0x910>
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	b9b3      	cbnz	r3, 8007530 <_dtoa_r+0x910>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007508:	b9a3      	cbnz	r3, 8007534 <_dtoa_r+0x914>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007510:	0d1b      	lsrs	r3, r3, #20
 8007512:	051b      	lsls	r3, r3, #20
 8007514:	b12b      	cbz	r3, 8007522 <_dtoa_r+0x902>
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	3301      	adds	r3, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	f108 0801 	add.w	r8, r8, #1
 8007520:	2301      	movs	r3, #1
 8007522:	9306      	str	r3, [sp, #24]
 8007524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007526:	2b00      	cmp	r3, #0
 8007528:	f47f af74 	bne.w	8007414 <_dtoa_r+0x7f4>
 800752c:	2001      	movs	r0, #1
 800752e:	e779      	b.n	8007424 <_dtoa_r+0x804>
 8007530:	2300      	movs	r3, #0
 8007532:	e7f6      	b.n	8007522 <_dtoa_r+0x902>
 8007534:	9b02      	ldr	r3, [sp, #8]
 8007536:	e7f4      	b.n	8007522 <_dtoa_r+0x902>
 8007538:	d085      	beq.n	8007446 <_dtoa_r+0x826>
 800753a:	4618      	mov	r0, r3
 800753c:	301c      	adds	r0, #28
 800753e:	e77d      	b.n	800743c <_dtoa_r+0x81c>
 8007540:	40240000 	.word	0x40240000
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	dc38      	bgt.n	80075bc <_dtoa_r+0x99c>
 800754a:	9b05      	ldr	r3, [sp, #20]
 800754c:	2b02      	cmp	r3, #2
 800754e:	dd35      	ble.n	80075bc <_dtoa_r+0x99c>
 8007550:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007554:	f1b9 0f00 	cmp.w	r9, #0
 8007558:	d10d      	bne.n	8007576 <_dtoa_r+0x956>
 800755a:	4631      	mov	r1, r6
 800755c:	464b      	mov	r3, r9
 800755e:	2205      	movs	r2, #5
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fbe9 	bl	8007d38 <__multadd>
 8007566:	4601      	mov	r1, r0
 8007568:	4606      	mov	r6, r0
 800756a:	4658      	mov	r0, fp
 800756c:	f000 fe00 	bl	8008170 <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	f73f adbd 	bgt.w	80070f0 <_dtoa_r+0x4d0>
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	9d00      	ldr	r5, [sp, #0]
 800757a:	ea6f 0a03 	mvn.w	sl, r3
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	4631      	mov	r1, r6
 8007584:	4620      	mov	r0, r4
 8007586:	f000 fbb5 	bl	8007cf4 <_Bfree>
 800758a:	2f00      	cmp	r7, #0
 800758c:	f43f aeb4 	beq.w	80072f8 <_dtoa_r+0x6d8>
 8007590:	f1b8 0f00 	cmp.w	r8, #0
 8007594:	d005      	beq.n	80075a2 <_dtoa_r+0x982>
 8007596:	45b8      	cmp	r8, r7
 8007598:	d003      	beq.n	80075a2 <_dtoa_r+0x982>
 800759a:	4641      	mov	r1, r8
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fba9 	bl	8007cf4 <_Bfree>
 80075a2:	4639      	mov	r1, r7
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fba5 	bl	8007cf4 <_Bfree>
 80075aa:	e6a5      	b.n	80072f8 <_dtoa_r+0x6d8>
 80075ac:	2600      	movs	r6, #0
 80075ae:	4637      	mov	r7, r6
 80075b0:	e7e1      	b.n	8007576 <_dtoa_r+0x956>
 80075b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80075b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075b8:	4637      	mov	r7, r6
 80075ba:	e599      	b.n	80070f0 <_dtoa_r+0x4d0>
 80075bc:	9b08      	ldr	r3, [sp, #32]
 80075be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 80fd 	beq.w	80077c2 <_dtoa_r+0xba2>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	dd05      	ble.n	80075d8 <_dtoa_r+0x9b8>
 80075cc:	4639      	mov	r1, r7
 80075ce:	462a      	mov	r2, r5
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fd61 	bl	8008098 <__lshift>
 80075d6:	4607      	mov	r7, r0
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d05c      	beq.n	8007698 <_dtoa_r+0xa78>
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fb47 	bl	8007c74 <_Balloc>
 80075e6:	4605      	mov	r5, r0
 80075e8:	b928      	cbnz	r0, 80075f6 <_dtoa_r+0x9d6>
 80075ea:	4b80      	ldr	r3, [pc, #512]	; (80077ec <_dtoa_r+0xbcc>)
 80075ec:	4602      	mov	r2, r0
 80075ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075f2:	f7ff bb2e 	b.w	8006c52 <_dtoa_r+0x32>
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	3202      	adds	r2, #2
 80075fa:	0092      	lsls	r2, r2, #2
 80075fc:	f107 010c 	add.w	r1, r7, #12
 8007600:	300c      	adds	r0, #12
 8007602:	f000 fb1d 	bl	8007c40 <memcpy>
 8007606:	2201      	movs	r2, #1
 8007608:	4629      	mov	r1, r5
 800760a:	4620      	mov	r0, r4
 800760c:	f000 fd44 	bl	8008098 <__lshift>
 8007610:	9b00      	ldr	r3, [sp, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	444b      	add	r3, r9
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	46b8      	mov	r8, r7
 8007624:	9306      	str	r3, [sp, #24]
 8007626:	4607      	mov	r7, r0
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	4631      	mov	r1, r6
 800762c:	3b01      	subs	r3, #1
 800762e:	4658      	mov	r0, fp
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	f7ff fa69 	bl	8006b08 <quorem>
 8007636:	4603      	mov	r3, r0
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	9004      	str	r0, [sp, #16]
 800763c:	4641      	mov	r1, r8
 800763e:	4658      	mov	r0, fp
 8007640:	9308      	str	r3, [sp, #32]
 8007642:	f000 fd95 	bl	8008170 <__mcmp>
 8007646:	463a      	mov	r2, r7
 8007648:	4681      	mov	r9, r0
 800764a:	4631      	mov	r1, r6
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fdab 	bl	80081a8 <__mdiff>
 8007652:	68c2      	ldr	r2, [r0, #12]
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	4605      	mov	r5, r0
 8007658:	bb02      	cbnz	r2, 800769c <_dtoa_r+0xa7c>
 800765a:	4601      	mov	r1, r0
 800765c:	4658      	mov	r0, fp
 800765e:	f000 fd87 	bl	8008170 <__mcmp>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	4602      	mov	r2, r0
 8007666:	4629      	mov	r1, r5
 8007668:	4620      	mov	r0, r4
 800766a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800766e:	f000 fb41 	bl	8007cf4 <_Bfree>
 8007672:	9b05      	ldr	r3, [sp, #20]
 8007674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007676:	9d01      	ldr	r5, [sp, #4]
 8007678:	ea43 0102 	orr.w	r1, r3, r2
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	430b      	orrs	r3, r1
 8007680:	9b08      	ldr	r3, [sp, #32]
 8007682:	d10d      	bne.n	80076a0 <_dtoa_r+0xa80>
 8007684:	2b39      	cmp	r3, #57	; 0x39
 8007686:	d029      	beq.n	80076dc <_dtoa_r+0xabc>
 8007688:	f1b9 0f00 	cmp.w	r9, #0
 800768c:	dd01      	ble.n	8007692 <_dtoa_r+0xa72>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	3331      	adds	r3, #49	; 0x31
 8007692:	9a02      	ldr	r2, [sp, #8]
 8007694:	7013      	strb	r3, [r2, #0]
 8007696:	e774      	b.n	8007582 <_dtoa_r+0x962>
 8007698:	4638      	mov	r0, r7
 800769a:	e7b9      	b.n	8007610 <_dtoa_r+0x9f0>
 800769c:	2201      	movs	r2, #1
 800769e:	e7e2      	b.n	8007666 <_dtoa_r+0xa46>
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	db06      	blt.n	80076b4 <_dtoa_r+0xa94>
 80076a6:	9905      	ldr	r1, [sp, #20]
 80076a8:	ea41 0909 	orr.w	r9, r1, r9
 80076ac:	9906      	ldr	r1, [sp, #24]
 80076ae:	ea59 0101 	orrs.w	r1, r9, r1
 80076b2:	d120      	bne.n	80076f6 <_dtoa_r+0xad6>
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	ddec      	ble.n	8007692 <_dtoa_r+0xa72>
 80076b8:	4659      	mov	r1, fp
 80076ba:	2201      	movs	r2, #1
 80076bc:	4620      	mov	r0, r4
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	f000 fcea 	bl	8008098 <__lshift>
 80076c4:	4631      	mov	r1, r6
 80076c6:	4683      	mov	fp, r0
 80076c8:	f000 fd52 	bl	8008170 <__mcmp>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	dc02      	bgt.n	80076d8 <_dtoa_r+0xab8>
 80076d2:	d1de      	bne.n	8007692 <_dtoa_r+0xa72>
 80076d4:	07da      	lsls	r2, r3, #31
 80076d6:	d5dc      	bpl.n	8007692 <_dtoa_r+0xa72>
 80076d8:	2b39      	cmp	r3, #57	; 0x39
 80076da:	d1d8      	bne.n	800768e <_dtoa_r+0xa6e>
 80076dc:	9a02      	ldr	r2, [sp, #8]
 80076de:	2339      	movs	r3, #57	; 0x39
 80076e0:	7013      	strb	r3, [r2, #0]
 80076e2:	462b      	mov	r3, r5
 80076e4:	461d      	mov	r5, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ec:	2a39      	cmp	r2, #57	; 0x39
 80076ee:	d050      	beq.n	8007792 <_dtoa_r+0xb72>
 80076f0:	3201      	adds	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e745      	b.n	8007582 <_dtoa_r+0x962>
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	dd03      	ble.n	8007702 <_dtoa_r+0xae2>
 80076fa:	2b39      	cmp	r3, #57	; 0x39
 80076fc:	d0ee      	beq.n	80076dc <_dtoa_r+0xabc>
 80076fe:	3301      	adds	r3, #1
 8007700:	e7c7      	b.n	8007692 <_dtoa_r+0xa72>
 8007702:	9a01      	ldr	r2, [sp, #4]
 8007704:	9907      	ldr	r1, [sp, #28]
 8007706:	f802 3c01 	strb.w	r3, [r2, #-1]
 800770a:	428a      	cmp	r2, r1
 800770c:	d02a      	beq.n	8007764 <_dtoa_r+0xb44>
 800770e:	4659      	mov	r1, fp
 8007710:	2300      	movs	r3, #0
 8007712:	220a      	movs	r2, #10
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fb0f 	bl	8007d38 <__multadd>
 800771a:	45b8      	cmp	r8, r7
 800771c:	4683      	mov	fp, r0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	f04f 020a 	mov.w	r2, #10
 8007726:	4641      	mov	r1, r8
 8007728:	4620      	mov	r0, r4
 800772a:	d107      	bne.n	800773c <_dtoa_r+0xb1c>
 800772c:	f000 fb04 	bl	8007d38 <__multadd>
 8007730:	4680      	mov	r8, r0
 8007732:	4607      	mov	r7, r0
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	3301      	adds	r3, #1
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	e775      	b.n	8007628 <_dtoa_r+0xa08>
 800773c:	f000 fafc 	bl	8007d38 <__multadd>
 8007740:	4639      	mov	r1, r7
 8007742:	4680      	mov	r8, r0
 8007744:	2300      	movs	r3, #0
 8007746:	220a      	movs	r2, #10
 8007748:	4620      	mov	r0, r4
 800774a:	f000 faf5 	bl	8007d38 <__multadd>
 800774e:	4607      	mov	r7, r0
 8007750:	e7f0      	b.n	8007734 <_dtoa_r+0xb14>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	9a00      	ldr	r2, [sp, #0]
 8007758:	bfcc      	ite	gt
 800775a:	464d      	movgt	r5, r9
 800775c:	2501      	movle	r5, #1
 800775e:	4415      	add	r5, r2
 8007760:	f04f 0800 	mov.w	r8, #0
 8007764:	4659      	mov	r1, fp
 8007766:	2201      	movs	r2, #1
 8007768:	4620      	mov	r0, r4
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f000 fc94 	bl	8008098 <__lshift>
 8007770:	4631      	mov	r1, r6
 8007772:	4683      	mov	fp, r0
 8007774:	f000 fcfc 	bl	8008170 <__mcmp>
 8007778:	2800      	cmp	r0, #0
 800777a:	dcb2      	bgt.n	80076e2 <_dtoa_r+0xac2>
 800777c:	d102      	bne.n	8007784 <_dtoa_r+0xb64>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	07db      	lsls	r3, r3, #31
 8007782:	d4ae      	bmi.n	80076e2 <_dtoa_r+0xac2>
 8007784:	462b      	mov	r3, r5
 8007786:	461d      	mov	r5, r3
 8007788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800778c:	2a30      	cmp	r2, #48	; 0x30
 800778e:	d0fa      	beq.n	8007786 <_dtoa_r+0xb66>
 8007790:	e6f7      	b.n	8007582 <_dtoa_r+0x962>
 8007792:	9a00      	ldr	r2, [sp, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d1a5      	bne.n	80076e4 <_dtoa_r+0xac4>
 8007798:	f10a 0a01 	add.w	sl, sl, #1
 800779c:	2331      	movs	r3, #49	; 0x31
 800779e:	e779      	b.n	8007694 <_dtoa_r+0xa74>
 80077a0:	4b13      	ldr	r3, [pc, #76]	; (80077f0 <_dtoa_r+0xbd0>)
 80077a2:	f7ff baaf 	b.w	8006d04 <_dtoa_r+0xe4>
 80077a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f aa86 	bne.w	8006cba <_dtoa_r+0x9a>
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <_dtoa_r+0xbd4>)
 80077b0:	f7ff baa8 	b.w	8006d04 <_dtoa_r+0xe4>
 80077b4:	f1b9 0f00 	cmp.w	r9, #0
 80077b8:	dc03      	bgt.n	80077c2 <_dtoa_r+0xba2>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f73f aec9 	bgt.w	8007554 <_dtoa_r+0x934>
 80077c2:	9d00      	ldr	r5, [sp, #0]
 80077c4:	4631      	mov	r1, r6
 80077c6:	4658      	mov	r0, fp
 80077c8:	f7ff f99e 	bl	8006b08 <quorem>
 80077cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80077d0:	f805 3b01 	strb.w	r3, [r5], #1
 80077d4:	9a00      	ldr	r2, [sp, #0]
 80077d6:	1aaa      	subs	r2, r5, r2
 80077d8:	4591      	cmp	r9, r2
 80077da:	ddba      	ble.n	8007752 <_dtoa_r+0xb32>
 80077dc:	4659      	mov	r1, fp
 80077de:	2300      	movs	r3, #0
 80077e0:	220a      	movs	r2, #10
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 faa8 	bl	8007d38 <__multadd>
 80077e8:	4683      	mov	fp, r0
 80077ea:	e7eb      	b.n	80077c4 <_dtoa_r+0xba4>
 80077ec:	08008b3b 	.word	0x08008b3b
 80077f0:	08008a94 	.word	0x08008a94
 80077f4:	08008ab8 	.word	0x08008ab8

080077f8 <__sflush_r>:
 80077f8:	898a      	ldrh	r2, [r1, #12]
 80077fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	4605      	mov	r5, r0
 8007800:	0710      	lsls	r0, r2, #28
 8007802:	460c      	mov	r4, r1
 8007804:	d458      	bmi.n	80078b8 <__sflush_r+0xc0>
 8007806:	684b      	ldr	r3, [r1, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc05      	bgt.n	8007818 <__sflush_r+0x20>
 800780c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	dc02      	bgt.n	8007818 <__sflush_r+0x20>
 8007812:	2000      	movs	r0, #0
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800781a:	2e00      	cmp	r6, #0
 800781c:	d0f9      	beq.n	8007812 <__sflush_r+0x1a>
 800781e:	2300      	movs	r3, #0
 8007820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007824:	682f      	ldr	r7, [r5, #0]
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	d032      	beq.n	8007890 <__sflush_r+0x98>
 800782a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	075a      	lsls	r2, r3, #29
 8007830:	d505      	bpl.n	800783e <__sflush_r+0x46>
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	1ac0      	subs	r0, r0, r3
 8007836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007838:	b10b      	cbz	r3, 800783e <__sflush_r+0x46>
 800783a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800783c:	1ac0      	subs	r0, r0, r3
 800783e:	2300      	movs	r3, #0
 8007840:	4602      	mov	r2, r0
 8007842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007844:	6a21      	ldr	r1, [r4, #32]
 8007846:	4628      	mov	r0, r5
 8007848:	47b0      	blx	r6
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	d106      	bne.n	800785e <__sflush_r+0x66>
 8007850:	6829      	ldr	r1, [r5, #0]
 8007852:	291d      	cmp	r1, #29
 8007854:	d82c      	bhi.n	80078b0 <__sflush_r+0xb8>
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <__sflush_r+0x108>)
 8007858:	40ca      	lsrs	r2, r1
 800785a:	07d6      	lsls	r6, r2, #31
 800785c:	d528      	bpl.n	80078b0 <__sflush_r+0xb8>
 800785e:	2200      	movs	r2, #0
 8007860:	6062      	str	r2, [r4, #4]
 8007862:	04d9      	lsls	r1, r3, #19
 8007864:	6922      	ldr	r2, [r4, #16]
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	d504      	bpl.n	8007874 <__sflush_r+0x7c>
 800786a:	1c42      	adds	r2, r0, #1
 800786c:	d101      	bne.n	8007872 <__sflush_r+0x7a>
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	b903      	cbnz	r3, 8007874 <__sflush_r+0x7c>
 8007872:	6560      	str	r0, [r4, #84]	; 0x54
 8007874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007876:	602f      	str	r7, [r5, #0]
 8007878:	2900      	cmp	r1, #0
 800787a:	d0ca      	beq.n	8007812 <__sflush_r+0x1a>
 800787c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007880:	4299      	cmp	r1, r3
 8007882:	d002      	beq.n	800788a <__sflush_r+0x92>
 8007884:	4628      	mov	r0, r5
 8007886:	f7fe fabb 	bl	8005e00 <_free_r>
 800788a:	2000      	movs	r0, #0
 800788c:	6360      	str	r0, [r4, #52]	; 0x34
 800788e:	e7c1      	b.n	8007814 <__sflush_r+0x1c>
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	2301      	movs	r3, #1
 8007894:	4628      	mov	r0, r5
 8007896:	47b0      	blx	r6
 8007898:	1c41      	adds	r1, r0, #1
 800789a:	d1c7      	bne.n	800782c <__sflush_r+0x34>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0c4      	beq.n	800782c <__sflush_r+0x34>
 80078a2:	2b1d      	cmp	r3, #29
 80078a4:	d001      	beq.n	80078aa <__sflush_r+0xb2>
 80078a6:	2b16      	cmp	r3, #22
 80078a8:	d101      	bne.n	80078ae <__sflush_r+0xb6>
 80078aa:	602f      	str	r7, [r5, #0]
 80078ac:	e7b1      	b.n	8007812 <__sflush_r+0x1a>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	e7ad      	b.n	8007814 <__sflush_r+0x1c>
 80078b8:	690f      	ldr	r7, [r1, #16]
 80078ba:	2f00      	cmp	r7, #0
 80078bc:	d0a9      	beq.n	8007812 <__sflush_r+0x1a>
 80078be:	0793      	lsls	r3, r2, #30
 80078c0:	680e      	ldr	r6, [r1, #0]
 80078c2:	bf08      	it	eq
 80078c4:	694b      	ldreq	r3, [r1, #20]
 80078c6:	600f      	str	r7, [r1, #0]
 80078c8:	bf18      	it	ne
 80078ca:	2300      	movne	r3, #0
 80078cc:	eba6 0807 	sub.w	r8, r6, r7
 80078d0:	608b      	str	r3, [r1, #8]
 80078d2:	f1b8 0f00 	cmp.w	r8, #0
 80078d6:	dd9c      	ble.n	8007812 <__sflush_r+0x1a>
 80078d8:	6a21      	ldr	r1, [r4, #32]
 80078da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078dc:	4643      	mov	r3, r8
 80078de:	463a      	mov	r2, r7
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b0      	blx	r6
 80078e4:	2800      	cmp	r0, #0
 80078e6:	dc06      	bgt.n	80078f6 <__sflush_r+0xfe>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e78e      	b.n	8007814 <__sflush_r+0x1c>
 80078f6:	4407      	add	r7, r0
 80078f8:	eba8 0800 	sub.w	r8, r8, r0
 80078fc:	e7e9      	b.n	80078d2 <__sflush_r+0xda>
 80078fe:	bf00      	nop
 8007900:	20400001 	.word	0x20400001

08007904 <_fflush_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	690b      	ldr	r3, [r1, #16]
 8007908:	4605      	mov	r5, r0
 800790a:	460c      	mov	r4, r1
 800790c:	b913      	cbnz	r3, 8007914 <_fflush_r+0x10>
 800790e:	2500      	movs	r5, #0
 8007910:	4628      	mov	r0, r5
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	b118      	cbz	r0, 800791e <_fflush_r+0x1a>
 8007916:	6983      	ldr	r3, [r0, #24]
 8007918:	b90b      	cbnz	r3, 800791e <_fflush_r+0x1a>
 800791a:	f000 f887 	bl	8007a2c <__sinit>
 800791e:	4b14      	ldr	r3, [pc, #80]	; (8007970 <_fflush_r+0x6c>)
 8007920:	429c      	cmp	r4, r3
 8007922:	d11b      	bne.n	800795c <_fflush_r+0x58>
 8007924:	686c      	ldr	r4, [r5, #4]
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0ef      	beq.n	800790e <_fflush_r+0xa>
 800792e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d404      	bmi.n	800793e <_fflush_r+0x3a>
 8007934:	0599      	lsls	r1, r3, #22
 8007936:	d402      	bmi.n	800793e <_fflush_r+0x3a>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f000 f91a 	bl	8007b72 <__retarget_lock_acquire_recursive>
 800793e:	4628      	mov	r0, r5
 8007940:	4621      	mov	r1, r4
 8007942:	f7ff ff59 	bl	80077f8 <__sflush_r>
 8007946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007948:	07da      	lsls	r2, r3, #31
 800794a:	4605      	mov	r5, r0
 800794c:	d4e0      	bmi.n	8007910 <_fflush_r+0xc>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	d4dd      	bmi.n	8007910 <_fflush_r+0xc>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f000 f90d 	bl	8007b74 <__retarget_lock_release_recursive>
 800795a:	e7d9      	b.n	8007910 <_fflush_r+0xc>
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <_fflush_r+0x70>)
 800795e:	429c      	cmp	r4, r3
 8007960:	d101      	bne.n	8007966 <_fflush_r+0x62>
 8007962:	68ac      	ldr	r4, [r5, #8]
 8007964:	e7df      	b.n	8007926 <_fflush_r+0x22>
 8007966:	4b04      	ldr	r3, [pc, #16]	; (8007978 <_fflush_r+0x74>)
 8007968:	429c      	cmp	r4, r3
 800796a:	bf08      	it	eq
 800796c:	68ec      	ldreq	r4, [r5, #12]
 800796e:	e7da      	b.n	8007926 <_fflush_r+0x22>
 8007970:	08008b6c 	.word	0x08008b6c
 8007974:	08008b8c 	.word	0x08008b8c
 8007978:	08008b4c 	.word	0x08008b4c

0800797c <std>:
 800797c:	2300      	movs	r3, #0
 800797e:	b510      	push	{r4, lr}
 8007980:	4604      	mov	r4, r0
 8007982:	e9c0 3300 	strd	r3, r3, [r0]
 8007986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798a:	6083      	str	r3, [r0, #8]
 800798c:	8181      	strh	r1, [r0, #12]
 800798e:	6643      	str	r3, [r0, #100]	; 0x64
 8007990:	81c2      	strh	r2, [r0, #14]
 8007992:	6183      	str	r3, [r0, #24]
 8007994:	4619      	mov	r1, r3
 8007996:	2208      	movs	r2, #8
 8007998:	305c      	adds	r0, #92	; 0x5c
 800799a:	f7fe fa29 	bl	8005df0 <memset>
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x38>)
 80079a0:	6263      	str	r3, [r4, #36]	; 0x24
 80079a2:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <std+0x3c>)
 80079a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <std+0x40>)
 80079a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <std+0x44>)
 80079ac:	6224      	str	r4, [r4, #32]
 80079ae:	6323      	str	r3, [r4, #48]	; 0x30
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	08008641 	.word	0x08008641
 80079b8:	08008663 	.word	0x08008663
 80079bc:	0800869b 	.word	0x0800869b
 80079c0:	080086bf 	.word	0x080086bf

080079c4 <_cleanup_r>:
 80079c4:	4901      	ldr	r1, [pc, #4]	; (80079cc <_cleanup_r+0x8>)
 80079c6:	f000 b8af 	b.w	8007b28 <_fwalk_reent>
 80079ca:	bf00      	nop
 80079cc:	08007905 	.word	0x08007905

080079d0 <__sfmoreglue>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	1e4a      	subs	r2, r1, #1
 80079d4:	2568      	movs	r5, #104	; 0x68
 80079d6:	4355      	muls	r5, r2
 80079d8:	460e      	mov	r6, r1
 80079da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079de:	f7fe fa5f 	bl	8005ea0 <_malloc_r>
 80079e2:	4604      	mov	r4, r0
 80079e4:	b140      	cbz	r0, 80079f8 <__sfmoreglue+0x28>
 80079e6:	2100      	movs	r1, #0
 80079e8:	e9c0 1600 	strd	r1, r6, [r0]
 80079ec:	300c      	adds	r0, #12
 80079ee:	60a0      	str	r0, [r4, #8]
 80079f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079f4:	f7fe f9fc 	bl	8005df0 <memset>
 80079f8:	4620      	mov	r0, r4
 80079fa:	bd70      	pop	{r4, r5, r6, pc}

080079fc <__sfp_lock_acquire>:
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <__sfp_lock_acquire+0x8>)
 80079fe:	f000 b8b8 	b.w	8007b72 <__retarget_lock_acquire_recursive>
 8007a02:	bf00      	nop
 8007a04:	20000418 	.word	0x20000418

08007a08 <__sfp_lock_release>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sfp_lock_release+0x8>)
 8007a0a:	f000 b8b3 	b.w	8007b74 <__retarget_lock_release_recursive>
 8007a0e:	bf00      	nop
 8007a10:	20000418 	.word	0x20000418

08007a14 <__sinit_lock_acquire>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sinit_lock_acquire+0x8>)
 8007a16:	f000 b8ac 	b.w	8007b72 <__retarget_lock_acquire_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	20000413 	.word	0x20000413

08007a20 <__sinit_lock_release>:
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <__sinit_lock_release+0x8>)
 8007a22:	f000 b8a7 	b.w	8007b74 <__retarget_lock_release_recursive>
 8007a26:	bf00      	nop
 8007a28:	20000413 	.word	0x20000413

08007a2c <__sinit>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	4604      	mov	r4, r0
 8007a30:	f7ff fff0 	bl	8007a14 <__sinit_lock_acquire>
 8007a34:	69a3      	ldr	r3, [r4, #24]
 8007a36:	b11b      	cbz	r3, 8007a40 <__sinit+0x14>
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3c:	f7ff bff0 	b.w	8007a20 <__sinit_lock_release>
 8007a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a44:	6523      	str	r3, [r4, #80]	; 0x50
 8007a46:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <__sinit+0x68>)
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <__sinit+0x6c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	bf04      	itt	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	61a3      	streq	r3, [r4, #24]
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f820 	bl	8007a9c <__sfp>
 8007a5c:	6060      	str	r0, [r4, #4]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 f81c 	bl	8007a9c <__sfp>
 8007a64:	60a0      	str	r0, [r4, #8]
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f818 	bl	8007a9c <__sfp>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	60e0      	str	r0, [r4, #12]
 8007a70:	2104      	movs	r1, #4
 8007a72:	6860      	ldr	r0, [r4, #4]
 8007a74:	f7ff ff82 	bl	800797c <std>
 8007a78:	68a0      	ldr	r0, [r4, #8]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	2109      	movs	r1, #9
 8007a7e:	f7ff ff7d 	bl	800797c <std>
 8007a82:	68e0      	ldr	r0, [r4, #12]
 8007a84:	2202      	movs	r2, #2
 8007a86:	2112      	movs	r1, #18
 8007a88:	f7ff ff78 	bl	800797c <std>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	61a3      	str	r3, [r4, #24]
 8007a90:	e7d2      	b.n	8007a38 <__sinit+0xc>
 8007a92:	bf00      	nop
 8007a94:	08008a80 	.word	0x08008a80
 8007a98:	080079c5 	.word	0x080079c5

08007a9c <__sfp>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	f7ff ffac 	bl	80079fc <__sfp_lock_acquire>
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <__sfp+0x84>)
 8007aa6:	681e      	ldr	r6, [r3, #0]
 8007aa8:	69b3      	ldr	r3, [r6, #24]
 8007aaa:	b913      	cbnz	r3, 8007ab2 <__sfp+0x16>
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff ffbd 	bl	8007a2c <__sinit>
 8007ab2:	3648      	adds	r6, #72	; 0x48
 8007ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	d503      	bpl.n	8007ac4 <__sfp+0x28>
 8007abc:	6833      	ldr	r3, [r6, #0]
 8007abe:	b30b      	cbz	r3, 8007b04 <__sfp+0x68>
 8007ac0:	6836      	ldr	r6, [r6, #0]
 8007ac2:	e7f7      	b.n	8007ab4 <__sfp+0x18>
 8007ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ac8:	b9d5      	cbnz	r5, 8007b00 <__sfp+0x64>
 8007aca:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <__sfp+0x88>)
 8007acc:	60e3      	str	r3, [r4, #12]
 8007ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ad4:	f000 f84c 	bl	8007b70 <__retarget_lock_init_recursive>
 8007ad8:	f7ff ff96 	bl	8007a08 <__sfp_lock_release>
 8007adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ae4:	6025      	str	r5, [r4, #0]
 8007ae6:	61a5      	str	r5, [r4, #24]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	4629      	mov	r1, r5
 8007aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007af0:	f7fe f97e 	bl	8005df0 <memset>
 8007af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007afc:	4620      	mov	r0, r4
 8007afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b00:	3468      	adds	r4, #104	; 0x68
 8007b02:	e7d9      	b.n	8007ab8 <__sfp+0x1c>
 8007b04:	2104      	movs	r1, #4
 8007b06:	4638      	mov	r0, r7
 8007b08:	f7ff ff62 	bl	80079d0 <__sfmoreglue>
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	6030      	str	r0, [r6, #0]
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1d5      	bne.n	8007ac0 <__sfp+0x24>
 8007b14:	f7ff ff78 	bl	8007a08 <__sfp_lock_release>
 8007b18:	230c      	movs	r3, #12
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	e7ee      	b.n	8007afc <__sfp+0x60>
 8007b1e:	bf00      	nop
 8007b20:	08008a80 	.word	0x08008a80
 8007b24:	ffff0001 	.word	0xffff0001

08007b28 <_fwalk_reent>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	4688      	mov	r8, r1
 8007b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b34:	2700      	movs	r7, #0
 8007b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b3e:	d505      	bpl.n	8007b4c <_fwalk_reent+0x24>
 8007b40:	6824      	ldr	r4, [r4, #0]
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d1f7      	bne.n	8007b36 <_fwalk_reent+0xe>
 8007b46:	4638      	mov	r0, r7
 8007b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d907      	bls.n	8007b62 <_fwalk_reent+0x3a>
 8007b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b56:	3301      	adds	r3, #1
 8007b58:	d003      	beq.n	8007b62 <_fwalk_reent+0x3a>
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	47c0      	blx	r8
 8007b60:	4307      	orrs	r7, r0
 8007b62:	3568      	adds	r5, #104	; 0x68
 8007b64:	e7e9      	b.n	8007b3a <_fwalk_reent+0x12>
	...

08007b68 <_localeconv_r>:
 8007b68:	4800      	ldr	r0, [pc, #0]	; (8007b6c <_localeconv_r+0x4>)
 8007b6a:	4770      	bx	lr
 8007b6c:	20000160 	.word	0x20000160

08007b70 <__retarget_lock_init_recursive>:
 8007b70:	4770      	bx	lr

08007b72 <__retarget_lock_acquire_recursive>:
 8007b72:	4770      	bx	lr

08007b74 <__retarget_lock_release_recursive>:
 8007b74:	4770      	bx	lr

08007b76 <__swhatbuf_r>:
 8007b76:	b570      	push	{r4, r5, r6, lr}
 8007b78:	460e      	mov	r6, r1
 8007b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	b096      	sub	sp, #88	; 0x58
 8007b82:	4614      	mov	r4, r2
 8007b84:	461d      	mov	r5, r3
 8007b86:	da07      	bge.n	8007b98 <__swhatbuf_r+0x22>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	89b3      	ldrh	r3, [r6, #12]
 8007b8e:	061a      	lsls	r2, r3, #24
 8007b90:	d410      	bmi.n	8007bb4 <__swhatbuf_r+0x3e>
 8007b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b96:	e00e      	b.n	8007bb6 <__swhatbuf_r+0x40>
 8007b98:	466a      	mov	r2, sp
 8007b9a:	f000 fde7 	bl	800876c <_fstat_r>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dbf2      	blt.n	8007b88 <__swhatbuf_r+0x12>
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bac:	425a      	negs	r2, r3
 8007bae:	415a      	adcs	r2, r3
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	e7ee      	b.n	8007b92 <__swhatbuf_r+0x1c>
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	b016      	add	sp, #88	; 0x58
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bc0 <__smakebuf_r>:
 8007bc0:	898b      	ldrh	r3, [r1, #12]
 8007bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc4:	079d      	lsls	r5, r3, #30
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	d507      	bpl.n	8007bdc <__smakebuf_r+0x1c>
 8007bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	6163      	str	r3, [r4, #20]
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	ab01      	add	r3, sp, #4
 8007bde:	466a      	mov	r2, sp
 8007be0:	f7ff ffc9 	bl	8007b76 <__swhatbuf_r>
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7fe f959 	bl	8005ea0 <_malloc_r>
 8007bee:	b948      	cbnz	r0, 8007c04 <__smakebuf_r+0x44>
 8007bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf4:	059a      	lsls	r2, r3, #22
 8007bf6:	d4ef      	bmi.n	8007bd8 <__smakebuf_r+0x18>
 8007bf8:	f023 0303 	bic.w	r3, r3, #3
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	e7e3      	b.n	8007bcc <__smakebuf_r+0xc>
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <__smakebuf_r+0x7c>)
 8007c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	6163      	str	r3, [r4, #20]
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	6120      	str	r0, [r4, #16]
 8007c1a:	b15b      	cbz	r3, 8007c34 <__smakebuf_r+0x74>
 8007c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 fdb5 	bl	8008790 <_isatty_r>
 8007c26:	b128      	cbz	r0, 8007c34 <__smakebuf_r+0x74>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	89a0      	ldrh	r0, [r4, #12]
 8007c36:	4305      	orrs	r5, r0
 8007c38:	81a5      	strh	r5, [r4, #12]
 8007c3a:	e7cd      	b.n	8007bd8 <__smakebuf_r+0x18>
 8007c3c:	080079c5 	.word	0x080079c5

08007c40 <memcpy>:
 8007c40:	440a      	add	r2, r1
 8007c42:	4291      	cmp	r1, r2
 8007c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c48:	d100      	bne.n	8007c4c <memcpy+0xc>
 8007c4a:	4770      	bx	lr
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c56:	4291      	cmp	r1, r2
 8007c58:	d1f9      	bne.n	8007c4e <memcpy+0xe>
 8007c5a:	bd10      	pop	{r4, pc}

08007c5c <__malloc_lock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__malloc_lock+0x8>)
 8007c5e:	f7ff bf88 	b.w	8007b72 <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	20000414 	.word	0x20000414

08007c68 <__malloc_unlock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_unlock+0x8>)
 8007c6a:	f7ff bf83 	b.w	8007b74 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20000414 	.word	0x20000414

08007c74 <_Balloc>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c78:	4604      	mov	r4, r0
 8007c7a:	460d      	mov	r5, r1
 8007c7c:	b976      	cbnz	r6, 8007c9c <_Balloc+0x28>
 8007c7e:	2010      	movs	r0, #16
 8007c80:	f7fe f8a6 	bl	8005dd0 <malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6260      	str	r0, [r4, #36]	; 0x24
 8007c88:	b920      	cbnz	r0, 8007c94 <_Balloc+0x20>
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <_Balloc+0x78>)
 8007c8c:	4818      	ldr	r0, [pc, #96]	; (8007cf0 <_Balloc+0x7c>)
 8007c8e:	2166      	movs	r1, #102	; 0x66
 8007c90:	f000 fd2c 	bl	80086ec <__assert_func>
 8007c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	60c6      	str	r6, [r0, #12]
 8007c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c9e:	68f3      	ldr	r3, [r6, #12]
 8007ca0:	b183      	cbz	r3, 8007cc4 <_Balloc+0x50>
 8007ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007caa:	b9b8      	cbnz	r0, 8007cdc <_Balloc+0x68>
 8007cac:	2101      	movs	r1, #1
 8007cae:	fa01 f605 	lsl.w	r6, r1, r5
 8007cb2:	1d72      	adds	r2, r6, #5
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fb5a 	bl	8008370 <_calloc_r>
 8007cbc:	b160      	cbz	r0, 8007cd8 <_Balloc+0x64>
 8007cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cc2:	e00e      	b.n	8007ce2 <_Balloc+0x6e>
 8007cc4:	2221      	movs	r2, #33	; 0x21
 8007cc6:	2104      	movs	r1, #4
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fb51 	bl	8008370 <_calloc_r>
 8007cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd0:	60f0      	str	r0, [r6, #12]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e4      	bne.n	8007ca2 <_Balloc+0x2e>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	6802      	ldr	r2, [r0, #0]
 8007cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ce8:	e7f7      	b.n	8007cda <_Balloc+0x66>
 8007cea:	bf00      	nop
 8007cec:	08008ac5 	.word	0x08008ac5
 8007cf0:	08008bac 	.word	0x08008bac

08007cf4 <_Bfree>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	b976      	cbnz	r6, 8007d1c <_Bfree+0x28>
 8007cfe:	2010      	movs	r0, #16
 8007d00:	f7fe f866 	bl	8005dd0 <malloc>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6268      	str	r0, [r5, #36]	; 0x24
 8007d08:	b920      	cbnz	r0, 8007d14 <_Bfree+0x20>
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <_Bfree+0x3c>)
 8007d0c:	4809      	ldr	r0, [pc, #36]	; (8007d34 <_Bfree+0x40>)
 8007d0e:	218a      	movs	r1, #138	; 0x8a
 8007d10:	f000 fcec 	bl	80086ec <__assert_func>
 8007d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d18:	6006      	str	r6, [r0, #0]
 8007d1a:	60c6      	str	r6, [r0, #12]
 8007d1c:	b13c      	cbz	r4, 8007d2e <_Bfree+0x3a>
 8007d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d28:	6021      	str	r1, [r4, #0]
 8007d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	08008ac5 	.word	0x08008ac5
 8007d34:	08008bac 	.word	0x08008bac

08007d38 <__multadd>:
 8007d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3c:	690e      	ldr	r6, [r1, #16]
 8007d3e:	4607      	mov	r7, r0
 8007d40:	4698      	mov	r8, r3
 8007d42:	460c      	mov	r4, r1
 8007d44:	f101 0014 	add.w	r0, r1, #20
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6805      	ldr	r5, [r0, #0]
 8007d4c:	b2a9      	uxth	r1, r5
 8007d4e:	fb02 8101 	mla	r1, r2, r1, r8
 8007d52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d56:	0c2d      	lsrs	r5, r5, #16
 8007d58:	fb02 c505 	mla	r5, r2, r5, ip
 8007d5c:	b289      	uxth	r1, r1
 8007d5e:	3301      	adds	r3, #1
 8007d60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d64:	429e      	cmp	r6, r3
 8007d66:	f840 1b04 	str.w	r1, [r0], #4
 8007d6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d6e:	dcec      	bgt.n	8007d4a <__multadd+0x12>
 8007d70:	f1b8 0f00 	cmp.w	r8, #0
 8007d74:	d022      	beq.n	8007dbc <__multadd+0x84>
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	42b3      	cmp	r3, r6
 8007d7a:	dc19      	bgt.n	8007db0 <__multadd+0x78>
 8007d7c:	6861      	ldr	r1, [r4, #4]
 8007d7e:	4638      	mov	r0, r7
 8007d80:	3101      	adds	r1, #1
 8007d82:	f7ff ff77 	bl	8007c74 <_Balloc>
 8007d86:	4605      	mov	r5, r0
 8007d88:	b928      	cbnz	r0, 8007d96 <__multadd+0x5e>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <__multadd+0x8c>)
 8007d8e:	480e      	ldr	r0, [pc, #56]	; (8007dc8 <__multadd+0x90>)
 8007d90:	21b5      	movs	r1, #181	; 0xb5
 8007d92:	f000 fcab 	bl	80086ec <__assert_func>
 8007d96:	6922      	ldr	r2, [r4, #16]
 8007d98:	3202      	adds	r2, #2
 8007d9a:	f104 010c 	add.w	r1, r4, #12
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	300c      	adds	r0, #12
 8007da2:	f7ff ff4d 	bl	8007c40 <memcpy>
 8007da6:	4621      	mov	r1, r4
 8007da8:	4638      	mov	r0, r7
 8007daa:	f7ff ffa3 	bl	8007cf4 <_Bfree>
 8007dae:	462c      	mov	r4, r5
 8007db0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007db4:	3601      	adds	r6, #1
 8007db6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007dba:	6126      	str	r6, [r4, #16]
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08008b3b 	.word	0x08008b3b
 8007dc8:	08008bac 	.word	0x08008bac

08007dcc <__hi0bits>:
 8007dcc:	0c03      	lsrs	r3, r0, #16
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	b9d3      	cbnz	r3, 8007e08 <__hi0bits+0x3c>
 8007dd2:	0400      	lsls	r0, r0, #16
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dda:	bf04      	itt	eq
 8007ddc:	0200      	lsleq	r0, r0, #8
 8007dde:	3308      	addeq	r3, #8
 8007de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007de4:	bf04      	itt	eq
 8007de6:	0100      	lsleq	r0, r0, #4
 8007de8:	3304      	addeq	r3, #4
 8007dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dee:	bf04      	itt	eq
 8007df0:	0080      	lsleq	r0, r0, #2
 8007df2:	3302      	addeq	r3, #2
 8007df4:	2800      	cmp	r0, #0
 8007df6:	db05      	blt.n	8007e04 <__hi0bits+0x38>
 8007df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dfc:	f103 0301 	add.w	r3, r3, #1
 8007e00:	bf08      	it	eq
 8007e02:	2320      	moveq	r3, #32
 8007e04:	4618      	mov	r0, r3
 8007e06:	4770      	bx	lr
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7e4      	b.n	8007dd6 <__hi0bits+0xa>

08007e0c <__lo0bits>:
 8007e0c:	6803      	ldr	r3, [r0, #0]
 8007e0e:	f013 0207 	ands.w	r2, r3, #7
 8007e12:	4601      	mov	r1, r0
 8007e14:	d00b      	beq.n	8007e2e <__lo0bits+0x22>
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d424      	bmi.n	8007e64 <__lo0bits+0x58>
 8007e1a:	0798      	lsls	r0, r3, #30
 8007e1c:	bf49      	itett	mi
 8007e1e:	085b      	lsrmi	r3, r3, #1
 8007e20:	089b      	lsrpl	r3, r3, #2
 8007e22:	2001      	movmi	r0, #1
 8007e24:	600b      	strmi	r3, [r1, #0]
 8007e26:	bf5c      	itt	pl
 8007e28:	600b      	strpl	r3, [r1, #0]
 8007e2a:	2002      	movpl	r0, #2
 8007e2c:	4770      	bx	lr
 8007e2e:	b298      	uxth	r0, r3
 8007e30:	b9b0      	cbnz	r0, 8007e60 <__lo0bits+0x54>
 8007e32:	0c1b      	lsrs	r3, r3, #16
 8007e34:	2010      	movs	r0, #16
 8007e36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e3a:	bf04      	itt	eq
 8007e3c:	0a1b      	lsreq	r3, r3, #8
 8007e3e:	3008      	addeq	r0, #8
 8007e40:	071a      	lsls	r2, r3, #28
 8007e42:	bf04      	itt	eq
 8007e44:	091b      	lsreq	r3, r3, #4
 8007e46:	3004      	addeq	r0, #4
 8007e48:	079a      	lsls	r2, r3, #30
 8007e4a:	bf04      	itt	eq
 8007e4c:	089b      	lsreq	r3, r3, #2
 8007e4e:	3002      	addeq	r0, #2
 8007e50:	07da      	lsls	r2, r3, #31
 8007e52:	d403      	bmi.n	8007e5c <__lo0bits+0x50>
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	f100 0001 	add.w	r0, r0, #1
 8007e5a:	d005      	beq.n	8007e68 <__lo0bits+0x5c>
 8007e5c:	600b      	str	r3, [r1, #0]
 8007e5e:	4770      	bx	lr
 8007e60:	4610      	mov	r0, r2
 8007e62:	e7e8      	b.n	8007e36 <__lo0bits+0x2a>
 8007e64:	2000      	movs	r0, #0
 8007e66:	4770      	bx	lr
 8007e68:	2020      	movs	r0, #32
 8007e6a:	4770      	bx	lr

08007e6c <__i2b>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2101      	movs	r1, #1
 8007e72:	f7ff feff 	bl	8007c74 <_Balloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	b928      	cbnz	r0, 8007e86 <__i2b+0x1a>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <__i2b+0x24>)
 8007e7c:	4805      	ldr	r0, [pc, #20]	; (8007e94 <__i2b+0x28>)
 8007e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e82:	f000 fc33 	bl	80086ec <__assert_func>
 8007e86:	2301      	movs	r3, #1
 8007e88:	6144      	str	r4, [r0, #20]
 8007e8a:	6103      	str	r3, [r0, #16]
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	08008b3b 	.word	0x08008b3b
 8007e94:	08008bac 	.word	0x08008bac

08007e98 <__multiply>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	690a      	ldr	r2, [r1, #16]
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bfb8      	it	lt
 8007ea6:	460b      	movlt	r3, r1
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	bfbc      	itt	lt
 8007eac:	4625      	movlt	r5, r4
 8007eae:	461c      	movlt	r4, r3
 8007eb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007eb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007eb8:	68ab      	ldr	r3, [r5, #8]
 8007eba:	6869      	ldr	r1, [r5, #4]
 8007ebc:	eb0a 0709 	add.w	r7, sl, r9
 8007ec0:	42bb      	cmp	r3, r7
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	bfb8      	it	lt
 8007ec6:	3101      	addlt	r1, #1
 8007ec8:	f7ff fed4 	bl	8007c74 <_Balloc>
 8007ecc:	b930      	cbnz	r0, 8007edc <__multiply+0x44>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b42      	ldr	r3, [pc, #264]	; (8007fdc <__multiply+0x144>)
 8007ed2:	4843      	ldr	r0, [pc, #268]	; (8007fe0 <__multiply+0x148>)
 8007ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8007ed8:	f000 fc08 	bl	80086ec <__assert_func>
 8007edc:	f100 0614 	add.w	r6, r0, #20
 8007ee0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ee4:	4633      	mov	r3, r6
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4543      	cmp	r3, r8
 8007eea:	d31e      	bcc.n	8007f2a <__multiply+0x92>
 8007eec:	f105 0c14 	add.w	ip, r5, #20
 8007ef0:	f104 0314 	add.w	r3, r4, #20
 8007ef4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007ef8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007efc:	9202      	str	r2, [sp, #8]
 8007efe:	ebac 0205 	sub.w	r2, ip, r5
 8007f02:	3a15      	subs	r2, #21
 8007f04:	f022 0203 	bic.w	r2, r2, #3
 8007f08:	3204      	adds	r2, #4
 8007f0a:	f105 0115 	add.w	r1, r5, #21
 8007f0e:	458c      	cmp	ip, r1
 8007f10:	bf38      	it	cc
 8007f12:	2204      	movcc	r2, #4
 8007f14:	9201      	str	r2, [sp, #4]
 8007f16:	9a02      	ldr	r2, [sp, #8]
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d808      	bhi.n	8007f30 <__multiply+0x98>
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	dc55      	bgt.n	8007fce <__multiply+0x136>
 8007f22:	6107      	str	r7, [r0, #16]
 8007f24:	b005      	add	sp, #20
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	f843 2b04 	str.w	r2, [r3], #4
 8007f2e:	e7db      	b.n	8007ee8 <__multiply+0x50>
 8007f30:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f34:	f1ba 0f00 	cmp.w	sl, #0
 8007f38:	d020      	beq.n	8007f7c <__multiply+0xe4>
 8007f3a:	f105 0e14 	add.w	lr, r5, #20
 8007f3e:	46b1      	mov	r9, r6
 8007f40:	2200      	movs	r2, #0
 8007f42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f46:	f8d9 b000 	ldr.w	fp, [r9]
 8007f4a:	b2a1      	uxth	r1, r4
 8007f4c:	fa1f fb8b 	uxth.w	fp, fp
 8007f50:	fb0a b101 	mla	r1, sl, r1, fp
 8007f54:	4411      	add	r1, r2
 8007f56:	f8d9 2000 	ldr.w	r2, [r9]
 8007f5a:	0c24      	lsrs	r4, r4, #16
 8007f5c:	0c12      	lsrs	r2, r2, #16
 8007f5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007f62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007f66:	b289      	uxth	r1, r1
 8007f68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f6c:	45f4      	cmp	ip, lr
 8007f6e:	f849 1b04 	str.w	r1, [r9], #4
 8007f72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007f76:	d8e4      	bhi.n	8007f42 <__multiply+0xaa>
 8007f78:	9901      	ldr	r1, [sp, #4]
 8007f7a:	5072      	str	r2, [r6, r1]
 8007f7c:	9a03      	ldr	r2, [sp, #12]
 8007f7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f82:	3304      	adds	r3, #4
 8007f84:	f1b9 0f00 	cmp.w	r9, #0
 8007f88:	d01f      	beq.n	8007fca <__multiply+0x132>
 8007f8a:	6834      	ldr	r4, [r6, #0]
 8007f8c:	f105 0114 	add.w	r1, r5, #20
 8007f90:	46b6      	mov	lr, r6
 8007f92:	f04f 0a00 	mov.w	sl, #0
 8007f96:	880a      	ldrh	r2, [r1, #0]
 8007f98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f9c:	fb09 b202 	mla	r2, r9, r2, fp
 8007fa0:	4492      	add	sl, r2
 8007fa2:	b2a4      	uxth	r4, r4
 8007fa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007fa8:	f84e 4b04 	str.w	r4, [lr], #4
 8007fac:	f851 4b04 	ldr.w	r4, [r1], #4
 8007fb0:	f8be 2000 	ldrh.w	r2, [lr]
 8007fb4:	0c24      	lsrs	r4, r4, #16
 8007fb6:	fb09 2404 	mla	r4, r9, r4, r2
 8007fba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007fbe:	458c      	cmp	ip, r1
 8007fc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007fc4:	d8e7      	bhi.n	8007f96 <__multiply+0xfe>
 8007fc6:	9a01      	ldr	r2, [sp, #4]
 8007fc8:	50b4      	str	r4, [r6, r2]
 8007fca:	3604      	adds	r6, #4
 8007fcc:	e7a3      	b.n	8007f16 <__multiply+0x7e>
 8007fce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1a5      	bne.n	8007f22 <__multiply+0x8a>
 8007fd6:	3f01      	subs	r7, #1
 8007fd8:	e7a1      	b.n	8007f1e <__multiply+0x86>
 8007fda:	bf00      	nop
 8007fdc:	08008b3b 	.word	0x08008b3b
 8007fe0:	08008bac 	.word	0x08008bac

08007fe4 <__pow5mult>:
 8007fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	4615      	mov	r5, r2
 8007fea:	f012 0203 	ands.w	r2, r2, #3
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	d007      	beq.n	8008004 <__pow5mult+0x20>
 8007ff4:	4c25      	ldr	r4, [pc, #148]	; (800808c <__pow5mult+0xa8>)
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffe:	f7ff fe9b 	bl	8007d38 <__multadd>
 8008002:	4607      	mov	r7, r0
 8008004:	10ad      	asrs	r5, r5, #2
 8008006:	d03d      	beq.n	8008084 <__pow5mult+0xa0>
 8008008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800800a:	b97c      	cbnz	r4, 800802c <__pow5mult+0x48>
 800800c:	2010      	movs	r0, #16
 800800e:	f7fd fedf 	bl	8005dd0 <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	6270      	str	r0, [r6, #36]	; 0x24
 8008016:	b928      	cbnz	r0, 8008024 <__pow5mult+0x40>
 8008018:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <__pow5mult+0xac>)
 800801a:	481e      	ldr	r0, [pc, #120]	; (8008094 <__pow5mult+0xb0>)
 800801c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008020:	f000 fb64 	bl	80086ec <__assert_func>
 8008024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008028:	6004      	str	r4, [r0, #0]
 800802a:	60c4      	str	r4, [r0, #12]
 800802c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008034:	b94c      	cbnz	r4, 800804a <__pow5mult+0x66>
 8008036:	f240 2171 	movw	r1, #625	; 0x271
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff16 	bl	8007e6c <__i2b>
 8008040:	2300      	movs	r3, #0
 8008042:	f8c8 0008 	str.w	r0, [r8, #8]
 8008046:	4604      	mov	r4, r0
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	f04f 0900 	mov.w	r9, #0
 800804e:	07eb      	lsls	r3, r5, #31
 8008050:	d50a      	bpl.n	8008068 <__pow5mult+0x84>
 8008052:	4639      	mov	r1, r7
 8008054:	4622      	mov	r2, r4
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff ff1e 	bl	8007e98 <__multiply>
 800805c:	4639      	mov	r1, r7
 800805e:	4680      	mov	r8, r0
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff fe47 	bl	8007cf4 <_Bfree>
 8008066:	4647      	mov	r7, r8
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	d00b      	beq.n	8008084 <__pow5mult+0xa0>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	b938      	cbnz	r0, 8008080 <__pow5mult+0x9c>
 8008070:	4622      	mov	r2, r4
 8008072:	4621      	mov	r1, r4
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff ff0f 	bl	8007e98 <__multiply>
 800807a:	6020      	str	r0, [r4, #0]
 800807c:	f8c0 9000 	str.w	r9, [r0]
 8008080:	4604      	mov	r4, r0
 8008082:	e7e4      	b.n	800804e <__pow5mult+0x6a>
 8008084:	4638      	mov	r0, r7
 8008086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808a:	bf00      	nop
 800808c:	08008d00 	.word	0x08008d00
 8008090:	08008ac5 	.word	0x08008ac5
 8008094:	08008bac 	.word	0x08008bac

08008098 <__lshift>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	6849      	ldr	r1, [r1, #4]
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	4607      	mov	r7, r0
 80080aa:	4691      	mov	r9, r2
 80080ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b0:	f108 0601 	add.w	r6, r8, #1
 80080b4:	42b3      	cmp	r3, r6
 80080b6:	db0b      	blt.n	80080d0 <__lshift+0x38>
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fddb 	bl	8007c74 <_Balloc>
 80080be:	4605      	mov	r5, r0
 80080c0:	b948      	cbnz	r0, 80080d6 <__lshift+0x3e>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b28      	ldr	r3, [pc, #160]	; (8008168 <__lshift+0xd0>)
 80080c6:	4829      	ldr	r0, [pc, #164]	; (800816c <__lshift+0xd4>)
 80080c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080cc:	f000 fb0e 	bl	80086ec <__assert_func>
 80080d0:	3101      	adds	r1, #1
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	e7ee      	b.n	80080b4 <__lshift+0x1c>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f100 0114 	add.w	r1, r0, #20
 80080dc:	f100 0210 	add.w	r2, r0, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	4553      	cmp	r3, sl
 80080e4:	db33      	blt.n	800814e <__lshift+0xb6>
 80080e6:	6920      	ldr	r0, [r4, #16]
 80080e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ec:	f104 0314 	add.w	r3, r4, #20
 80080f0:	f019 091f 	ands.w	r9, r9, #31
 80080f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080fc:	d02b      	beq.n	8008156 <__lshift+0xbe>
 80080fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008102:	468a      	mov	sl, r1
 8008104:	2200      	movs	r2, #0
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	fa00 f009 	lsl.w	r0, r0, r9
 800810c:	4302      	orrs	r2, r0
 800810e:	f84a 2b04 	str.w	r2, [sl], #4
 8008112:	f853 2b04 	ldr.w	r2, [r3], #4
 8008116:	459c      	cmp	ip, r3
 8008118:	fa22 f20e 	lsr.w	r2, r2, lr
 800811c:	d8f3      	bhi.n	8008106 <__lshift+0x6e>
 800811e:	ebac 0304 	sub.w	r3, ip, r4
 8008122:	3b15      	subs	r3, #21
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	3304      	adds	r3, #4
 800812a:	f104 0015 	add.w	r0, r4, #21
 800812e:	4584      	cmp	ip, r0
 8008130:	bf38      	it	cc
 8008132:	2304      	movcc	r3, #4
 8008134:	50ca      	str	r2, [r1, r3]
 8008136:	b10a      	cbz	r2, 800813c <__lshift+0xa4>
 8008138:	f108 0602 	add.w	r6, r8, #2
 800813c:	3e01      	subs	r6, #1
 800813e:	4638      	mov	r0, r7
 8008140:	612e      	str	r6, [r5, #16]
 8008142:	4621      	mov	r1, r4
 8008144:	f7ff fdd6 	bl	8007cf4 <_Bfree>
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008152:	3301      	adds	r3, #1
 8008154:	e7c5      	b.n	80080e2 <__lshift+0x4a>
 8008156:	3904      	subs	r1, #4
 8008158:	f853 2b04 	ldr.w	r2, [r3], #4
 800815c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008160:	459c      	cmp	ip, r3
 8008162:	d8f9      	bhi.n	8008158 <__lshift+0xc0>
 8008164:	e7ea      	b.n	800813c <__lshift+0xa4>
 8008166:	bf00      	nop
 8008168:	08008b3b 	.word	0x08008b3b
 800816c:	08008bac 	.word	0x08008bac

08008170 <__mcmp>:
 8008170:	b530      	push	{r4, r5, lr}
 8008172:	6902      	ldr	r2, [r0, #16]
 8008174:	690c      	ldr	r4, [r1, #16]
 8008176:	1b12      	subs	r2, r2, r4
 8008178:	d10e      	bne.n	8008198 <__mcmp+0x28>
 800817a:	f100 0314 	add.w	r3, r0, #20
 800817e:	3114      	adds	r1, #20
 8008180:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008184:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008188:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800818c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008190:	42a5      	cmp	r5, r4
 8008192:	d003      	beq.n	800819c <__mcmp+0x2c>
 8008194:	d305      	bcc.n	80081a2 <__mcmp+0x32>
 8008196:	2201      	movs	r2, #1
 8008198:	4610      	mov	r0, r2
 800819a:	bd30      	pop	{r4, r5, pc}
 800819c:	4283      	cmp	r3, r0
 800819e:	d3f3      	bcc.n	8008188 <__mcmp+0x18>
 80081a0:	e7fa      	b.n	8008198 <__mcmp+0x28>
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	e7f7      	b.n	8008198 <__mcmp+0x28>

080081a8 <__mdiff>:
 80081a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	460c      	mov	r4, r1
 80081ae:	4606      	mov	r6, r0
 80081b0:	4611      	mov	r1, r2
 80081b2:	4620      	mov	r0, r4
 80081b4:	4617      	mov	r7, r2
 80081b6:	f7ff ffdb 	bl	8008170 <__mcmp>
 80081ba:	1e05      	subs	r5, r0, #0
 80081bc:	d110      	bne.n	80081e0 <__mdiff+0x38>
 80081be:	4629      	mov	r1, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff fd57 	bl	8007c74 <_Balloc>
 80081c6:	b930      	cbnz	r0, 80081d6 <__mdiff+0x2e>
 80081c8:	4b39      	ldr	r3, [pc, #228]	; (80082b0 <__mdiff+0x108>)
 80081ca:	4602      	mov	r2, r0
 80081cc:	f240 2132 	movw	r1, #562	; 0x232
 80081d0:	4838      	ldr	r0, [pc, #224]	; (80082b4 <__mdiff+0x10c>)
 80081d2:	f000 fa8b 	bl	80086ec <__assert_func>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	bfa4      	itt	ge
 80081e2:	463b      	movge	r3, r7
 80081e4:	4627      	movge	r7, r4
 80081e6:	4630      	mov	r0, r6
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	bfa6      	itte	ge
 80081ec:	461c      	movge	r4, r3
 80081ee:	2500      	movge	r5, #0
 80081f0:	2501      	movlt	r5, #1
 80081f2:	f7ff fd3f 	bl	8007c74 <_Balloc>
 80081f6:	b920      	cbnz	r0, 8008202 <__mdiff+0x5a>
 80081f8:	4b2d      	ldr	r3, [pc, #180]	; (80082b0 <__mdiff+0x108>)
 80081fa:	4602      	mov	r2, r0
 80081fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008200:	e7e6      	b.n	80081d0 <__mdiff+0x28>
 8008202:	693e      	ldr	r6, [r7, #16]
 8008204:	60c5      	str	r5, [r0, #12]
 8008206:	6925      	ldr	r5, [r4, #16]
 8008208:	f107 0114 	add.w	r1, r7, #20
 800820c:	f104 0914 	add.w	r9, r4, #20
 8008210:	f100 0e14 	add.w	lr, r0, #20
 8008214:	f107 0210 	add.w	r2, r7, #16
 8008218:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800821c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008220:	46f2      	mov	sl, lr
 8008222:	2700      	movs	r7, #0
 8008224:	f859 3b04 	ldr.w	r3, [r9], #4
 8008228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800822c:	fa1f f883 	uxth.w	r8, r3
 8008230:	fa17 f78b 	uxtah	r7, r7, fp
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	eba7 0808 	sub.w	r8, r7, r8
 800823a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800823e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008242:	fa1f f888 	uxth.w	r8, r8
 8008246:	141f      	asrs	r7, r3, #16
 8008248:	454d      	cmp	r5, r9
 800824a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800824e:	f84a 3b04 	str.w	r3, [sl], #4
 8008252:	d8e7      	bhi.n	8008224 <__mdiff+0x7c>
 8008254:	1b2b      	subs	r3, r5, r4
 8008256:	3b15      	subs	r3, #21
 8008258:	f023 0303 	bic.w	r3, r3, #3
 800825c:	3304      	adds	r3, #4
 800825e:	3415      	adds	r4, #21
 8008260:	42a5      	cmp	r5, r4
 8008262:	bf38      	it	cc
 8008264:	2304      	movcc	r3, #4
 8008266:	4419      	add	r1, r3
 8008268:	4473      	add	r3, lr
 800826a:	469e      	mov	lr, r3
 800826c:	460d      	mov	r5, r1
 800826e:	4565      	cmp	r5, ip
 8008270:	d30e      	bcc.n	8008290 <__mdiff+0xe8>
 8008272:	f10c 0203 	add.w	r2, ip, #3
 8008276:	1a52      	subs	r2, r2, r1
 8008278:	f022 0203 	bic.w	r2, r2, #3
 800827c:	3903      	subs	r1, #3
 800827e:	458c      	cmp	ip, r1
 8008280:	bf38      	it	cc
 8008282:	2200      	movcc	r2, #0
 8008284:	441a      	add	r2, r3
 8008286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800828a:	b17b      	cbz	r3, 80082ac <__mdiff+0x104>
 800828c:	6106      	str	r6, [r0, #16]
 800828e:	e7a5      	b.n	80081dc <__mdiff+0x34>
 8008290:	f855 8b04 	ldr.w	r8, [r5], #4
 8008294:	fa17 f488 	uxtah	r4, r7, r8
 8008298:	1422      	asrs	r2, r4, #16
 800829a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800829e:	b2a4      	uxth	r4, r4
 80082a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082a4:	f84e 4b04 	str.w	r4, [lr], #4
 80082a8:	1417      	asrs	r7, r2, #16
 80082aa:	e7e0      	b.n	800826e <__mdiff+0xc6>
 80082ac:	3e01      	subs	r6, #1
 80082ae:	e7ea      	b.n	8008286 <__mdiff+0xde>
 80082b0:	08008b3b 	.word	0x08008b3b
 80082b4:	08008bac 	.word	0x08008bac

080082b8 <__d2b>:
 80082b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4689      	mov	r9, r1
 80082be:	2101      	movs	r1, #1
 80082c0:	ec57 6b10 	vmov	r6, r7, d0
 80082c4:	4690      	mov	r8, r2
 80082c6:	f7ff fcd5 	bl	8007c74 <_Balloc>
 80082ca:	4604      	mov	r4, r0
 80082cc:	b930      	cbnz	r0, 80082dc <__d2b+0x24>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <__d2b+0xb0>)
 80082d2:	4826      	ldr	r0, [pc, #152]	; (800836c <__d2b+0xb4>)
 80082d4:	f240 310a 	movw	r1, #778	; 0x30a
 80082d8:	f000 fa08 	bl	80086ec <__assert_func>
 80082dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082e4:	bb35      	cbnz	r5, 8008334 <__d2b+0x7c>
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	d028      	beq.n	800833e <__d2b+0x86>
 80082ec:	4668      	mov	r0, sp
 80082ee:	9600      	str	r6, [sp, #0]
 80082f0:	f7ff fd8c 	bl	8007e0c <__lo0bits>
 80082f4:	9900      	ldr	r1, [sp, #0]
 80082f6:	b300      	cbz	r0, 800833a <__d2b+0x82>
 80082f8:	9a01      	ldr	r2, [sp, #4]
 80082fa:	f1c0 0320 	rsb	r3, r0, #32
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	430b      	orrs	r3, r1
 8008304:	40c2      	lsrs	r2, r0
 8008306:	6163      	str	r3, [r4, #20]
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	61a3      	str	r3, [r4, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bf14      	ite	ne
 8008312:	2202      	movne	r2, #2
 8008314:	2201      	moveq	r2, #1
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	b1d5      	cbz	r5, 8008350 <__d2b+0x98>
 800831a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800831e:	4405      	add	r5, r0
 8008320:	f8c9 5000 	str.w	r5, [r9]
 8008324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008328:	f8c8 0000 	str.w	r0, [r8]
 800832c:	4620      	mov	r0, r4
 800832e:	b003      	add	sp, #12
 8008330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008338:	e7d5      	b.n	80082e6 <__d2b+0x2e>
 800833a:	6161      	str	r1, [r4, #20]
 800833c:	e7e5      	b.n	800830a <__d2b+0x52>
 800833e:	a801      	add	r0, sp, #4
 8008340:	f7ff fd64 	bl	8007e0c <__lo0bits>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	6163      	str	r3, [r4, #20]
 8008348:	2201      	movs	r2, #1
 800834a:	6122      	str	r2, [r4, #16]
 800834c:	3020      	adds	r0, #32
 800834e:	e7e3      	b.n	8008318 <__d2b+0x60>
 8008350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008358:	f8c9 0000 	str.w	r0, [r9]
 800835c:	6918      	ldr	r0, [r3, #16]
 800835e:	f7ff fd35 	bl	8007dcc <__hi0bits>
 8008362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008366:	e7df      	b.n	8008328 <__d2b+0x70>
 8008368:	08008b3b 	.word	0x08008b3b
 800836c:	08008bac 	.word	0x08008bac

08008370 <_calloc_r>:
 8008370:	b513      	push	{r0, r1, r4, lr}
 8008372:	434a      	muls	r2, r1
 8008374:	4611      	mov	r1, r2
 8008376:	9201      	str	r2, [sp, #4]
 8008378:	f7fd fd92 	bl	8005ea0 <_malloc_r>
 800837c:	4604      	mov	r4, r0
 800837e:	b118      	cbz	r0, 8008388 <_calloc_r+0x18>
 8008380:	9a01      	ldr	r2, [sp, #4]
 8008382:	2100      	movs	r1, #0
 8008384:	f7fd fd34 	bl	8005df0 <memset>
 8008388:	4620      	mov	r0, r4
 800838a:	b002      	add	sp, #8
 800838c:	bd10      	pop	{r4, pc}

0800838e <__sfputc_r>:
 800838e:	6893      	ldr	r3, [r2, #8]
 8008390:	3b01      	subs	r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	b410      	push	{r4}
 8008396:	6093      	str	r3, [r2, #8]
 8008398:	da08      	bge.n	80083ac <__sfputc_r+0x1e>
 800839a:	6994      	ldr	r4, [r2, #24]
 800839c:	42a3      	cmp	r3, r4
 800839e:	db01      	blt.n	80083a4 <__sfputc_r+0x16>
 80083a0:	290a      	cmp	r1, #10
 80083a2:	d103      	bne.n	80083ac <__sfputc_r+0x1e>
 80083a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a8:	f7fe baee 	b.w	8006988 <__swbuf_r>
 80083ac:	6813      	ldr	r3, [r2, #0]
 80083ae:	1c58      	adds	r0, r3, #1
 80083b0:	6010      	str	r0, [r2, #0]
 80083b2:	7019      	strb	r1, [r3, #0]
 80083b4:	4608      	mov	r0, r1
 80083b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <__sfputs_r>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	4614      	mov	r4, r2
 80083c4:	18d5      	adds	r5, r2, r3
 80083c6:	42ac      	cmp	r4, r5
 80083c8:	d101      	bne.n	80083ce <__sfputs_r+0x12>
 80083ca:	2000      	movs	r0, #0
 80083cc:	e007      	b.n	80083de <__sfputs_r+0x22>
 80083ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d2:	463a      	mov	r2, r7
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff ffda 	bl	800838e <__sfputc_r>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	d1f3      	bne.n	80083c6 <__sfputs_r+0xa>
 80083de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083e0 <_vfiprintf_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	460d      	mov	r5, r1
 80083e6:	b09d      	sub	sp, #116	; 0x74
 80083e8:	4614      	mov	r4, r2
 80083ea:	4698      	mov	r8, r3
 80083ec:	4606      	mov	r6, r0
 80083ee:	b118      	cbz	r0, 80083f8 <_vfiprintf_r+0x18>
 80083f0:	6983      	ldr	r3, [r0, #24]
 80083f2:	b90b      	cbnz	r3, 80083f8 <_vfiprintf_r+0x18>
 80083f4:	f7ff fb1a 	bl	8007a2c <__sinit>
 80083f8:	4b89      	ldr	r3, [pc, #548]	; (8008620 <_vfiprintf_r+0x240>)
 80083fa:	429d      	cmp	r5, r3
 80083fc:	d11b      	bne.n	8008436 <_vfiprintf_r+0x56>
 80083fe:	6875      	ldr	r5, [r6, #4]
 8008400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	d405      	bmi.n	8008412 <_vfiprintf_r+0x32>
 8008406:	89ab      	ldrh	r3, [r5, #12]
 8008408:	059a      	lsls	r2, r3, #22
 800840a:	d402      	bmi.n	8008412 <_vfiprintf_r+0x32>
 800840c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800840e:	f7ff fbb0 	bl	8007b72 <__retarget_lock_acquire_recursive>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	071b      	lsls	r3, r3, #28
 8008416:	d501      	bpl.n	800841c <_vfiprintf_r+0x3c>
 8008418:	692b      	ldr	r3, [r5, #16]
 800841a:	b9eb      	cbnz	r3, 8008458 <_vfiprintf_r+0x78>
 800841c:	4629      	mov	r1, r5
 800841e:	4630      	mov	r0, r6
 8008420:	f7fe fb04 	bl	8006a2c <__swsetup_r>
 8008424:	b1c0      	cbz	r0, 8008458 <_vfiprintf_r+0x78>
 8008426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008428:	07dc      	lsls	r4, r3, #31
 800842a:	d50e      	bpl.n	800844a <_vfiprintf_r+0x6a>
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	b01d      	add	sp, #116	; 0x74
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	4b7b      	ldr	r3, [pc, #492]	; (8008624 <_vfiprintf_r+0x244>)
 8008438:	429d      	cmp	r5, r3
 800843a:	d101      	bne.n	8008440 <_vfiprintf_r+0x60>
 800843c:	68b5      	ldr	r5, [r6, #8]
 800843e:	e7df      	b.n	8008400 <_vfiprintf_r+0x20>
 8008440:	4b79      	ldr	r3, [pc, #484]	; (8008628 <_vfiprintf_r+0x248>)
 8008442:	429d      	cmp	r5, r3
 8008444:	bf08      	it	eq
 8008446:	68f5      	ldreq	r5, [r6, #12]
 8008448:	e7da      	b.n	8008400 <_vfiprintf_r+0x20>
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	0598      	lsls	r0, r3, #22
 800844e:	d4ed      	bmi.n	800842c <_vfiprintf_r+0x4c>
 8008450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008452:	f7ff fb8f 	bl	8007b74 <__retarget_lock_release_recursive>
 8008456:	e7e9      	b.n	800842c <_vfiprintf_r+0x4c>
 8008458:	2300      	movs	r3, #0
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	2320      	movs	r3, #32
 800845e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008462:	f8cd 800c 	str.w	r8, [sp, #12]
 8008466:	2330      	movs	r3, #48	; 0x30
 8008468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800862c <_vfiprintf_r+0x24c>
 800846c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008470:	f04f 0901 	mov.w	r9, #1
 8008474:	4623      	mov	r3, r4
 8008476:	469a      	mov	sl, r3
 8008478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847c:	b10a      	cbz	r2, 8008482 <_vfiprintf_r+0xa2>
 800847e:	2a25      	cmp	r2, #37	; 0x25
 8008480:	d1f9      	bne.n	8008476 <_vfiprintf_r+0x96>
 8008482:	ebba 0b04 	subs.w	fp, sl, r4
 8008486:	d00b      	beq.n	80084a0 <_vfiprintf_r+0xc0>
 8008488:	465b      	mov	r3, fp
 800848a:	4622      	mov	r2, r4
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ff94 	bl	80083bc <__sfputs_r>
 8008494:	3001      	adds	r0, #1
 8008496:	f000 80aa 	beq.w	80085ee <_vfiprintf_r+0x20e>
 800849a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849c:	445a      	add	r2, fp
 800849e:	9209      	str	r2, [sp, #36]	; 0x24
 80084a0:	f89a 3000 	ldrb.w	r3, [sl]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a2 	beq.w	80085ee <_vfiprintf_r+0x20e>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b4:	f10a 0a01 	add.w	sl, sl, #1
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c0:	931a      	str	r3, [sp, #104]	; 0x68
 80084c2:	4654      	mov	r4, sl
 80084c4:	2205      	movs	r2, #5
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	4858      	ldr	r0, [pc, #352]	; (800862c <_vfiprintf_r+0x24c>)
 80084cc:	f7f7 fe88 	bl	80001e0 <memchr>
 80084d0:	9a04      	ldr	r2, [sp, #16]
 80084d2:	b9d8      	cbnz	r0, 800850c <_vfiprintf_r+0x12c>
 80084d4:	06d1      	lsls	r1, r2, #27
 80084d6:	bf44      	itt	mi
 80084d8:	2320      	movmi	r3, #32
 80084da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084de:	0713      	lsls	r3, r2, #28
 80084e0:	bf44      	itt	mi
 80084e2:	232b      	movmi	r3, #43	; 0x2b
 80084e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e8:	f89a 3000 	ldrb.w	r3, [sl]
 80084ec:	2b2a      	cmp	r3, #42	; 0x2a
 80084ee:	d015      	beq.n	800851c <_vfiprintf_r+0x13c>
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	4654      	mov	r4, sl
 80084f4:	2000      	movs	r0, #0
 80084f6:	f04f 0c0a 	mov.w	ip, #10
 80084fa:	4621      	mov	r1, r4
 80084fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008500:	3b30      	subs	r3, #48	; 0x30
 8008502:	2b09      	cmp	r3, #9
 8008504:	d94e      	bls.n	80085a4 <_vfiprintf_r+0x1c4>
 8008506:	b1b0      	cbz	r0, 8008536 <_vfiprintf_r+0x156>
 8008508:	9207      	str	r2, [sp, #28]
 800850a:	e014      	b.n	8008536 <_vfiprintf_r+0x156>
 800850c:	eba0 0308 	sub.w	r3, r0, r8
 8008510:	fa09 f303 	lsl.w	r3, r9, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	46a2      	mov	sl, r4
 800851a:	e7d2      	b.n	80084c2 <_vfiprintf_r+0xe2>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d19      	adds	r1, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9103      	str	r1, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfbb      	ittet	lt
 8008528:	425b      	neglt	r3, r3
 800852a:	f042 0202 	orrlt.w	r2, r2, #2
 800852e:	9307      	strge	r3, [sp, #28]
 8008530:	9307      	strlt	r3, [sp, #28]
 8008532:	bfb8      	it	lt
 8008534:	9204      	strlt	r2, [sp, #16]
 8008536:	7823      	ldrb	r3, [r4, #0]
 8008538:	2b2e      	cmp	r3, #46	; 0x2e
 800853a:	d10c      	bne.n	8008556 <_vfiprintf_r+0x176>
 800853c:	7863      	ldrb	r3, [r4, #1]
 800853e:	2b2a      	cmp	r3, #42	; 0x2a
 8008540:	d135      	bne.n	80085ae <_vfiprintf_r+0x1ce>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	1d1a      	adds	r2, r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	9203      	str	r2, [sp, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfb8      	it	lt
 800854e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008552:	3402      	adds	r4, #2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800863c <_vfiprintf_r+0x25c>
 800855a:	7821      	ldrb	r1, [r4, #0]
 800855c:	2203      	movs	r2, #3
 800855e:	4650      	mov	r0, sl
 8008560:	f7f7 fe3e 	bl	80001e0 <memchr>
 8008564:	b140      	cbz	r0, 8008578 <_vfiprintf_r+0x198>
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	eba0 000a 	sub.w	r0, r0, sl
 800856c:	fa03 f000 	lsl.w	r0, r3, r0
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	4303      	orrs	r3, r0
 8008574:	3401      	adds	r4, #1
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	482c      	ldr	r0, [pc, #176]	; (8008630 <_vfiprintf_r+0x250>)
 800857e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008582:	2206      	movs	r2, #6
 8008584:	f7f7 fe2c 	bl	80001e0 <memchr>
 8008588:	2800      	cmp	r0, #0
 800858a:	d03f      	beq.n	800860c <_vfiprintf_r+0x22c>
 800858c:	4b29      	ldr	r3, [pc, #164]	; (8008634 <_vfiprintf_r+0x254>)
 800858e:	bb1b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x1f8>
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	3307      	adds	r3, #7
 8008594:	f023 0307 	bic.w	r3, r3, #7
 8008598:	3308      	adds	r3, #8
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859e:	443b      	add	r3, r7
 80085a0:	9309      	str	r3, [sp, #36]	; 0x24
 80085a2:	e767      	b.n	8008474 <_vfiprintf_r+0x94>
 80085a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a8:	460c      	mov	r4, r1
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7a5      	b.n	80084fa <_vfiprintf_r+0x11a>
 80085ae:	2300      	movs	r3, #0
 80085b0:	3401      	adds	r4, #1
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f04f 0c0a 	mov.w	ip, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c0:	3a30      	subs	r2, #48	; 0x30
 80085c2:	2a09      	cmp	r2, #9
 80085c4:	d903      	bls.n	80085ce <_vfiprintf_r+0x1ee>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0c5      	beq.n	8008556 <_vfiprintf_r+0x176>
 80085ca:	9105      	str	r1, [sp, #20]
 80085cc:	e7c3      	b.n	8008556 <_vfiprintf_r+0x176>
 80085ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d2:	4604      	mov	r4, r0
 80085d4:	2301      	movs	r3, #1
 80085d6:	e7f0      	b.n	80085ba <_vfiprintf_r+0x1da>
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	462a      	mov	r2, r5
 80085de:	4b16      	ldr	r3, [pc, #88]	; (8008638 <_vfiprintf_r+0x258>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7fd fd56 	bl	8006094 <_printf_float>
 80085e8:	4607      	mov	r7, r0
 80085ea:	1c78      	adds	r0, r7, #1
 80085ec:	d1d6      	bne.n	800859c <_vfiprintf_r+0x1bc>
 80085ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f0:	07d9      	lsls	r1, r3, #31
 80085f2:	d405      	bmi.n	8008600 <_vfiprintf_r+0x220>
 80085f4:	89ab      	ldrh	r3, [r5, #12]
 80085f6:	059a      	lsls	r2, r3, #22
 80085f8:	d402      	bmi.n	8008600 <_vfiprintf_r+0x220>
 80085fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fc:	f7ff faba 	bl	8007b74 <__retarget_lock_release_recursive>
 8008600:	89ab      	ldrh	r3, [r5, #12]
 8008602:	065b      	lsls	r3, r3, #25
 8008604:	f53f af12 	bmi.w	800842c <_vfiprintf_r+0x4c>
 8008608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860a:	e711      	b.n	8008430 <_vfiprintf_r+0x50>
 800860c:	ab03      	add	r3, sp, #12
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	462a      	mov	r2, r5
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <_vfiprintf_r+0x258>)
 8008614:	a904      	add	r1, sp, #16
 8008616:	4630      	mov	r0, r6
 8008618:	f7fd ffe0 	bl	80065dc <_printf_i>
 800861c:	e7e4      	b.n	80085e8 <_vfiprintf_r+0x208>
 800861e:	bf00      	nop
 8008620:	08008b6c 	.word	0x08008b6c
 8008624:	08008b8c 	.word	0x08008b8c
 8008628:	08008b4c 	.word	0x08008b4c
 800862c:	08008d0c 	.word	0x08008d0c
 8008630:	08008d16 	.word	0x08008d16
 8008634:	08006095 	.word	0x08006095
 8008638:	080083bd 	.word	0x080083bd
 800863c:	08008d12 	.word	0x08008d12

08008640 <__sread>:
 8008640:	b510      	push	{r4, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	f000 f8d6 	bl	80087f8 <_read_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	bfab      	itete	ge
 8008650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008652:	89a3      	ldrhlt	r3, [r4, #12]
 8008654:	181b      	addge	r3, r3, r0
 8008656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800865a:	bfac      	ite	ge
 800865c:	6563      	strge	r3, [r4, #84]	; 0x54
 800865e:	81a3      	strhlt	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__swrite>:
 8008662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	461f      	mov	r7, r3
 8008668:	898b      	ldrh	r3, [r1, #12]
 800866a:	05db      	lsls	r3, r3, #23
 800866c:	4605      	mov	r5, r0
 800866e:	460c      	mov	r4, r1
 8008670:	4616      	mov	r6, r2
 8008672:	d505      	bpl.n	8008680 <__swrite+0x1e>
 8008674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008678:	2302      	movs	r3, #2
 800867a:	2200      	movs	r2, #0
 800867c:	f000 f898 	bl	80087b0 <_lseek_r>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	4632      	mov	r2, r6
 800868e:	463b      	mov	r3, r7
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008696:	f000 b817 	b.w	80086c8 <_write_r>

0800869a <__sseek>:
 800869a:	b510      	push	{r4, lr}
 800869c:	460c      	mov	r4, r1
 800869e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a2:	f000 f885 	bl	80087b0 <_lseek_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	bf15      	itete	ne
 80086ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80086ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086b6:	81a3      	strheq	r3, [r4, #12]
 80086b8:	bf18      	it	ne
 80086ba:	81a3      	strhne	r3, [r4, #12]
 80086bc:	bd10      	pop	{r4, pc}

080086be <__sclose>:
 80086be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c2:	f000 b831 	b.w	8008728 <_close_r>
	...

080086c8 <_write_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	; (80086e8 <_write_r+0x20>)
 80086cc:	4604      	mov	r4, r0
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	602a      	str	r2, [r5, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7f9 fbb3 	bl	8001e42 <_write>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_write_r+0x1e>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_write_r+0x1e>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	2000041c 	.word	0x2000041c

080086ec <__assert_func>:
 80086ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ee:	4614      	mov	r4, r2
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <__assert_func+0x2c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4605      	mov	r5, r0
 80086f8:	68d8      	ldr	r0, [r3, #12]
 80086fa:	b14c      	cbz	r4, 8008710 <__assert_func+0x24>
 80086fc:	4b07      	ldr	r3, [pc, #28]	; (800871c <__assert_func+0x30>)
 80086fe:	9100      	str	r1, [sp, #0]
 8008700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008704:	4906      	ldr	r1, [pc, #24]	; (8008720 <__assert_func+0x34>)
 8008706:	462b      	mov	r3, r5
 8008708:	f000 f81e 	bl	8008748 <fiprintf>
 800870c:	f000 f893 	bl	8008836 <abort>
 8008710:	4b04      	ldr	r3, [pc, #16]	; (8008724 <__assert_func+0x38>)
 8008712:	461c      	mov	r4, r3
 8008714:	e7f3      	b.n	80086fe <__assert_func+0x12>
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c
 800871c:	08008d1d 	.word	0x08008d1d
 8008720:	08008d2a 	.word	0x08008d2a
 8008724:	08008d58 	.word	0x08008d58

08008728 <_close_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d06      	ldr	r5, [pc, #24]	; (8008744 <_close_r+0x1c>)
 800872c:	2300      	movs	r3, #0
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7f9 fba1 	bl	8001e7a <_close>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_close_r+0x1a>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_close_r+0x1a>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	2000041c 	.word	0x2000041c

08008748 <fiprintf>:
 8008748:	b40e      	push	{r1, r2, r3}
 800874a:	b503      	push	{r0, r1, lr}
 800874c:	4601      	mov	r1, r0
 800874e:	ab03      	add	r3, sp, #12
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <fiprintf+0x20>)
 8008752:	f853 2b04 	ldr.w	r2, [r3], #4
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	f7ff fe41 	bl	80083e0 <_vfiprintf_r>
 800875e:	b002      	add	sp, #8
 8008760:	f85d eb04 	ldr.w	lr, [sp], #4
 8008764:	b003      	add	sp, #12
 8008766:	4770      	bx	lr
 8008768:	2000000c 	.word	0x2000000c

0800876c <_fstat_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d07      	ldr	r5, [pc, #28]	; (800878c <_fstat_r+0x20>)
 8008770:	2300      	movs	r3, #0
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	f7f9 fb8a 	bl	8001e92 <_fstat>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d102      	bne.n	8008788 <_fstat_r+0x1c>
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	b103      	cbz	r3, 8008788 <_fstat_r+0x1c>
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	2000041c 	.word	0x2000041c

08008790 <_isatty_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_isatty_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f9 fb89 	bl	8001eb2 <_isatty>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_isatty_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_isatty_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	2000041c 	.word	0x2000041c

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_lseek_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7f9 fb82 	bl	8001ec8 <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	2000041c 	.word	0x2000041c

080087d4 <__ascii_mbtowc>:
 80087d4:	b082      	sub	sp, #8
 80087d6:	b901      	cbnz	r1, 80087da <__ascii_mbtowc+0x6>
 80087d8:	a901      	add	r1, sp, #4
 80087da:	b142      	cbz	r2, 80087ee <__ascii_mbtowc+0x1a>
 80087dc:	b14b      	cbz	r3, 80087f2 <__ascii_mbtowc+0x1e>
 80087de:	7813      	ldrb	r3, [r2, #0]
 80087e0:	600b      	str	r3, [r1, #0]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	1e10      	subs	r0, r2, #0
 80087e6:	bf18      	it	ne
 80087e8:	2001      	movne	r0, #1
 80087ea:	b002      	add	sp, #8
 80087ec:	4770      	bx	lr
 80087ee:	4610      	mov	r0, r2
 80087f0:	e7fb      	b.n	80087ea <__ascii_mbtowc+0x16>
 80087f2:	f06f 0001 	mvn.w	r0, #1
 80087f6:	e7f8      	b.n	80087ea <__ascii_mbtowc+0x16>

080087f8 <_read_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_read_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f9 fafe 	bl	8001e08 <_read>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_read_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_read_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	2000041c 	.word	0x2000041c

0800881c <__ascii_wctomb>:
 800881c:	b149      	cbz	r1, 8008832 <__ascii_wctomb+0x16>
 800881e:	2aff      	cmp	r2, #255	; 0xff
 8008820:	bf85      	ittet	hi
 8008822:	238a      	movhi	r3, #138	; 0x8a
 8008824:	6003      	strhi	r3, [r0, #0]
 8008826:	700a      	strbls	r2, [r1, #0]
 8008828:	f04f 30ff 	movhi.w	r0, #4294967295
 800882c:	bf98      	it	ls
 800882e:	2001      	movls	r0, #1
 8008830:	4770      	bx	lr
 8008832:	4608      	mov	r0, r1
 8008834:	4770      	bx	lr

08008836 <abort>:
 8008836:	b508      	push	{r3, lr}
 8008838:	2006      	movs	r0, #6
 800883a:	f000 f82b 	bl	8008894 <raise>
 800883e:	2001      	movs	r0, #1
 8008840:	f7f9 fad8 	bl	8001df4 <_exit>

08008844 <_raise_r>:
 8008844:	291f      	cmp	r1, #31
 8008846:	b538      	push	{r3, r4, r5, lr}
 8008848:	4604      	mov	r4, r0
 800884a:	460d      	mov	r5, r1
 800884c:	d904      	bls.n	8008858 <_raise_r+0x14>
 800884e:	2316      	movs	r3, #22
 8008850:	6003      	str	r3, [r0, #0]
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800885a:	b112      	cbz	r2, 8008862 <_raise_r+0x1e>
 800885c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008860:	b94b      	cbnz	r3, 8008876 <_raise_r+0x32>
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f830 	bl	80088c8 <_getpid_r>
 8008868:	462a      	mov	r2, r5
 800886a:	4601      	mov	r1, r0
 800886c:	4620      	mov	r0, r4
 800886e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008872:	f000 b817 	b.w	80088a4 <_kill_r>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d00a      	beq.n	8008890 <_raise_r+0x4c>
 800887a:	1c59      	adds	r1, r3, #1
 800887c:	d103      	bne.n	8008886 <_raise_r+0x42>
 800887e:	2316      	movs	r3, #22
 8008880:	6003      	str	r3, [r0, #0]
 8008882:	2001      	movs	r0, #1
 8008884:	e7e7      	b.n	8008856 <_raise_r+0x12>
 8008886:	2400      	movs	r4, #0
 8008888:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800888c:	4628      	mov	r0, r5
 800888e:	4798      	blx	r3
 8008890:	2000      	movs	r0, #0
 8008892:	e7e0      	b.n	8008856 <_raise_r+0x12>

08008894 <raise>:
 8008894:	4b02      	ldr	r3, [pc, #8]	; (80088a0 <raise+0xc>)
 8008896:	4601      	mov	r1, r0
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f7ff bfd3 	b.w	8008844 <_raise_r>
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c

080088a4 <_kill_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d07      	ldr	r5, [pc, #28]	; (80088c4 <_kill_r+0x20>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	4611      	mov	r1, r2
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	f7f9 fa8f 	bl	8001dd4 <_kill>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d102      	bne.n	80088c0 <_kill_r+0x1c>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	b103      	cbz	r3, 80088c0 <_kill_r+0x1c>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	2000041c 	.word	0x2000041c

080088c8 <_getpid_r>:
 80088c8:	f7f9 ba7c 	b.w	8001dc4 <_getpid>

080088cc <_init>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr

080088d8 <_fini>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr
